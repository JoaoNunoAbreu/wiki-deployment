/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 41.0, "minX": 0.0, "maxY": 8178.0, "series": [{"data": [[0.0, 320.0], [0.1, 381.0], [0.2, 441.0], [0.3, 441.0], [0.4, 553.0], [0.5, 553.0], [0.6, 553.0], [0.7, 554.0], [0.8, 561.0], [0.9, 563.0], [1.0, 567.0], [1.1, 574.0], [1.2, 574.0], [1.3, 577.0], [1.4, 582.0], [1.5, 594.0], [1.6, 598.0], [1.7, 606.0], [1.8, 608.0], [1.9, 613.0], [2.0, 621.0], [2.1, 634.0], [2.2, 636.0], [2.3, 642.0], [2.4, 642.0], [2.5, 644.0], [2.6, 644.0], [2.7, 647.0], [2.8, 647.0], [2.9, 648.0], [3.0, 670.0], [3.1, 673.0], [3.2, 710.0], [3.3, 730.0], [3.4, 731.0], [3.5, 737.0], [3.6, 800.0], [3.7, 802.0], [3.8, 810.0], [3.9, 826.0], [4.0, 880.0], [4.1, 885.0], [4.2, 892.0], [4.3, 895.0], [4.4, 896.0], [4.5, 906.0], [4.6, 906.0], [4.7, 908.0], [4.8, 914.0], [4.9, 933.0], [5.0, 933.0], [5.1, 937.0], [5.2, 937.0], [5.3, 938.0], [5.4, 938.0], [5.5, 959.0], [5.6, 959.0], [5.7, 969.0], [5.8, 973.0], [5.9, 980.0], [6.0, 982.0], [6.1, 984.0], [6.2, 984.0], [6.3, 985.0], [6.4, 988.0], [6.5, 988.0], [6.6, 996.0], [6.7, 1001.0], [6.8, 1003.0], [6.9, 1003.0], [7.0, 1005.0], [7.1, 1009.0], [7.2, 1010.0], [7.3, 1011.0], [7.4, 1013.0], [7.5, 1014.0], [7.6, 1016.0], [7.7, 1016.0], [7.8, 1016.0], [7.9, 1019.0], [8.0, 1019.0], [8.1, 1021.0], [8.2, 1023.0], [8.3, 1023.0], [8.4, 1023.0], [8.5, 1024.0], [8.6, 1025.0], [8.7, 1027.0], [8.8, 1027.0], [8.9, 1028.0], [9.0, 1028.0], [9.1, 1029.0], [9.2, 1031.0], [9.3, 1031.0], [9.4, 1032.0], [9.5, 1032.0], [9.6, 1032.0], [9.7, 1033.0], [9.8, 1034.0], [9.9, 1035.0], [10.0, 1035.0], [10.1, 1036.0], [10.2, 1036.0], [10.3, 1038.0], [10.4, 1038.0], [10.5, 1039.0], [10.6, 1040.0], [10.7, 1042.0], [10.8, 1042.0], [10.9, 1045.0], [11.0, 1046.0], [11.1, 1047.0], [11.2, 1047.0], [11.3, 1048.0], [11.4, 1051.0], [11.5, 1051.0], [11.6, 1052.0], [11.7, 1054.0], [11.8, 1055.0], [11.9, 1056.0], [12.0, 1056.0], [12.1, 1058.0], [12.2, 1059.0], [12.3, 1061.0], [12.4, 1062.0], [12.5, 1062.0], [12.6, 1062.0], [12.7, 1062.0], [12.8, 1063.0], [12.9, 1064.0], [13.0, 1065.0], [13.1, 1066.0], [13.2, 1067.0], [13.3, 1067.0], [13.4, 1068.0], [13.5, 1068.0], [13.6, 1068.0], [13.7, 1070.0], [13.8, 1071.0], [13.9, 1075.0], [14.0, 1075.0], [14.1, 1076.0], [14.2, 1076.0], [14.3, 1076.0], [14.4, 1076.0], [14.5, 1077.0], [14.6, 1077.0], [14.7, 1078.0], [14.8, 1079.0], [14.9, 1081.0], [15.0, 1083.0], [15.1, 1083.0], [15.2, 1084.0], [15.3, 1085.0], [15.4, 1087.0], [15.5, 1088.0], [15.6, 1088.0], [15.7, 1089.0], [15.8, 1093.0], [15.9, 1094.0], [16.0, 1095.0], [16.1, 1096.0], [16.2, 1096.0], [16.3, 1097.0], [16.4, 1097.0], [16.5, 1098.0], [16.6, 1101.0], [16.7, 1103.0], [16.8, 1105.0], [16.9, 1106.0], [17.0, 1107.0], [17.1, 1107.0], [17.2, 1110.0], [17.3, 1111.0], [17.4, 1116.0], [17.5, 1122.0], [17.6, 1126.0], [17.7, 1126.0], [17.8, 1127.0], [17.9, 1128.0], [18.0, 1134.0], [18.1, 1145.0], [18.2, 1145.0], [18.3, 1149.0], [18.4, 1150.0], [18.5, 1150.0], [18.6, 1150.0], [18.7, 1152.0], [18.8, 1157.0], [18.9, 1157.0], [19.0, 1159.0], [19.1, 1167.0], [19.2, 1179.0], [19.3, 1188.0], [19.4, 1189.0], [19.5, 1189.0], [19.6, 1195.0], [19.7, 1208.0], [19.8, 1208.0], [19.9, 1213.0], [20.0, 1216.0], [20.1, 1225.0], [20.2, 1225.0], [20.3, 1235.0], [20.4, 1252.0], [20.5, 1261.0], [20.6, 1295.0], [20.7, 1304.0], [20.8, 1312.0], [20.9, 1330.0], [21.0, 1343.0], [21.1, 1350.0], [21.2, 1356.0], [21.3, 1357.0], [21.4, 1362.0], [21.5, 1368.0], [21.6, 1368.0], [21.7, 1371.0], [21.8, 1396.0], [21.9, 1432.0], [22.0, 1437.0], [22.1, 1438.0], [22.2, 1443.0], [22.3, 1449.0], [22.4, 1454.0], [22.5, 1458.0], [22.6, 1461.0], [22.7, 1461.0], [22.8, 1462.0], [22.9, 1462.0], [23.0, 1466.0], [23.1, 1469.0], [23.2, 1472.0], [23.3, 1474.0], [23.4, 1491.0], [23.5, 1496.0], [23.6, 1496.0], [23.7, 1500.0], [23.8, 1510.0], [23.9, 1510.0], [24.0, 1513.0], [24.1, 1513.0], [24.2, 1520.0], [24.3, 1521.0], [24.4, 1523.0], [24.5, 1528.0], [24.6, 1528.0], [24.7, 1534.0], [24.8, 1539.0], [24.9, 1540.0], [25.0, 1542.0], [25.1, 1543.0], [25.2, 1546.0], [25.3, 1548.0], [25.4, 1550.0], [25.5, 1554.0], [25.6, 1562.0], [25.7, 1563.0], [25.8, 1564.0], [25.9, 1564.0], [26.0, 1566.0], [26.1, 1566.0], [26.2, 1579.0], [26.3, 1581.0], [26.4, 1581.0], [26.5, 1581.0], [26.6, 1582.0], [26.7, 1585.0], [26.8, 1585.0], [26.9, 1587.0], [27.0, 1587.0], [27.1, 1592.0], [27.2, 1593.0], [27.3, 1594.0], [27.4, 1595.0], [27.5, 1598.0], [27.6, 1602.0], [27.7, 1608.0], [27.8, 1608.0], [27.9, 1610.0], [28.0, 1613.0], [28.1, 1616.0], [28.2, 1616.0], [28.3, 1618.0], [28.4, 1619.0], [28.5, 1621.0], [28.6, 1642.0], [28.7, 1643.0], [28.8, 1644.0], [28.9, 1645.0], [29.0, 1646.0], [29.1, 1646.0], [29.2, 1647.0], [29.3, 1650.0], [29.4, 1651.0], [29.5, 1651.0], [29.6, 1654.0], [29.7, 1657.0], [29.8, 1657.0], [29.9, 1664.0], [30.0, 1669.0], [30.1, 1672.0], [30.2, 1675.0], [30.3, 1689.0], [30.4, 1690.0], [30.5, 1693.0], [30.6, 1705.0], [30.7, 1707.0], [30.8, 1712.0], [30.9, 1713.0], [31.0, 1715.0], [31.1, 1718.0], [31.2, 1721.0], [31.3, 1725.0], [31.4, 1726.0], [31.5, 1726.0], [31.6, 1726.0], [31.7, 1727.0], [31.8, 1729.0], [31.9, 1730.0], [32.0, 1730.0], [32.1, 1735.0], [32.2, 1736.0], [32.3, 1740.0], [32.4, 1749.0], [32.5, 1749.0], [32.6, 1750.0], [32.7, 1751.0], [32.8, 1751.0], [32.9, 1754.0], [33.0, 1755.0], [33.1, 1758.0], [33.2, 1759.0], [33.3, 1760.0], [33.4, 1760.0], [33.5, 1763.0], [33.6, 1768.0], [33.7, 1768.0], [33.8, 1771.0], [33.9, 1780.0], [34.0, 1786.0], [34.1, 1791.0], [34.2, 1791.0], [34.3, 1796.0], [34.4, 1800.0], [34.5, 1801.0], [34.6, 1806.0], [34.7, 1806.0], [34.8, 1817.0], [34.9, 1825.0], [35.0, 1826.0], [35.1, 1826.0], [35.2, 1827.0], [35.3, 1830.0], [35.4, 1835.0], [35.5, 1838.0], [35.6, 1839.0], [35.7, 1840.0], [35.8, 1841.0], [35.9, 1843.0], [36.0, 1846.0], [36.1, 1847.0], [36.2, 1851.0], [36.3, 1852.0], [36.4, 1866.0], [36.5, 1872.0], [36.6, 1875.0], [36.7, 1876.0], [36.8, 1879.0], [36.9, 1880.0], [37.0, 1881.0], [37.1, 1882.0], [37.2, 1883.0], [37.3, 1886.0], [37.4, 1887.0], [37.5, 1888.0], [37.6, 1888.0], [37.7, 1889.0], [37.8, 1896.0], [37.9, 1897.0], [38.0, 1903.0], [38.1, 1906.0], [38.2, 1909.0], [38.3, 1911.0], [38.4, 1913.0], [38.5, 1916.0], [38.6, 1919.0], [38.7, 1920.0], [38.8, 1920.0], [38.9, 1921.0], [39.0, 1923.0], [39.1, 1927.0], [39.2, 1940.0], [39.3, 1940.0], [39.4, 1941.0], [39.5, 1942.0], [39.6, 1944.0], [39.7, 1945.0], [39.8, 1947.0], [39.9, 1947.0], [40.0, 1947.0], [40.1, 1949.0], [40.2, 1950.0], [40.3, 1952.0], [40.4, 1953.0], [40.5, 1954.0], [40.6, 1954.0], [40.7, 1957.0], [40.8, 1959.0], [40.9, 1962.0], [41.0, 1963.0], [41.1, 1964.0], [41.2, 1966.0], [41.3, 1968.0], [41.4, 1970.0], [41.5, 1971.0], [41.6, 1971.0], [41.7, 1973.0], [41.8, 1976.0], [41.9, 1981.0], [42.0, 1981.0], [42.1, 1982.0], [42.2, 1983.0], [42.3, 1988.0], [42.4, 1989.0], [42.5, 1989.0], [42.6, 1995.0], [42.7, 1996.0], [42.8, 1996.0], [42.9, 1997.0], [43.0, 1998.0], [43.1, 1999.0], [43.2, 2000.0], [43.3, 2001.0], [43.4, 2004.0], [43.5, 2008.0], [43.6, 2009.0], [43.7, 2009.0], [43.8, 2010.0], [43.9, 2025.0], [44.0, 2028.0], [44.1, 2029.0], [44.2, 2039.0], [44.3, 2041.0], [44.4, 2043.0], [44.5, 2047.0], [44.6, 2054.0], [44.7, 2067.0], [44.8, 2072.0], [44.9, 2077.0], [45.0, 2077.0], [45.1, 2082.0], [45.2, 2083.0], [45.3, 2084.0], [45.4, 2087.0], [45.5, 2088.0], [45.6, 2089.0], [45.7, 2092.0], [45.8, 2092.0], [45.9, 2093.0], [46.0, 2094.0], [46.1, 2095.0], [46.2, 2119.0], [46.3, 2120.0], [46.4, 2123.0], [46.5, 2132.0], [46.6, 2137.0], [46.7, 2138.0], [46.8, 2141.0], [46.9, 2141.0], [47.0, 2145.0], [47.1, 2146.0], [47.2, 2152.0], [47.3, 2154.0], [47.4, 2155.0], [47.5, 2159.0], [47.6, 2160.0], [47.7, 2162.0], [47.8, 2164.0], [47.9, 2165.0], [48.0, 2169.0], [48.1, 2181.0], [48.2, 2187.0], [48.3, 2191.0], [48.4, 2192.0], [48.5, 2213.0], [48.6, 2213.0], [48.7, 2213.0], [48.8, 2215.0], [48.9, 2218.0], [49.0, 2218.0], [49.1, 2222.0], [49.2, 2226.0], [49.3, 2231.0], [49.4, 2235.0], [49.5, 2236.0], [49.6, 2238.0], [49.7, 2243.0], [49.8, 2247.0], [49.9, 2249.0], [50.0, 2259.0], [50.1, 2262.0], [50.2, 2265.0], [50.3, 2270.0], [50.4, 2271.0], [50.5, 2273.0], [50.6, 2273.0], [50.7, 2274.0], [50.8, 2282.0], [50.9, 2284.0], [51.0, 2291.0], [51.1, 2294.0], [51.2, 2299.0], [51.3, 2300.0], [51.4, 2300.0], [51.5, 2306.0], [51.6, 2317.0], [51.7, 2318.0], [51.8, 2322.0], [51.9, 2324.0], [52.0, 2330.0], [52.1, 2333.0], [52.2, 2334.0], [52.3, 2341.0], [52.4, 2344.0], [52.5, 2354.0], [52.6, 2355.0], [52.7, 2356.0], [52.8, 2360.0], [52.9, 2360.0], [53.0, 2361.0], [53.1, 2364.0], [53.2, 2372.0], [53.3, 2373.0], [53.4, 2374.0], [53.5, 2375.0], [53.6, 2375.0], [53.7, 2378.0], [53.8, 2378.0], [53.9, 2379.0], [54.0, 2382.0], [54.1, 2401.0], [54.2, 2405.0], [54.3, 2412.0], [54.4, 2416.0], [54.5, 2432.0], [54.6, 2454.0], [54.7, 2572.0], [54.8, 2615.0], [54.9, 2619.0], [55.0, 2627.0], [55.1, 2633.0], [55.2, 2634.0], [55.3, 2640.0], [55.4, 2641.0], [55.5, 2644.0], [55.6, 2645.0], [55.7, 2647.0], [55.8, 2649.0], [55.9, 2651.0], [56.0, 2653.0], [56.1, 2660.0], [56.2, 2661.0], [56.3, 2664.0], [56.4, 2669.0], [56.5, 2671.0], [56.6, 2672.0], [56.7, 2673.0], [56.8, 2673.0], [56.9, 2675.0], [57.0, 2676.0], [57.1, 2680.0], [57.2, 2681.0], [57.3, 2682.0], [57.4, 2684.0], [57.5, 2685.0], [57.6, 2687.0], [57.7, 2688.0], [57.8, 2689.0], [57.9, 2689.0], [58.0, 2690.0], [58.1, 2691.0], [58.2, 2693.0], [58.3, 2694.0], [58.4, 2697.0], [58.5, 2697.0], [58.6, 2697.0], [58.7, 2699.0], [58.8, 2704.0], [58.9, 2705.0], [59.0, 2706.0], [59.1, 2708.0], [59.2, 2710.0], [59.3, 2711.0], [59.4, 2712.0], [59.5, 2716.0], [59.6, 2725.0], [59.7, 2731.0], [59.8, 2746.0], [59.9, 2750.0], [60.0, 2750.0], [60.1, 2752.0], [60.2, 2762.0], [60.3, 2781.0], [60.4, 2781.0], [60.5, 2797.0], [60.6, 2802.0], [60.7, 2811.0], [60.8, 2815.0], [60.9, 2819.0], [61.0, 2832.0], [61.1, 2834.0], [61.2, 2836.0], [61.3, 2837.0], [61.4, 2844.0], [61.5, 2847.0], [61.6, 2849.0], [61.7, 2860.0], [61.8, 2861.0], [61.9, 2862.0], [62.0, 2864.0], [62.1, 2876.0], [62.2, 2879.0], [62.3, 2891.0], [62.4, 2891.0], [62.5, 2898.0], [62.6, 2899.0], [62.7, 2899.0], [62.8, 2911.0], [62.9, 2935.0], [63.0, 2954.0], [63.1, 2955.0], [63.2, 2958.0], [63.3, 2963.0], [63.4, 2969.0], [63.5, 2970.0], [63.6, 2974.0], [63.7, 2974.0], [63.8, 2977.0], [63.9, 2979.0], [64.0, 2983.0], [64.1, 2990.0], [64.2, 3001.0], [64.3, 3001.0], [64.4, 3001.0], [64.5, 3006.0], [64.6, 3008.0], [64.7, 3040.0], [64.8, 3041.0], [64.9, 3067.0], [65.0, 3082.0], [65.1, 3083.0], [65.2, 3088.0], [65.3, 3089.0], [65.4, 3103.0], [65.5, 3103.0], [65.6, 3103.0], [65.7, 3118.0], [65.8, 3143.0], [65.9, 3154.0], [66.0, 3154.0], [66.1, 3162.0], [66.2, 3192.0], [66.3, 3198.0], [66.4, 3199.0], [66.5, 3201.0], [66.6, 3214.0], [66.7, 3217.0], [66.8, 3251.0], [66.9, 3313.0], [67.0, 3390.0], [67.1, 3396.0], [67.2, 3399.0], [67.3, 3399.0], [67.4, 3400.0], [67.5, 3400.0], [67.6, 3401.0], [67.7, 3401.0], [67.8, 3401.0], [67.9, 3402.0], [68.0, 3403.0], [68.1, 3406.0], [68.2, 3406.0], [68.3, 3408.0], [68.4, 3409.0], [68.5, 3412.0], [68.6, 3413.0], [68.7, 3415.0], [68.8, 3417.0], [68.9, 3420.0], [69.0, 3420.0], [69.1, 3421.0], [69.2, 3423.0], [69.3, 3423.0], [69.4, 3424.0], [69.5, 3427.0], [69.6, 3427.0], [69.7, 3428.0], [69.8, 3429.0], [69.9, 3430.0], [70.0, 3431.0], [70.1, 3432.0], [70.2, 3434.0], [70.3, 3436.0], [70.4, 3437.0], [70.5, 3440.0], [70.6, 3448.0], [70.7, 3452.0], [70.8, 3456.0], [70.9, 3456.0], [71.0, 3457.0], [71.1, 3457.0], [71.2, 3458.0], [71.3, 3458.0], [71.4, 3461.0], [71.5, 3462.0], [71.6, 3462.0], [71.7, 3462.0], [71.8, 3462.0], [71.9, 3464.0], [72.0, 3464.0], [72.1, 3464.0], [72.2, 3466.0], [72.3, 3469.0], [72.4, 3470.0], [72.5, 3470.0], [72.6, 3471.0], [72.7, 3472.0], [72.8, 3481.0], [72.9, 3492.0], [73.0, 3494.0], [73.1, 3509.0], [73.2, 3523.0], [73.3, 3604.0], [73.4, 3644.0], [73.5, 3654.0], [73.6, 3670.0], [73.7, 3671.0], [73.8, 3671.0], [73.9, 3677.0], [74.0, 3683.0], [74.1, 3687.0], [74.2, 3688.0], [74.3, 3700.0], [74.4, 3853.0], [74.5, 3855.0], [74.6, 3954.0], [74.7, 3984.0], [74.8, 4177.0], [74.9, 4194.0], [75.0, 4196.0], [75.1, 4207.0], [75.2, 4209.0], [75.3, 4213.0], [75.4, 4223.0], [75.5, 4232.0], [75.6, 4235.0], [75.7, 4260.0], [75.8, 4322.0], [75.9, 4330.0], [76.0, 4368.0], [76.1, 4398.0], [76.2, 4400.0], [76.3, 4415.0], [76.4, 4423.0], [76.5, 4429.0], [76.6, 4444.0], [76.7, 4455.0], [76.8, 4474.0], [76.9, 4493.0], [77.0, 4544.0], [77.1, 4548.0], [77.2, 4558.0], [77.3, 4560.0], [77.4, 4572.0], [77.5, 4574.0], [77.6, 4575.0], [77.7, 4588.0], [77.8, 4601.0], [77.9, 4617.0], [78.0, 4640.0], [78.1, 4644.0], [78.2, 4647.0], [78.3, 4647.0], [78.4, 4649.0], [78.5, 4668.0], [78.6, 4670.0], [78.7, 4679.0], [78.8, 4679.0], [78.9, 4686.0], [79.0, 4686.0], [79.1, 4687.0], [79.2, 4688.0], [79.3, 4689.0], [79.4, 4700.0], [79.5, 4707.0], [79.6, 4708.0], [79.7, 4728.0], [79.8, 4728.0], [79.9, 4741.0], [80.0, 4741.0], [80.1, 4747.0], [80.2, 4771.0], [80.3, 4774.0], [80.4, 4781.0], [80.5, 4784.0], [80.6, 4797.0], [80.7, 4799.0], [80.8, 4801.0], [80.9, 4812.0], [81.0, 4834.0], [81.1, 4835.0], [81.2, 4856.0], [81.3, 4858.0], [81.4, 4859.0], [81.5, 4860.0], [81.6, 4879.0], [81.7, 4884.0], [81.8, 4894.0], [81.9, 4904.0], [82.0, 4909.0], [82.1, 4909.0], [82.2, 4919.0], [82.3, 4935.0], [82.4, 4945.0], [82.5, 4955.0], [82.6, 4966.0], [82.7, 4967.0], [82.8, 4974.0], [82.9, 4988.0], [83.0, 4989.0], [83.1, 4990.0], [83.2, 4990.0], [83.3, 4997.0], [83.4, 4999.0], [83.5, 5000.0], [83.6, 5001.0], [83.7, 5003.0], [83.8, 5016.0], [83.9, 5018.0], [84.0, 5022.0], [84.1, 5024.0], [84.2, 5027.0], [84.3, 5039.0], [84.4, 5040.0], [84.5, 5042.0], [84.6, 5048.0], [84.7, 5054.0], [84.8, 5056.0], [84.9, 5057.0], [85.0, 5069.0], [85.1, 5073.0], [85.2, 5073.0], [85.3, 5073.0], [85.4, 5076.0], [85.5, 5082.0], [85.6, 5086.0], [85.7, 5089.0], [85.8, 5089.0], [85.9, 5096.0], [86.0, 5100.0], [86.1, 5102.0], [86.2, 5113.0], [86.3, 5118.0], [86.4, 5119.0], [86.5, 5120.0], [86.6, 5122.0], [86.7, 5122.0], [86.8, 5122.0], [86.9, 5123.0], [87.0, 5124.0], [87.1, 5127.0], [87.2, 5128.0], [87.3, 5131.0], [87.4, 5132.0], [87.5, 5134.0], [87.6, 5134.0], [87.7, 5135.0], [87.8, 5136.0], [87.9, 5137.0], [88.0, 5139.0], [88.1, 5139.0], [88.2, 5140.0], [88.3, 5145.0], [88.4, 5149.0], [88.5, 5150.0], [88.6, 5151.0], [88.7, 5154.0], [88.8, 5154.0], [88.9, 5155.0], [89.0, 5158.0], [89.1, 5160.0], [89.2, 5165.0], [89.3, 5165.0], [89.4, 5167.0], [89.5, 5168.0], [89.6, 5168.0], [89.7, 5171.0], [89.8, 5174.0], [89.9, 5179.0], [90.0, 5179.0], [90.1, 5187.0], [90.2, 5189.0], [90.3, 5192.0], [90.4, 5195.0], [90.5, 5197.0], [90.6, 5201.0], [90.7, 5208.0], [90.8, 5208.0], [90.9, 5209.0], [91.0, 5211.0], [91.1, 5211.0], [91.2, 5212.0], [91.3, 5212.0], [91.4, 5217.0], [91.5, 5220.0], [91.6, 5225.0], [91.7, 5226.0], [91.8, 5231.0], [91.9, 5235.0], [92.0, 5238.0], [92.1, 5253.0], [92.2, 5254.0], [92.3, 5269.0], [92.4, 5270.0], [92.5, 5272.0], [92.6, 5307.0], [92.7, 5475.0], [92.8, 5515.0], [92.9, 5563.0], [93.0, 5566.0], [93.1, 5574.0], [93.2, 5579.0], [93.3, 5580.0], [93.4, 5583.0], [93.5, 5591.0], [93.6, 5593.0], [93.7, 5603.0], [93.8, 5607.0], [93.9, 5621.0], [94.0, 5621.0], [94.1, 5627.0], [94.2, 5629.0], [94.3, 5639.0], [94.4, 5643.0], [94.5, 5643.0], [94.6, 5644.0], [94.7, 5645.0], [94.8, 5646.0], [94.9, 5652.0], [95.0, 5683.0], [95.1, 5721.0], [95.2, 5730.0], [95.3, 5731.0], [95.4, 5733.0], [95.5, 5746.0], [95.6, 5760.0], [95.7, 5776.0], [95.8, 5779.0], [95.9, 5809.0], [96.0, 5826.0], [96.1, 5835.0], [96.2, 5843.0], [96.3, 5891.0], [96.4, 5929.0], [96.5, 6903.0], [96.6, 6920.0], [96.7, 7004.0], [96.8, 7057.0], [96.9, 7072.0], [97.0, 7076.0], [97.1, 7076.0], [97.2, 7077.0], [97.3, 7080.0], [97.4, 7080.0], [97.5, 7080.0], [97.6, 7080.0], [97.7, 7081.0], [97.8, 7083.0], [97.9, 7083.0], [98.0, 7084.0], [98.1, 7084.0], [98.2, 7085.0], [98.3, 7086.0], [98.4, 7088.0], [98.5, 7088.0], [98.6, 7089.0], [98.7, 7090.0], [98.8, 7093.0], [98.9, 7095.0], [99.0, 7097.0], [99.1, 7467.0], [99.2, 7684.0], [99.3, 7692.0], [99.4, 7706.0], [99.5, 7709.0], [99.6, 7718.0], [99.7, 8131.0], [99.8, 8133.0], [99.9, 8178.0]], "isOverall": false, "label": "Home", "isController": false}, {"data": [[0.0, 41.0], [0.1, 42.0], [0.2, 42.0], [0.3, 42.0], [0.4, 43.0], [0.5, 43.0], [0.6, 43.0], [0.7, 43.0], [0.8, 43.0], [0.9, 43.0], [1.0, 43.0], [1.1, 44.0], [1.2, 44.0], [1.3, 44.0], [1.4, 44.0], [1.5, 44.0], [1.6, 44.0], [1.7, 44.0], [1.8, 44.0], [1.9, 44.0], [2.0, 44.0], [2.1, 44.0], [2.2, 44.0], [2.3, 44.0], [2.4, 44.0], [2.5, 44.0], [2.6, 44.0], [2.7, 44.0], [2.8, 44.0], [2.9, 44.0], [3.0, 44.0], [3.1, 44.0], [3.2, 45.0], [3.3, 45.0], [3.4, 45.0], [3.5, 45.0], [3.6, 45.0], [3.7, 45.0], [3.8, 45.0], [3.9, 45.0], [4.0, 45.0], [4.1, 45.0], [4.2, 45.0], [4.3, 45.0], [4.4, 45.0], [4.5, 45.0], [4.6, 45.0], [4.7, 45.0], [4.8, 45.0], [4.9, 45.0], [5.0, 45.0], [5.1, 46.0], [5.2, 46.0], [5.3, 46.0], [5.4, 46.0], [5.5, 46.0], [5.6, 46.0], [5.7, 46.0], [5.8, 46.0], [5.9, 46.0], [6.0, 46.0], [6.1, 46.0], [6.2, 46.0], [6.3, 46.0], [6.4, 46.0], [6.5, 46.0], [6.6, 46.0], [6.7, 46.0], [6.8, 46.0], [6.9, 46.0], [7.0, 46.0], [7.1, 46.0], [7.2, 46.0], [7.3, 46.0], [7.4, 46.0], [7.5, 46.0], [7.6, 46.0], [7.7, 46.0], [7.8, 46.0], [7.9, 46.0], [8.0, 46.0], [8.1, 46.0], [8.2, 46.0], [8.3, 46.0], [8.4, 46.0], [8.5, 47.0], [8.6, 47.0], [8.7, 47.0], [8.8, 47.0], [8.9, 47.0], [9.0, 47.0], [9.1, 47.0], [9.2, 47.0], [9.3, 47.0], [9.4, 47.0], [9.5, 47.0], [9.6, 47.0], [9.7, 47.0], [9.8, 47.0], [9.9, 47.0], [10.0, 47.0], [10.1, 47.0], [10.2, 47.0], [10.3, 47.0], [10.4, 47.0], [10.5, 47.0], [10.6, 47.0], [10.7, 47.0], [10.8, 47.0], [10.9, 47.0], [11.0, 47.0], [11.1, 47.0], [11.2, 47.0], [11.3, 47.0], [11.4, 47.0], [11.5, 47.0], [11.6, 47.0], [11.7, 47.0], [11.8, 47.0], [11.9, 47.0], [12.0, 47.0], [12.1, 48.0], [12.2, 48.0], [12.3, 48.0], [12.4, 48.0], [12.5, 48.0], [12.6, 48.0], [12.7, 48.0], [12.8, 48.0], [12.9, 48.0], [13.0, 48.0], [13.1, 48.0], [13.2, 48.0], [13.3, 48.0], [13.4, 48.0], [13.5, 48.0], [13.6, 48.0], [13.7, 48.0], [13.8, 48.0], [13.9, 48.0], [14.0, 48.0], [14.1, 48.0], [14.2, 48.0], [14.3, 48.0], [14.4, 48.0], [14.5, 48.0], [14.6, 48.0], [14.7, 48.0], [14.8, 48.0], [14.9, 48.0], [15.0, 48.0], [15.1, 48.0], [15.2, 48.0], [15.3, 48.0], [15.4, 48.0], [15.5, 48.0], [15.6, 48.0], [15.7, 48.0], [15.8, 48.0], [15.9, 48.0], [16.0, 48.0], [16.1, 48.0], [16.2, 48.0], [16.3, 48.0], [16.4, 48.0], [16.5, 48.0], [16.6, 48.0], [16.7, 48.0], [16.8, 48.0], [16.9, 48.0], [17.0, 49.0], [17.1, 49.0], [17.2, 49.0], [17.3, 49.0], [17.4, 49.0], [17.5, 49.0], [17.6, 49.0], [17.7, 49.0], [17.8, 49.0], [17.9, 49.0], [18.0, 49.0], [18.1, 49.0], [18.2, 49.0], [18.3, 49.0], [18.4, 49.0], [18.5, 49.0], [18.6, 49.0], [18.7, 49.0], [18.8, 49.0], [18.9, 49.0], [19.0, 49.0], [19.1, 49.0], [19.2, 49.0], [19.3, 49.0], [19.4, 49.0], [19.5, 49.0], [19.6, 49.0], [19.7, 49.0], [19.8, 49.0], [19.9, 49.0], [20.0, 49.0], [20.1, 49.0], [20.2, 49.0], [20.3, 49.0], [20.4, 49.0], [20.5, 49.0], [20.6, 49.0], [20.7, 49.0], [20.8, 49.0], [20.9, 49.0], [21.0, 49.0], [21.1, 49.0], [21.2, 49.0], [21.3, 49.0], [21.4, 49.0], [21.5, 49.0], [21.6, 49.0], [21.7, 49.0], [21.8, 49.0], [21.9, 49.0], [22.0, 49.0], [22.1, 49.0], [22.2, 50.0], [22.3, 50.0], [22.4, 50.0], [22.5, 50.0], [22.6, 50.0], [22.7, 50.0], [22.8, 50.0], [22.9, 50.0], [23.0, 50.0], [23.1, 50.0], [23.2, 50.0], [23.3, 50.0], [23.4, 50.0], [23.5, 50.0], [23.6, 50.0], [23.7, 50.0], [23.8, 50.0], [23.9, 50.0], [24.0, 50.0], [24.1, 50.0], [24.2, 50.0], [24.3, 50.0], [24.4, 50.0], [24.5, 50.0], [24.6, 50.0], [24.7, 50.0], [24.8, 50.0], [24.9, 50.0], [25.0, 50.0], [25.1, 50.0], [25.2, 50.0], [25.3, 50.0], [25.4, 50.0], [25.5, 50.0], [25.6, 50.0], [25.7, 51.0], [25.8, 51.0], [25.9, 51.0], [26.0, 51.0], [26.1, 51.0], [26.2, 51.0], [26.3, 51.0], [26.4, 51.0], [26.5, 51.0], [26.6, 51.0], [26.7, 51.0], [26.8, 51.0], [26.9, 51.0], [27.0, 51.0], [27.1, 51.0], [27.2, 51.0], [27.3, 51.0], [27.4, 51.0], [27.5, 51.0], [27.6, 51.0], [27.7, 51.0], [27.8, 51.0], [27.9, 51.0], [28.0, 51.0], [28.1, 51.0], [28.2, 51.0], [28.3, 51.0], [28.4, 51.0], [28.5, 51.0], [28.6, 51.0], [28.7, 51.0], [28.8, 51.0], [28.9, 51.0], [29.0, 51.0], [29.1, 51.0], [29.2, 51.0], [29.3, 51.0], [29.4, 51.0], [29.5, 51.0], [29.6, 52.0], [29.7, 52.0], [29.8, 52.0], [29.9, 52.0], [30.0, 52.0], [30.1, 52.0], [30.2, 52.0], [30.3, 52.0], [30.4, 52.0], [30.5, 52.0], [30.6, 52.0], [30.7, 52.0], [30.8, 52.0], [30.9, 52.0], [31.0, 52.0], [31.1, 52.0], [31.2, 52.0], [31.3, 52.0], [31.4, 52.0], [31.5, 52.0], [31.6, 52.0], [31.7, 52.0], [31.8, 52.0], [31.9, 52.0], [32.0, 52.0], [32.1, 52.0], [32.2, 52.0], [32.3, 52.0], [32.4, 52.0], [32.5, 53.0], [32.6, 53.0], [32.7, 53.0], [32.8, 53.0], [32.9, 53.0], [33.0, 53.0], [33.1, 53.0], [33.2, 53.0], [33.3, 53.0], [33.4, 53.0], [33.5, 53.0], [33.6, 53.0], [33.7, 53.0], [33.8, 53.0], [33.9, 53.0], [34.0, 53.0], [34.1, 53.0], [34.2, 53.0], [34.3, 53.0], [34.4, 53.0], [34.5, 53.0], [34.6, 53.0], [34.7, 53.0], [34.8, 53.0], [34.9, 53.0], [35.0, 53.0], [35.1, 53.0], [35.2, 53.0], [35.3, 53.0], [35.4, 53.0], [35.5, 53.0], [35.6, 54.0], [35.7, 54.0], [35.8, 54.0], [35.9, 54.0], [36.0, 54.0], [36.1, 54.0], [36.2, 54.0], [36.3, 54.0], [36.4, 54.0], [36.5, 54.0], [36.6, 54.0], [36.7, 54.0], [36.8, 54.0], [36.9, 54.0], [37.0, 54.0], [37.1, 54.0], [37.2, 54.0], [37.3, 54.0], [37.4, 54.0], [37.5, 54.0], [37.6, 54.0], [37.7, 54.0], [37.8, 54.0], [37.9, 54.0], [38.0, 54.0], [38.1, 54.0], [38.2, 54.0], [38.3, 54.0], [38.4, 54.0], [38.5, 54.0], [38.6, 54.0], [38.7, 54.0], [38.8, 54.0], [38.9, 54.0], [39.0, 54.0], [39.1, 54.0], [39.2, 55.0], [39.3, 55.0], [39.4, 55.0], [39.5, 55.0], [39.6, 55.0], [39.7, 55.0], [39.8, 55.0], [39.9, 55.0], [40.0, 55.0], [40.1, 55.0], [40.2, 55.0], [40.3, 55.0], [40.4, 55.0], [40.5, 55.0], [40.6, 55.0], [40.7, 55.0], [40.8, 55.0], [40.9, 55.0], [41.0, 55.0], [41.1, 55.0], [41.2, 55.0], [41.3, 55.0], [41.4, 55.0], [41.5, 55.0], [41.6, 55.0], [41.7, 55.0], [41.8, 55.0], [41.9, 55.0], [42.0, 55.0], [42.1, 55.0], [42.2, 55.0], [42.3, 55.0], [42.4, 55.0], [42.5, 55.0], [42.6, 55.0], [42.7, 55.0], [42.8, 55.0], [42.9, 55.0], [43.0, 55.0], [43.1, 55.0], [43.2, 56.0], [43.3, 56.0], [43.4, 56.0], [43.5, 56.0], [43.6, 56.0], [43.7, 56.0], [43.8, 56.0], [43.9, 56.0], [44.0, 56.0], [44.1, 56.0], [44.2, 56.0], [44.3, 56.0], [44.4, 56.0], [44.5, 56.0], [44.6, 56.0], [44.7, 56.0], [44.8, 56.0], [44.9, 56.0], [45.0, 56.0], [45.1, 56.0], [45.2, 56.0], [45.3, 56.0], [45.4, 56.0], [45.5, 56.0], [45.6, 56.0], [45.7, 56.0], [45.8, 56.0], [45.9, 56.0], [46.0, 56.0], [46.1, 56.0], [46.2, 56.0], [46.3, 56.0], [46.4, 56.0], [46.5, 56.0], [46.6, 56.0], [46.7, 57.0], [46.8, 57.0], [46.9, 57.0], [47.0, 57.0], [47.1, 57.0], [47.2, 57.0], [47.3, 57.0], [47.4, 57.0], [47.5, 57.0], [47.6, 57.0], [47.7, 57.0], [47.8, 57.0], [47.9, 57.0], [48.0, 57.0], [48.1, 57.0], [48.2, 57.0], [48.3, 57.0], [48.4, 57.0], [48.5, 57.0], [48.6, 57.0], [48.7, 57.0], [48.8, 57.0], [48.9, 57.0], [49.0, 57.0], [49.1, 57.0], [49.2, 58.0], [49.3, 58.0], [49.4, 58.0], [49.5, 58.0], [49.6, 58.0], [49.7, 58.0], [49.8, 58.0], [49.9, 58.0], [50.0, 58.0], [50.1, 58.0], [50.2, 58.0], [50.3, 58.0], [50.4, 58.0], [50.5, 58.0], [50.6, 58.0], [50.7, 58.0], [50.8, 58.0], [50.9, 58.0], [51.0, 58.0], [51.1, 58.0], [51.2, 58.0], [51.3, 58.0], [51.4, 58.0], [51.5, 58.0], [51.6, 58.0], [51.7, 58.0], [51.8, 58.0], [51.9, 58.0], [52.0, 58.0], [52.1, 58.0], [52.2, 58.0], [52.3, 58.0], [52.4, 58.0], [52.5, 59.0], [52.6, 59.0], [52.7, 59.0], [52.8, 59.0], [52.9, 59.0], [53.0, 59.0], [53.1, 59.0], [53.2, 59.0], [53.3, 59.0], [53.4, 59.0], [53.5, 59.0], [53.6, 59.0], [53.7, 59.0], [53.8, 59.0], [53.9, 59.0], [54.0, 59.0], [54.1, 59.0], [54.2, 59.0], [54.3, 59.0], [54.4, 59.0], [54.5, 59.0], [54.6, 60.0], [54.7, 60.0], [54.8, 60.0], [54.9, 60.0], [55.0, 60.0], [55.1, 60.0], [55.2, 60.0], [55.3, 60.0], [55.4, 60.0], [55.5, 60.0], [55.6, 60.0], [55.7, 60.0], [55.8, 60.0], [55.9, 60.0], [56.0, 60.0], [56.1, 60.0], [56.2, 60.0], [56.3, 60.0], [56.4, 60.0], [56.5, 60.0], [56.6, 60.0], [56.7, 60.0], [56.8, 60.0], [56.9, 60.0], [57.0, 60.0], [57.1, 60.0], [57.2, 60.0], [57.3, 60.0], [57.4, 60.0], [57.5, 61.0], [57.6, 61.0], [57.7, 61.0], [57.8, 61.0], [57.9, 61.0], [58.0, 61.0], [58.1, 61.0], [58.2, 61.0], [58.3, 61.0], [58.4, 61.0], [58.5, 61.0], [58.6, 61.0], [58.7, 61.0], [58.8, 61.0], [58.9, 61.0], [59.0, 61.0], [59.1, 61.0], [59.2, 61.0], [59.3, 61.0], [59.4, 61.0], [59.5, 61.0], [59.6, 61.0], [59.7, 61.0], [59.8, 61.0], [59.9, 62.0], [60.0, 62.0], [60.1, 62.0], [60.2, 62.0], [60.3, 62.0], [60.4, 62.0], [60.5, 62.0], [60.6, 62.0], [60.7, 62.0], [60.8, 62.0], [60.9, 62.0], [61.0, 62.0], [61.1, 62.0], [61.2, 62.0], [61.3, 62.0], [61.4, 62.0], [61.5, 62.0], [61.6, 62.0], [61.7, 62.0], [61.8, 62.0], [61.9, 62.0], [62.0, 62.0], [62.1, 62.0], [62.2, 62.0], [62.3, 62.0], [62.4, 62.0], [62.5, 62.0], [62.6, 62.0], [62.7, 62.0], [62.8, 62.0], [62.9, 62.0], [63.0, 63.0], [63.1, 63.0], [63.2, 63.0], [63.3, 63.0], [63.4, 63.0], [63.5, 63.0], [63.6, 63.0], [63.7, 63.0], [63.8, 63.0], [63.9, 63.0], [64.0, 63.0], [64.1, 63.0], [64.2, 63.0], [64.3, 63.0], [64.4, 63.0], [64.5, 63.0], [64.6, 63.0], [64.7, 63.0], [64.8, 63.0], [64.9, 63.0], [65.0, 63.0], [65.1, 63.0], [65.2, 63.0], [65.3, 63.0], [65.4, 63.0], [65.5, 63.0], [65.6, 63.0], [65.7, 63.0], [65.8, 63.0], [65.9, 63.0], [66.0, 64.0], [66.1, 64.0], [66.2, 64.0], [66.3, 64.0], [66.4, 64.0], [66.5, 64.0], [66.6, 64.0], [66.7, 64.0], [66.8, 64.0], [66.9, 64.0], [67.0, 64.0], [67.1, 64.0], [67.2, 64.0], [67.3, 64.0], [67.4, 64.0], [67.5, 64.0], [67.6, 64.0], [67.7, 64.0], [67.8, 64.0], [67.9, 64.0], [68.0, 64.0], [68.1, 64.0], [68.2, 64.0], [68.3, 64.0], [68.4, 64.0], [68.5, 64.0], [68.6, 64.0], [68.7, 65.0], [68.8, 65.0], [68.9, 65.0], [69.0, 65.0], [69.1, 65.0], [69.2, 65.0], [69.3, 65.0], [69.4, 65.0], [69.5, 65.0], [69.6, 65.0], [69.7, 65.0], [69.8, 65.0], [69.9, 65.0], [70.0, 65.0], [70.1, 65.0], [70.2, 66.0], [70.3, 66.0], [70.4, 66.0], [70.5, 66.0], [70.6, 66.0], [70.7, 66.0], [70.8, 66.0], [70.9, 66.0], [71.0, 66.0], [71.1, 66.0], [71.2, 66.0], [71.3, 66.0], [71.4, 66.0], [71.5, 66.0], [71.6, 66.0], [71.7, 66.0], [71.8, 66.0], [71.9, 66.0], [72.0, 66.0], [72.1, 66.0], [72.2, 66.0], [72.3, 66.0], [72.4, 66.0], [72.5, 66.0], [72.6, 66.0], [72.7, 67.0], [72.8, 67.0], [72.9, 67.0], [73.0, 67.0], [73.1, 67.0], [73.2, 67.0], [73.3, 67.0], [73.4, 67.0], [73.5, 67.0], [73.6, 67.0], [73.7, 67.0], [73.8, 67.0], [73.9, 67.0], [74.0, 67.0], [74.1, 67.0], [74.2, 67.0], [74.3, 68.0], [74.4, 68.0], [74.5, 68.0], [74.6, 68.0], [74.7, 68.0], [74.8, 68.0], [74.9, 68.0], [75.0, 68.0], [75.1, 68.0], [75.2, 68.0], [75.3, 68.0], [75.4, 68.0], [75.5, 68.0], [75.6, 68.0], [75.7, 68.0], [75.8, 68.0], [75.9, 68.0], [76.0, 68.0], [76.1, 68.0], [76.2, 68.0], [76.3, 69.0], [76.4, 69.0], [76.5, 69.0], [76.6, 69.0], [76.7, 69.0], [76.8, 69.0], [76.9, 69.0], [77.0, 69.0], [77.1, 69.0], [77.2, 69.0], [77.3, 69.0], [77.4, 69.0], [77.5, 69.0], [77.6, 69.0], [77.7, 69.0], [77.8, 69.0], [77.9, 69.0], [78.0, 69.0], [78.1, 69.0], [78.2, 69.0], [78.3, 70.0], [78.4, 70.0], [78.5, 70.0], [78.6, 70.0], [78.7, 70.0], [78.8, 70.0], [78.9, 70.0], [79.0, 70.0], [79.1, 70.0], [79.2, 70.0], [79.3, 70.0], [79.4, 70.0], [79.5, 70.0], [79.6, 70.0], [79.7, 70.0], [79.8, 70.0], [79.9, 71.0], [80.0, 71.0], [80.1, 71.0], [80.2, 71.0], [80.3, 71.0], [80.4, 71.0], [80.5, 71.0], [80.6, 71.0], [80.7, 71.0], [80.8, 71.0], [80.9, 71.0], [81.0, 71.0], [81.1, 71.0], [81.2, 71.0], [81.3, 71.0], [81.4, 71.0], [81.5, 71.0], [81.6, 71.0], [81.7, 72.0], [81.8, 72.0], [81.9, 72.0], [82.0, 72.0], [82.1, 72.0], [82.2, 72.0], [82.3, 72.0], [82.4, 72.0], [82.5, 72.0], [82.6, 72.0], [82.7, 72.0], [82.8, 72.0], [82.9, 73.0], [83.0, 73.0], [83.1, 73.0], [83.2, 73.0], [83.3, 73.0], [83.4, 73.0], [83.5, 73.0], [83.6, 73.0], [83.7, 73.0], [83.8, 73.0], [83.9, 73.0], [84.0, 73.0], [84.1, 73.0], [84.2, 73.0], [84.3, 73.0], [84.4, 73.0], [84.5, 73.0], [84.6, 74.0], [84.7, 74.0], [84.8, 74.0], [84.9, 74.0], [85.0, 74.0], [85.1, 74.0], [85.2, 74.0], [85.3, 74.0], [85.4, 74.0], [85.5, 75.0], [85.6, 75.0], [85.7, 75.0], [85.8, 75.0], [85.9, 75.0], [86.0, 75.0], [86.1, 75.0], [86.2, 75.0], [86.3, 75.0], [86.4, 75.0], [86.5, 75.0], [86.6, 75.0], [86.7, 76.0], [86.8, 76.0], [86.9, 76.0], [87.0, 76.0], [87.1, 76.0], [87.2, 76.0], [87.3, 76.0], [87.4, 76.0], [87.5, 76.0], [87.6, 76.0], [87.7, 76.0], [87.8, 76.0], [87.9, 77.0], [88.0, 77.0], [88.1, 77.0], [88.2, 77.0], [88.3, 77.0], [88.4, 77.0], [88.5, 77.0], [88.6, 77.0], [88.7, 77.0], [88.8, 77.0], [88.9, 77.0], [89.0, 77.0], [89.1, 77.0], [89.2, 78.0], [89.3, 78.0], [89.4, 78.0], [89.5, 78.0], [89.6, 78.0], [89.7, 79.0], [89.8, 79.0], [89.9, 79.0], [90.0, 79.0], [90.1, 79.0], [90.2, 79.0], [90.3, 79.0], [90.4, 79.0], [90.5, 79.0], [90.6, 79.0], [90.7, 80.0], [90.8, 80.0], [90.9, 80.0], [91.0, 80.0], [91.1, 80.0], [91.2, 80.0], [91.3, 80.0], [91.4, 81.0], [91.5, 81.0], [91.6, 81.0], [91.7, 81.0], [91.8, 81.0], [91.9, 81.0], [92.0, 81.0], [92.1, 81.0], [92.2, 82.0], [92.3, 82.0], [92.4, 82.0], [92.5, 82.0], [92.6, 82.0], [92.7, 82.0], [92.8, 83.0], [92.9, 83.0], [93.0, 84.0], [93.1, 84.0], [93.2, 84.0], [93.3, 84.0], [93.4, 85.0], [93.5, 85.0], [93.6, 85.0], [93.7, 86.0], [93.8, 86.0], [93.9, 88.0], [94.0, 88.0], [94.1, 88.0], [94.2, 89.0], [94.3, 89.0], [94.4, 90.0], [94.5, 90.0], [94.6, 91.0], [94.7, 91.0], [94.8, 91.0], [94.9, 91.0], [95.0, 91.0], [95.1, 91.0], [95.2, 92.0], [95.3, 92.0], [95.4, 92.0], [95.5, 92.0], [95.6, 92.0], [95.7, 92.0], [95.8, 92.0], [95.9, 93.0], [96.0, 93.0], [96.1, 93.0], [96.2, 93.0], [96.3, 93.0], [96.4, 94.0], [96.5, 94.0], [96.6, 94.0], [96.7, 94.0], [96.8, 94.0], [96.9, 94.0], [97.0, 94.0], [97.1, 94.0], [97.2, 94.0], [97.3, 94.0], [97.4, 95.0], [97.5, 95.0], [97.6, 95.0], [97.7, 95.0], [97.8, 95.0], [97.9, 96.0], [98.0, 96.0], [98.1, 96.0], [98.2, 96.0], [98.3, 96.0], [98.4, 97.0], [98.5, 97.0], [98.6, 97.0], [98.7, 97.0], [98.8, 99.0], [98.9, 99.0], [99.0, 99.0], [99.1, 100.0], [99.2, 100.0], [99.3, 100.0], [99.4, 100.0], [99.5, 100.0], [99.6, 101.0], [99.7, 103.0], [99.8, 105.0], [99.9, 123.0]], "isOverall": false, "label": "Test Page", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 990.0, "series": [{"data": [[600.0, 15.0], [700.0, 4.0], [800.0, 9.0], [900.0, 23.0], [1000.0, 99.0], [1100.0, 31.0], [1200.0, 9.0], [1300.0, 12.0], [1400.0, 18.0], [1500.0, 39.0], [1600.0, 30.0], [1700.0, 38.0], [1800.0, 36.0], [1900.0, 52.0], [2000.0, 30.0], [2100.0, 23.0], [2200.0, 28.0], [2300.0, 28.0], [2400.0, 6.0], [2500.0, 1.0], [2600.0, 40.0], [2700.0, 18.0], [2800.0, 22.0], [2900.0, 14.0], [3000.0, 12.0], [3100.0, 11.0], [3200.0, 4.0], [3300.0, 5.0], [3400.0, 57.0], [3500.0, 2.0], [3600.0, 10.0], [3700.0, 1.0], [3800.0, 2.0], [3900.0, 2.0], [4200.0, 7.0], [4300.0, 4.0], [4100.0, 3.0], [4500.0, 8.0], [4400.0, 8.0], [4600.0, 17.0], [4700.0, 14.0], [4800.0, 11.0], [5000.0, 25.0], [4900.0, 16.0], [5100.0, 46.0], [5200.0, 20.0], [5300.0, 1.0], [5600.0, 14.0], [5500.0, 9.0], [5400.0, 1.0], [5700.0, 8.0], [5800.0, 5.0], [5900.0, 1.0], [6900.0, 2.0], [7000.0, 24.0], [7400.0, 1.0], [7600.0, 2.0], [7700.0, 3.0], [8100.0, 3.0], [300.0, 2.0], [400.0, 1.0], [500.0, 13.0]], "isOverall": false, "label": "Home", "isController": false}, {"data": [[0.0, 990.0], [100.0, 10.0]], "isOverall": false, "label": "Test Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 8100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 234.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1003.0, "series": [{"data": [[0.0, 1003.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 234.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 763.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 595.5790000000003, "minX": 1.60876146E12, "maxY": 595.5790000000003, "series": [{"data": [[1.60876146E12, 595.5790000000003]], "isOverall": false, "label": "Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60876146E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 41.0, "minX": 1.0, "maxY": 8147.333333333333, "series": [{"data": [[28.0, 8147.333333333333], [35.0, 7178.34375], [123.0, 5730.0], [144.0, 5683.0], [157.0, 5652.0], [173.0, 5642.0], [171.0, 5830.5], [183.0, 5579.0], [188.0, 5564.5], [184.0, 5753.0], [212.0, 5910.0], [211.0, 5644.0], [231.0, 5614.0], [226.0, 5843.0], [238.0, 5574.0], [236.0, 5581.5], [234.0, 5591.0], [233.0, 5598.0], [247.0, 5096.909090909091], [246.0, 5777.5], [245.0, 5064.875], [244.0, 5581.875], [255.0, 4774.0], [254.0, 5174.090909090909], [253.0, 5113.476190476189], [252.0, 4964.666666666667], [250.0, 4999.0], [266.0, 4981.5], [257.0, 4781.0], [286.0, 5100.0], [287.0, 4602.5], [284.0, 5118.5], [274.0, 5090.777777777777], [283.0, 4807.5], [282.0, 5122.0], [279.0, 4975.833333333334], [278.0, 4833.277777777777], [277.0, 4769.5], [276.0, 5113.0], [301.0, 4210.0], [299.0, 4601.0], [297.0, 4994.5], [296.0, 4624.333333333334], [295.0, 5054.0], [293.0, 5048.8], [291.0, 4771.0], [318.0, 4463.866666666667], [311.0, 4194.0], [331.0, 4560.0], [322.0, 4260.0], [339.0, 4588.0], [365.0, 4209.0], [362.0, 4546.0], [361.0, 4573.666666666667], [405.0, 3954.0], [430.0, 3984.0], [427.0, 3427.0], [426.0, 3406.0], [424.0, 3425.5], [423.0, 3406.5], [421.0, 3431.0], [419.0, 3424.0], [416.0, 3422.3333333333335], [439.0, 3604.0], [455.0, 3523.0], [473.0, 3617.0], [472.0, 3677.0], [471.0, 3688.0], [468.0, 3798.3333333333335], [491.0, 3459.285714285714], [488.0, 3495.333333333333], [487.0, 3464.0], [484.0, 3421.0], [483.0, 3700.0], [482.0, 3429.0], [481.0, 3433.75], [511.0, 3231.2], [510.0, 3360.5], [504.0, 3088.0], [503.0, 3080.3333333333335], [502.0, 3271.153846153846], [528.0, 2954.0], [533.0, 2710.0], [532.0, 2832.0], [529.0, 3400.0], [526.0, 2836.5], [514.0, 2788.0], [512.0, 3481.0], [525.0, 2903.5], [521.0, 2917.0], [520.0, 2983.0], [519.0, 2864.0], [518.0, 2815.0], [575.0, 2819.0], [570.0, 2811.0], [569.0, 3251.0], [565.0, 2861.5], [557.0, 2762.5], [555.0, 2899.0], [553.0, 2898.0], [551.0, 2899.0], [601.0, 2891.0], [599.0, 2891.0], [593.0, 2911.0], [590.0, 2750.0], [588.0, 2754.6666666666665], [577.0, 2797.0], [576.0, 2844.0], [629.0, 2711.0], [624.0, 2769.6], [616.0, 2746.0], [613.0, 2877.5], [670.0, 2672.0], [665.0, 2354.0], [664.0, 2497.5], [659.0, 2619.0], [658.0, 2356.0], [657.0, 2615.0], [655.0, 2682.0], [653.0, 2375.0], [697.0, 3083.0], [702.0, 2582.3333333333335], [696.0, 3082.0], [676.0, 2923.5], [675.0, 3214.0], [673.0, 2630.6666666666665], [690.0, 3103.0], [689.0, 2412.0], [688.0, 2969.0], [687.0, 3019.0], [686.0, 2937.6666666666665], [685.0, 2915.2], [684.0, 2899.0], [710.0, 2235.0], [732.0, 2438.5], [726.0, 2444.75], [724.0, 2366.6666666666665], [716.0, 2243.0], [713.0, 2687.0], [712.0, 2236.0], [707.0, 2249.0], [706.0, 2247.0], [756.0, 2470.25], [764.0, 2697.0], [753.0, 2483.0], [763.0, 2700.5], [762.0, 2704.5], [741.0, 2649.0], [739.0, 2712.0], [750.0, 2557.6666666666665], [748.0, 2633.0], [746.0, 2809.0], [745.0, 2695.5], [759.0, 2505.3333333333335], [758.0, 2653.0], [757.0, 2645.0], [755.0, 2274.0], [754.0, 2405.3333333333335], [798.0, 1989.0], [786.0, 2159.0], [780.0, 2357.0], [779.0, 2072.0], [778.0, 2673.0], [776.0, 2684.0], [773.0, 2094.0], [826.0, 1906.0], [822.0, 2377.0], [820.0, 2380.5], [819.0, 2252.5], [812.0, 2432.0], [809.0, 2215.0], [802.0, 1954.0], [800.0, 2090.5], [846.0, 1911.0], [841.0, 2299.0], [840.0, 1973.0], [837.0, 2155.0], [893.0, 1876.25], [895.0, 1979.75], [881.0, 2181.0], [880.0, 1980.6666666666665], [883.0, 1918.2857142857144], [882.0, 1860.5], [892.0, 2007.2], [891.0, 2120.0], [889.0, 2180.833333333333], [888.0, 1669.0], [876.0, 1981.6666666666665], [867.0, 2076.0], [866.0, 1817.0], [875.0, 1758.0], [873.0, 2022.6666666666667], [887.0, 1543.0], [886.0, 2006.5], [885.0, 1941.3333333333333], [884.0, 1727.0], [901.0, 1550.0], [925.0, 1971.6666666666667], [926.0, 1797.5], [924.0, 1769.8], [900.0, 1689.0], [899.0, 1602.0], [898.0, 2315.0], [897.0, 2082.5], [896.0, 2330.0], [919.0, 1958.0], [912.0, 1585.0], [909.0, 1592.0], [907.0, 2018.2], [906.0, 1971.0], [905.0, 1953.0], [948.0, 1574.0], [956.0, 1492.5], [952.0, 2017.5], [935.0, 1543.5], [934.0, 1921.0], [933.0, 1942.0], [930.0, 1947.0], [929.0, 1945.0], [928.0, 1771.6666666666667], [951.0, 1630.5], [950.0, 1889.0], [949.0, 1839.0], [946.0, 1570.6], [945.0, 1707.8333333333335], [943.0, 1616.0], [942.0, 1909.0], [941.0, 1619.0], [940.0, 1736.0], [939.0, 1846.0], [938.0, 1350.0], [984.0, 1933.3333333333333], [988.0, 1806.0], [991.0, 1258.533333333333], [976.0, 2021.2], [980.0, 1757.5172413793105], [979.0, 1997.0], [990.0, 1353.2727272727273], [989.0, 1472.9000000000003], [987.0, 1952.0], [986.0, 1931.5], [985.0, 1952.5], [974.0, 1966.0], [961.0, 1484.5], [963.0, 1670.0], [962.0, 1510.0], [965.0, 1783.6], [964.0, 1838.0], [967.0, 1432.0], [966.0, 1628.5], [972.0, 1868.0], [971.0, 1740.0], [968.0, 1750.0], [983.0, 1895.6000000000001], [982.0, 1956.75], [1000.0, 992.2054054054051], [999.0, 1028.0], [997.0, 985.0], [995.0, 1469.3333333333333], [994.0, 1330.1666666666665], [993.0, 1157.0], [992.0, 1324.25]], "isOverall": false, "label": "Home", "isController": false}, {"data": [[690.4860000000002, 2818.395999999999]], "isOverall": false, "label": "Home-Aggregated", "isController": false}, {"data": [[2.0, 47.0], [3.0, 53.0], [4.0, 50.0], [5.0, 49.0], [6.0, 47.0], [8.0, 48.0], [9.0, 55.0], [10.0, 51.0], [11.0, 50.0], [12.0, 49.0], [13.0, 47.0], [14.0, 54.0], [15.0, 54.0], [17.0, 53.0], [19.0, 52.0], [20.0, 52.0], [22.0, 51.5], [24.0, 51.0], [26.0, 49.0], [27.0, 47.0], [28.0, 43.0], [29.0, 45.0], [30.0, 46.0], [31.0, 44.0], [33.0, 47.0], [32.0, 43.0], [35.0, 48.0], [34.0, 49.0], [37.0, 48.0], [36.0, 50.0], [39.0, 45.0], [38.0, 50.0], [40.0, 44.0], [42.0, 46.0], [45.0, 45.0], [44.0, 47.0], [47.0, 48.0], [46.0, 48.0], [49.0, 50.0], [48.0, 45.0], [51.0, 46.0], [50.0, 47.0], [53.0, 47.0], [52.0, 48.0], [55.0, 54.5], [56.0, 52.0], [59.0, 99.0], [58.0, 50.0], [61.0, 54.0], [60.0, 49.0], [63.0, 44.0], [62.0, 45.0], [67.0, 48.0], [65.0, 52.0], [64.0, 43.0], [71.0, 49.0], [69.0, 50.0], [68.0, 49.0], [75.0, 48.0], [74.0, 49.0], [73.0, 46.0], [72.0, 49.0], [79.0, 49.0], [77.0, 45.0], [76.0, 47.0], [83.0, 47.0], [82.0, 46.0], [81.0, 71.0], [80.0, 49.0], [87.0, 49.0], [86.0, 43.0], [85.0, 44.0], [84.0, 46.0], [91.0, 48.0], [90.0, 48.0], [89.0, 47.0], [88.0, 48.0], [95.0, 49.0], [94.0, 46.0], [93.0, 47.0], [99.0, 46.0], [98.0, 47.0], [97.0, 45.0], [96.0, 49.0], [103.0, 48.0], [102.0, 44.0], [101.0, 44.0], [100.0, 44.0], [106.0, 46.0], [105.0, 46.0], [104.0, 46.0], [110.0, 46.0], [109.0, 49.0], [115.0, 47.0], [114.0, 49.0], [113.0, 55.0], [112.0, 45.5], [119.0, 46.0], [118.0, 46.0], [117.0, 47.0], [123.0, 79.0], [122.0, 44.0], [121.0, 42.0], [120.0, 45.0], [126.0, 50.0], [125.0, 54.0], [124.0, 45.0], [133.0, 48.0], [132.0, 48.0], [131.0, 48.0], [130.0, 49.0], [128.0, 50.0], [143.0, 48.0], [141.0, 49.0], [139.0, 75.0], [138.0, 62.0], [136.0, 57.0], [151.0, 43.0], [150.0, 75.0], [149.0, 44.0], [148.0, 46.0], [146.0, 46.0], [145.0, 47.5], [159.0, 62.0], [157.0, 73.0], [156.0, 44.0], [155.0, 46.0], [154.0, 47.0], [153.0, 48.0], [167.0, 44.0], [166.0, 76.0], [165.0, 77.0], [163.0, 82.0], [162.0, 42.0], [161.0, 43.0], [160.0, 44.0], [175.0, 75.0], [174.0, 73.0], [173.0, 71.0], [172.0, 75.0], [171.0, 74.0], [170.0, 45.0], [169.0, 100.0], [168.0, 41.0], [183.0, 53.0], [182.0, 54.0], [181.0, 43.0], [180.0, 44.0], [179.0, 46.0], [178.0, 71.0], [177.0, 78.0], [176.0, 80.0], [191.0, 57.0], [190.0, 42.0], [189.0, 44.0], [188.0, 44.0], [186.0, 45.0], [185.0, 46.0], [184.0, 51.0], [199.0, 48.0], [196.0, 49.0], [194.0, 49.0], [193.0, 55.0], [192.0, 55.0], [206.0, 60.0], [205.0, 48.0], [203.0, 51.0], [202.0, 46.0], [200.0, 47.0], [215.0, 52.0], [214.0, 69.0], [213.0, 69.0], [212.0, 72.0], [211.0, 69.0], [210.0, 44.0], [209.0, 69.0], [208.0, 44.0], [223.0, 50.0], [220.0, 73.0], [219.0, 47.0], [218.0, 49.0], [217.0, 49.0], [231.0, 45.0], [230.0, 48.0], [229.0, 51.0], [228.0, 45.0], [227.0, 46.0], [226.0, 73.0], [225.0, 75.0], [224.0, 45.0], [239.0, 49.0], [238.0, 71.0], [237.0, 72.0], [236.0, 68.0], [235.0, 69.0], [234.0, 71.0], [233.0, 72.0], [232.0, 76.0], [247.0, 46.0], [246.0, 48.0], [245.0, 79.0], [244.0, 70.0], [242.0, 70.0], [241.0, 73.0], [240.0, 79.0], [255.0, 65.0], [254.0, 58.0], [253.0, 58.0], [252.0, 47.0], [251.0, 48.0], [250.0, 50.0], [249.0, 47.0], [248.0, 48.0], [270.0, 62.0], [271.0, 62.0], [269.0, 63.0], [268.0, 65.0], [267.0, 64.0], [266.0, 67.5], [264.0, 67.0], [263.0, 68.0], [256.0, 62.0], [258.0, 60.0], [257.0, 61.0], [262.0, 69.0], [261.0, 55.0], [260.0, 56.0], [286.0, 54.0], [287.0, 49.0], [285.0, 56.0], [284.0, 50.0], [283.0, 52.0], [282.0, 54.0], [281.0, 55.0], [280.0, 71.0], [279.0, 49.0], [273.0, 60.5], [275.0, 61.0], [274.0, 58.0], [278.0, 62.0], [277.0, 67.0], [276.0, 61.0], [302.0, 59.0], [303.0, 55.0], [301.0, 66.0], [300.0, 53.0], [299.0, 49.0], [298.0, 50.0], [297.0, 46.0], [296.0, 52.0], [295.0, 55.0], [288.0, 60.0], [291.0, 56.0], [290.0, 58.0], [294.0, 56.0], [293.0, 53.0], [292.0, 54.0], [318.0, 67.0], [319.0, 52.0], [317.0, 68.0], [316.0, 70.0], [315.0, 71.0], [314.0, 62.0], [313.0, 63.0], [312.0, 64.0], [311.0, 58.0], [306.0, 62.0], [305.0, 64.0], [310.0, 61.0], [309.0, 62.666666666666664], [334.0, 95.0], [335.0, 56.0], [333.0, 51.0], [332.0, 74.5], [330.0, 56.0], [329.0, 56.0], [328.0, 58.0], [327.0, 58.0], [321.0, 51.0], [323.0, 49.0], [322.0, 46.0], [326.0, 80.0], [324.0, 47.0], [350.0, 91.0], [351.0, 59.0], [349.0, 50.0], [348.0, 57.0], [347.0, 58.0], [346.0, 49.0], [344.0, 62.0], [343.0, 57.0], [337.0, 53.0], [336.0, 54.0], [339.0, 53.0], [338.0, 93.0], [342.0, 59.0], [341.0, 60.0], [340.0, 60.0], [366.0, 54.0], [367.0, 57.0], [365.0, 54.0], [364.0, 56.0], [363.0, 95.0], [362.0, 64.0], [361.0, 56.0], [360.0, 56.0], [359.0, 57.0], [353.0, 55.0], [352.0, 58.0], [358.0, 58.0], [356.0, 63.0], [382.0, 48.0], [383.0, 47.0], [381.0, 48.0], [380.0, 81.0], [379.0, 66.5], [377.0, 86.0], [376.0, 78.0], [375.0, 82.0], [368.0, 56.0], [371.0, 54.0], [369.0, 53.0], [374.0, 45.0], [373.0, 48.0], [372.0, 50.0], [398.0, 47.0], [399.0, 55.0], [397.0, 80.0], [396.0, 70.0], [395.0, 71.0], [394.0, 77.0], [393.0, 78.0], [392.0, 79.0], [391.0, 66.0], [385.0, 57.0], [384.0, 50.0], [387.0, 51.0], [386.0, 53.0], [390.0, 47.0], [389.0, 46.0], [388.0, 49.0], [413.0, 47.0], [415.0, 54.0], [412.0, 55.0], [408.0, 63.5], [406.0, 57.0], [405.0, 75.0], [404.0, 65.0], [403.0, 63.5], [401.0, 69.0], [430.0, 72.0], [431.0, 52.0], [429.0, 51.0], [428.0, 53.0], [427.0, 78.0], [426.0, 53.0], [425.0, 54.0], [424.0, 47.0], [423.0, 54.0], [416.0, 52.0], [419.0, 66.5], [417.0, 48.0], [421.0, 56.0], [420.0, 57.0], [446.0, 50.0], [447.0, 50.0], [444.0, 51.0], [435.0, 73.0], [434.0, 76.0], [433.0, 50.0], [432.0, 67.0], [443.0, 63.0], [442.0, 66.0], [441.0, 52.0], [440.0, 68.0], [439.0, 69.0], [438.0, 55.0], [437.0, 66.0], [436.0, 68.0], [451.0, 49.0], [463.0, 67.0], [461.0, 60.5], [450.0, 49.0], [449.0, 65.0], [448.0, 49.0], [459.0, 69.0], [458.0, 48.0], [457.0, 51.0], [455.0, 68.0], [454.0, 70.0], [453.0, 48.0], [452.0, 48.0], [478.0, 64.0], [479.0, 59.0], [477.0, 51.0], [467.0, 52.0], [466.0, 53.0], [465.0, 65.0], [464.0, 51.0], [475.0, 52.0], [474.0, 68.0], [473.0, 62.0], [472.0, 50.0], [471.0, 51.0], [469.0, 54.0], [468.0, 49.0], [494.0, 70.0], [495.0, 64.0], [493.0, 58.0], [492.0, 48.0], [491.0, 60.0], [490.0, 48.0], [489.0, 64.0], [488.0, 62.0], [487.0, 76.0], [481.0, 54.0], [480.0, 56.0], [483.0, 51.0], [482.0, 54.0], [486.0, 60.0], [485.0, 62.0], [484.0, 64.0], [510.0, 45.0], [511.0, 68.0], [509.0, 48.0], [508.0, 49.0], [507.0, 52.0], [506.0, 61.0], [504.0, 64.0], [503.0, 56.0], [497.0, 72.0], [499.0, 69.0], [498.0, 70.0], [502.0, 83.0], [501.0, 50.0], [500.0, 69.0], [536.0, 64.0], [542.0, 94.0], [543.0, 94.0], [529.0, 66.0], [528.0, 66.0], [531.0, 93.0], [530.0, 63.0], [541.0, 99.0], [540.0, 82.5], [538.0, 54.0], [526.0, 99.0], [514.0, 51.0], [512.0, 51.0], [516.0, 57.0], [515.0, 47.0], [519.0, 94.0], [518.0, 66.0], [525.0, 62.0], [523.0, 92.0], [522.0, 49.0], [521.0, 45.0], [520.0, 91.0], [535.0, 50.0], [534.0, 96.0], [533.0, 73.0], [532.0, 61.0], [569.0, 68.0], [573.0, 67.0], [575.0, 66.0], [563.0, 78.75], [565.0, 91.0], [564.0, 92.0], [572.0, 97.0], [571.0, 82.0], [570.0, 69.0], [568.0, 71.0], [551.0, 66.0], [550.0, 96.0], [549.0, 70.0], [548.0, 56.0], [547.0, 73.0], [546.0, 61.5], [544.0, 63.0], [559.0, 65.0], [558.0, 68.0], [557.0, 74.0], [556.0, 60.0], [555.0, 84.5], [553.0, 94.0], [552.0, 93.0], [567.0, 71.0], [566.0, 89.0], [600.0, 75.0], [606.0, 67.0], [607.0, 66.0], [593.0, 60.0], [595.0, 55.0], [594.0, 91.0], [605.0, 68.0], [603.0, 53.5], [601.0, 70.0], [590.0, 66.0], [577.0, 63.0], [576.0, 62.0], [579.0, 89.0], [578.0, 62.0], [581.0, 76.0], [580.0, 84.0], [583.0, 51.0], [582.0, 54.0], [588.0, 52.0], [587.0, 84.0], [586.0, 70.0], [585.0, 57.0], [584.0, 60.0], [599.0, 48.0], [598.0, 49.0], [597.0, 66.0], [596.0, 53.0], [633.0, 103.0], [638.0, 53.0], [639.0, 96.0], [625.0, 58.0], [624.0, 57.0], [627.0, 55.0], [626.0, 56.0], [629.0, 52.0], [628.0, 55.0], [637.0, 62.5], [635.0, 56.0], [634.0, 57.0], [632.0, 59.0], [615.0, 58.5], [614.0, 61.0], [613.0, 48.333333333333336], [612.0, 49.0], [609.0, 64.0], [623.0, 61.0], [622.0, 68.0], [619.0, 78.0], [618.0, 64.0], [617.0, 64.0], [616.0, 57.0], [631.0, 60.0], [630.0, 62.0], [665.0, 62.0], [670.0, 67.0], [671.0, 81.0], [657.0, 87.0], [656.0, 61.0], [659.0, 53.0], [658.0, 68.0], [669.0, 76.0], [667.0, 100.0], [666.0, 88.0], [664.0, 55.666666666666664], [647.0, 57.0], [646.0, 75.0], [645.0, 60.5], [643.0, 63.0], [641.0, 92.5], [655.0, 82.0], [654.0, 53.0], [653.0, 56.0], [652.0, 55.0], [651.0, 64.0], [649.0, 73.0], [662.0, 81.0], [660.0, 68.0], [697.0, 52.0], [702.0, 97.0], [703.0, 55.0], [688.0, 74.0], [690.0, 96.0], [689.0, 71.0], [693.0, 55.5], [691.0, 95.0], [701.0, 100.0], [700.0, 71.0], [698.0, 58.0], [696.0, 54.0], [678.0, 65.0], [677.0, 81.0], [676.0, 54.0], [675.0, 55.0], [674.0, 72.0], [673.0, 62.0], [672.0, 80.0], [687.0, 93.0], [686.0, 102.0], [685.0, 55.0], [684.0, 75.0], [682.0, 70.0], [680.0, 57.0], [695.0, 100.0], [694.0, 61.0], [730.0, 63.0], [724.0, 92.0], [733.0, 76.0], [735.0, 58.0], [723.0, 68.5], [721.0, 70.75], [732.0, 71.0], [729.0, 71.0], [711.0, 53.0], [710.0, 100.0], [709.0, 85.0], [708.0, 56.0], [707.0, 90.0], [706.0, 93.0], [705.0, 49.0], [704.0, 65.0], [717.0, 63.0], [716.0, 64.0], [715.0, 79.0], [713.0, 66.0], [712.0, 82.0], [727.0, 95.0], [726.0, 67.0], [725.0, 70.0], [760.0, 64.0], [764.0, 79.0], [767.0, 76.0], [753.0, 81.0], [752.0, 82.0], [755.0, 52.0], [754.0, 92.0], [763.0, 51.0], [762.0, 60.0], [761.0, 62.0], [750.0, 51.0], [737.0, 84.0], [736.0, 101.0], [739.0, 80.0], [738.0, 52.0], [741.0, 93.0], [740.0, 79.0], [743.0, 71.0], [742.0, 92.0], [749.0, 67.0], [748.0, 52.0], [747.0, 69.0], [746.0, 77.0], [745.0, 52.0], [744.0, 71.0], [759.0, 73.0], [758.0, 83.0], [757.0, 85.0], [756.0, 49.0], [796.0, 74.0], [799.0, 77.0], [784.0, 53.0], [786.0, 80.0], [785.0, 81.0], [789.0, 59.0], [787.0, 55.0], [798.0, 73.0], [797.0, 59.0], [795.0, 77.0], [794.0, 74.0], [793.0, 79.0], [792.0, 75.0], [783.0, 69.0], [768.0, 76.0], [770.0, 73.0], [769.0, 74.0], [773.0, 78.5], [771.0, 73.0], [775.0, 91.0], [774.0, 64.0], [782.0, 55.0], [780.0, 61.0], [779.0, 72.0], [778.0, 73.0], [777.0, 59.0], [776.0, 61.0], [791.0, 76.0], [790.0, 80.0], [828.0, 66.0], [831.0, 62.0], [816.0, 68.0], [819.0, 66.0], [817.0, 67.0], [821.0, 64.0], [820.0, 56.0], [830.0, 62.0], [829.0, 66.0], [827.0, 52.0], [826.0, 58.0], [825.0, 60.0], [824.0, 66.0], [815.0, 66.0], [800.0, 72.0], [802.0, 63.0], [801.0, 55.0], [804.0, 73.0], [803.0, 53.0], [806.0, 73.0], [805.0, 77.0], [814.0, 69.0], [813.0, 71.0], [812.0, 69.0], [811.0, 63.0], [810.0, 59.0], [809.0, 64.0], [808.0, 69.5], [823.0, 57.0], [822.0, 62.0], [856.0, 51.0], [861.0, 60.0], [863.0, 60.0], [848.0, 61.0], [850.0, 59.0], [849.0, 59.0], [859.0, 46.0], [858.0, 48.0], [857.0, 50.0], [847.0, 65.0], [832.0, 62.0], [835.0, 50.0], [834.0, 59.5], [837.0, 76.0], [836.0, 63.0], [839.0, 57.0], [838.0, 58.0], [846.0, 52.0], [845.0, 56.0], [844.0, 58.0], [843.0, 61.0], [842.0, 55.0], [841.0, 60.0], [840.0, 68.0], [855.0, 53.0], [853.0, 54.0], [852.0, 56.0], [851.0, 56.0], [889.0, 56.0], [894.0, 47.0], [895.0, 61.0], [881.0, 63.0], [880.0, 56.0], [883.0, 59.0], [882.0, 62.0], [885.0, 53.0], [884.0, 54.0], [893.0, 52.0], [892.0, 57.0], [891.0, 65.5], [888.0, 60.0], [871.0, 56.0], [870.0, 57.0], [869.0, 59.0], [868.0, 46.0], [867.0, 59.0], [866.0, 55.0], [865.0, 57.0], [864.0, 58.0], [879.0, 57.0], [878.0, 58.0], [877.0, 58.0], [876.0, 59.0], [875.0, 60.0], [874.0, 61.0], [873.0, 57.0], [872.0, 55.0], [887.0, 62.0], [886.0, 50.0], [921.0, 55.0], [925.0, 51.0], [926.0, 44.0], [913.0, 57.0], [912.0, 58.0], [924.0, 54.0], [923.0, 54.0], [922.0, 55.0], [911.0, 59.0], [896.0, 55.0], [898.0, 49.0], [897.0, 50.0], [900.0, 51.0], [899.0, 57.0], [902.0, 60.0], [901.0, 46.0], [909.0, 61.0], [908.0, 49.0], [907.0, 51.0], [906.0, 53.0], [905.0, 57.0], [904.0, 58.0], [919.0, 52.0], [918.0, 53.0], [916.0, 54.0], [915.0, 56.0], [953.0, 62.0], [958.0, 58.0], [959.0, 73.0], [944.0, 53.0], [946.0, 55.0], [945.0, 52.0], [949.0, 54.0], [948.0, 64.0], [957.0, 74.0], [956.0, 60.0], [955.0, 60.0], [952.0, 63.0], [935.0, 57.0], [934.0, 50.0], [933.0, 51.0], [932.0, 53.0], [931.0, 54.0], [930.0, 44.0], [929.0, 61.0], [928.0, 51.0], [943.0, 55.0], [942.0, 56.0], [941.0, 55.0], [940.0, 48.0], [939.0, 50.0], [938.0, 53.0], [937.0, 54.0], [936.0, 55.0], [951.0, 54.0], [950.0, 56.0], [988.0, 66.0], [991.0, 66.0], [977.0, 62.0], [976.0, 58.0], [979.0, 60.0], [978.0, 61.0], [981.0, 81.0], [980.0, 75.0], [990.0, 60.0], [989.0, 64.0], [987.0, 55.0], [986.0, 66.0], [985.0, 62.0], [984.0, 59.0], [975.0, 90.0], [961.0, 56.0], [960.0, 72.0], [963.0, 66.0], [962.0, 69.0], [965.0, 63.0], [964.0, 65.0], [967.0, 64.0], [966.0, 69.0], [974.0, 58.0], [973.0, 92.0], [972.0, 58.0], [971.0, 61.0], [969.0, 61.0], [968.0, 64.0], [983.0, 59.0], [982.0, 66.0], [1000.0, 67.0], [999.0, 70.0], [998.0, 72.0], [997.0, 79.0], [996.0, 79.0], [995.0, 70.0], [994.0, 64.0], [993.0, 74.0], [992.0, 65.0], [1.0, 45.0]], "isOverall": false, "label": "Test Page", "isController": false}, {"data": [[500.67199999999957, 60.75100000000011]], "isOverall": false, "label": "Test Page-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 4066.6666666666665, "minX": 1.60876146E12, "maxY": 378616.6666666667, "series": [{"data": [[1.60876146E12, 378616.6666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60876146E12, 4066.6666666666665]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60876146E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 60.75100000000011, "minX": 1.60876146E12, "maxY": 2818.395999999999, "series": [{"data": [[1.60876146E12, 2818.395999999999]], "isOverall": false, "label": "Home", "isController": false}, {"data": [[1.60876146E12, 60.75100000000011]], "isOverall": false, "label": "Test Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60876146E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 60.71699999999996, "minX": 1.60876146E12, "maxY": 2818.358000000001, "series": [{"data": [[1.60876146E12, 2818.358000000001]], "isOverall": false, "label": "Home", "isController": false}, {"data": [[1.60876146E12, 60.71699999999996]], "isOverall": false, "label": "Test Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60876146E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.60876146E12, "maxY": 1150.146, "series": [{"data": [[1.60876146E12, 1150.146]], "isOverall": false, "label": "Home", "isController": false}, {"data": [[1.60876146E12, 0.0]], "isOverall": false, "label": "Test Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60876146E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 41.0, "minX": 1.60876146E12, "maxY": 8178.0, "series": [{"data": [[1.60876146E12, 8178.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60876146E12, 44.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60876146E12, 44.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60876146E12, 44.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60876146E12, 41.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60876146E12, 221.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60876146E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 47.0, "minX": 3.0, "maxY": 7082.0, "series": [{"data": [[32.0, 7082.0], [11.0, 561.0], [49.0, 49.0], [3.0, 47.0], [206.0, 882.5], [28.0, 51.0], [490.0, 1562.5], [482.0, 81.0], [244.0, 4782.5], [249.0, 63.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 490.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 47.0, "minX": 3.0, "maxY": 7082.0, "series": [{"data": [[32.0, 7082.0], [11.0, 561.0], [49.0, 49.0], [3.0, 47.0], [206.0, 882.0], [28.0, 51.0], [490.0, 1562.5], [482.0, 81.0], [244.0, 4782.5], [249.0, 63.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 490.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 33.333333333333336, "minX": 1.60876146E12, "maxY": 33.333333333333336, "series": [{"data": [[1.60876146E12, 33.333333333333336]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60876146E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 33.333333333333336, "minX": 1.60876146E12, "maxY": 33.333333333333336, "series": [{"data": [[1.60876146E12, 33.333333333333336]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60876146E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.60876146E12, "maxY": 16.666666666666668, "series": [{"data": [[1.60876146E12, 16.666666666666668]], "isOverall": false, "label": "Home-success", "isController": false}, {"data": [[1.60876146E12, 16.666666666666668]], "isOverall": false, "label": "Test Page-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60876146E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 33.333333333333336, "minX": 1.60876146E12, "maxY": 33.333333333333336, "series": [{"data": [[1.60876146E12, 33.333333333333336]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60876146E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

