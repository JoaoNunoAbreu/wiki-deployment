/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 826.0, "minX": 0.0, "maxY": 20655.0, "series": [{"data": [[0.0, 826.0], [0.1, 874.0], [0.2, 949.0], [0.3, 949.0], [0.4, 1006.0], [0.5, 1036.0], [0.6, 1068.0], [0.7, 1118.0], [0.8, 1161.0], [0.9, 1195.0], [1.0, 1218.0], [1.1, 1248.0], [1.2, 1278.0], [1.3, 1313.0], [1.4, 1313.0], [1.5, 1348.0], [1.6, 1381.0], [1.7, 1404.0], [1.8, 1436.0], [1.9, 1487.0], [2.0, 1516.0], [2.1, 1549.0], [2.2, 1577.0], [2.3, 1602.0], [2.4, 1630.0], [2.5, 1653.0], [2.6, 1684.0], [2.7, 1702.0], [2.8, 1729.0], [2.9, 1756.0], [3.0, 1787.0], [3.1, 1806.0], [3.2, 1915.0], [3.3, 1928.0], [3.4, 1955.0], [3.5, 1986.0], [3.6, 2000.0], [3.7, 2032.0], [3.8, 2048.0], [3.9, 2059.0], [4.0, 2091.0], [4.1, 2115.0], [4.2, 2146.0], [4.3, 2173.0], [4.4, 2198.0], [4.5, 2235.0], [4.6, 2258.0], [4.7, 2319.0], [4.8, 2345.0], [4.9, 2349.0], [5.0, 2363.0], [5.1, 2370.0], [5.2, 2392.0], [5.3, 2408.0], [5.4, 2409.0], [5.5, 2445.0], [5.6, 2473.0], [5.7, 2485.0], [5.8, 2497.0], [5.9, 2603.0], [6.0, 2630.0], [6.1, 2644.0], [6.2, 2669.0], [6.3, 2670.0], [6.4, 2710.0], [6.5, 2721.0], [6.6, 2747.0], [6.7, 2766.0], [6.8, 2788.0], [6.9, 2792.0], [7.0, 2808.0], [7.1, 2824.0], [7.2, 2889.0], [7.3, 2912.0], [7.4, 3007.0], [7.5, 3053.0], [7.6, 3062.0], [7.7, 3104.0], [7.8, 3120.0], [7.9, 3125.0], [8.0, 3131.0], [8.1, 3142.0], [8.2, 3144.0], [8.3, 3156.0], [8.4, 3162.0], [8.5, 3179.0], [8.6, 3181.0], [8.7, 3191.0], [8.8, 3198.0], [8.9, 3201.0], [9.0, 3218.0], [9.1, 3237.0], [9.2, 3237.0], [9.3, 3257.0], [9.4, 3270.0], [9.5, 3454.0], [9.6, 3475.0], [9.7, 3497.0], [9.8, 3534.0], [9.9, 3583.0], [10.0, 3660.0], [10.1, 3687.0], [10.2, 3706.0], [10.3, 3721.0], [10.4, 4263.0], [10.5, 4274.0], [10.6, 4303.0], [10.7, 4472.0], [10.8, 4489.0], [10.9, 4510.0], [11.0, 4530.0], [11.1, 4542.0], [11.2, 4562.0], [11.3, 4576.0], [11.4, 4592.0], [11.5, 4596.0], [11.6, 4614.0], [11.7, 4622.0], [11.8, 4629.0], [11.9, 4644.0], [12.0, 4673.0], [12.1, 4691.0], [12.2, 4709.0], [12.3, 4711.0], [12.4, 4715.0], [12.5, 4733.0], [12.6, 4749.0], [12.7, 4763.0], [12.8, 4819.0], [12.9, 4838.0], [13.0, 4862.0], [13.1, 4875.0], [13.2, 4894.0], [13.3, 4925.0], [13.4, 4948.0], [13.5, 4968.0], [13.6, 4985.0], [13.7, 4986.0], [13.8, 5002.0], [13.9, 5008.0], [14.0, 5009.0], [14.1, 5026.0], [14.2, 5027.0], [14.3, 5066.0], [14.4, 5115.0], [14.5, 5125.0], [14.6, 5147.0], [14.7, 5164.0], [14.8, 5344.0], [14.9, 5505.0], [15.0, 5524.0], [15.1, 5540.0], [15.2, 5540.0], [15.3, 5554.0], [15.4, 5561.0], [15.5, 5567.0], [15.6, 5584.0], [15.7, 5584.0], [15.8, 5586.0], [15.9, 5603.0], [16.0, 5625.0], [16.1, 5638.0], [16.2, 5661.0], [16.3, 5683.0], [16.4, 5698.0], [16.5, 5716.0], [16.6, 5739.0], [16.7, 5758.0], [16.8, 5773.0], [16.9, 5787.0], [17.0, 5798.0], [17.1, 5809.0], [17.2, 5815.0], [17.3, 5827.0], [17.4, 5838.0], [17.5, 5847.0], [17.6, 5853.0], [17.7, 5864.0], [17.8, 5881.0], [17.9, 5897.0], [18.0, 5911.0], [18.1, 5916.0], [18.2, 5931.0], [18.3, 5950.0], [18.4, 5966.0], [18.5, 5976.0], [18.6, 5998.0], [18.7, 6021.0], [18.8, 6033.0], [18.9, 6058.0], [19.0, 6079.0], [19.1, 6094.0], [19.2, 6094.0], [19.3, 6109.0], [19.4, 6126.0], [19.5, 6130.0], [19.6, 6143.0], [19.7, 6146.0], [19.8, 6164.0], [19.9, 6167.0], [20.0, 6183.0], [20.1, 6199.0], [20.2, 6217.0], [20.3, 6238.0], [20.4, 6254.0], [20.5, 6261.0], [20.6, 6275.0], [20.7, 6296.0], [20.8, 6340.0], [20.9, 6344.0], [21.0, 6356.0], [21.1, 6363.0], [21.2, 6381.0], [21.3, 6400.0], [21.4, 6412.0], [21.5, 6430.0], [21.6, 6449.0], [21.7, 6484.0], [21.8, 6494.0], [21.9, 6748.0], [22.0, 6751.0], [22.1, 6770.0], [22.2, 6937.0], [22.3, 6953.0], [22.4, 6953.0], [22.5, 6970.0], [22.6, 6973.0], [22.7, 6986.0], [22.8, 6996.0], [22.9, 7004.0], [23.0, 7011.0], [23.1, 7021.0], [23.2, 7024.0], [23.3, 7025.0], [23.4, 7041.0], [23.5, 7056.0], [23.6, 7063.0], [23.7, 7084.0], [23.8, 7087.0], [23.9, 7092.0], [24.0, 7110.0], [24.1, 7116.0], [24.2, 7126.0], [24.3, 7137.0], [24.4, 7144.0], [24.5, 7145.0], [24.6, 7157.0], [24.7, 7177.0], [24.8, 7197.0], [24.9, 7235.0], [25.0, 7247.0], [25.1, 7248.0], [25.2, 7269.0], [25.3, 7285.0], [25.4, 7290.0], [25.5, 7306.0], [25.6, 7325.0], [25.7, 7349.0], [25.8, 7368.0], [25.9, 7388.0], [26.0, 7536.0], [26.1, 7584.0], [26.2, 7603.0], [26.3, 7619.0], [26.4, 7640.0], [26.5, 7640.0], [26.6, 7649.0], [26.7, 7665.0], [26.8, 7668.0], [26.9, 7675.0], [27.0, 7694.0], [27.1, 7695.0], [27.2, 7711.0], [27.3, 7721.0], [27.4, 7727.0], [27.5, 7737.0], [27.6, 7743.0], [27.7, 7749.0], [27.8, 7761.0], [27.9, 7763.0], [28.0, 7788.0], [28.1, 7810.0], [28.2, 7824.0], [28.3, 7855.0], [28.4, 7866.0], [28.5, 7884.0], [28.6, 7901.0], [28.7, 7925.0], [28.8, 7946.0], [28.9, 7952.0], [29.0, 7980.0], [29.1, 8004.0], [29.2, 8013.0], [29.3, 8055.0], [29.4, 8056.0], [29.5, 8072.0], [29.6, 8076.0], [29.7, 8095.0], [29.8, 8096.0], [29.9, 8110.0], [30.0, 8126.0], [30.1, 8150.0], [30.2, 8171.0], [30.3, 8192.0], [30.4, 8209.0], [30.5, 8227.0], [30.6, 8238.0], [30.7, 8268.0], [30.8, 8279.0], [30.9, 8299.0], [31.0, 8325.0], [31.1, 8327.0], [31.2, 8355.0], [31.3, 8398.0], [31.4, 8435.0], [31.5, 8462.0], [31.6, 8466.0], [31.7, 8469.0], [31.8, 8470.0], [31.9, 8478.0], [32.0, 8500.0], [32.1, 8505.0], [32.2, 8518.0], [32.3, 8535.0], [32.4, 8535.0], [32.5, 8541.0], [32.6, 8553.0], [32.7, 8567.0], [32.8, 8569.0], [32.9, 8589.0], [33.0, 8589.0], [33.1, 8593.0], [33.2, 8611.0], [33.3, 8614.0], [33.4, 8629.0], [33.5, 8631.0], [33.6, 8649.0], [33.7, 8652.0], [33.8, 8670.0], [33.9, 8708.0], [34.0, 8748.0], [34.1, 8748.0], [34.2, 8765.0], [34.3, 8766.0], [34.4, 8778.0], [34.5, 8782.0], [34.6, 8787.0], [34.7, 8804.0], [34.8, 8809.0], [34.9, 8819.0], [35.0, 8832.0], [35.1, 8846.0], [35.2, 8861.0], [35.3, 8885.0], [35.4, 8897.0], [35.5, 9008.0], [35.6, 9027.0], [35.7, 9067.0], [35.8, 9120.0], [35.9, 9186.0], [36.0, 9187.0], [36.1, 9199.0], [36.2, 9213.0], [36.3, 9230.0], [36.4, 9232.0], [36.5, 9248.0], [36.6, 9248.0], [36.7, 9261.0], [36.8, 9270.0], [36.9, 9275.0], [37.0, 9292.0], [37.1, 9299.0], [37.2, 9305.0], [37.3, 9310.0], [37.4, 9323.0], [37.5, 9327.0], [37.6, 9340.0], [37.7, 9348.0], [37.8, 9359.0], [37.9, 9359.0], [38.0, 9378.0], [38.1, 9391.0], [38.2, 9401.0], [38.3, 9413.0], [38.4, 9424.0], [38.5, 9443.0], [38.6, 9454.0], [38.7, 9463.0], [38.8, 9478.0], [38.9, 9478.0], [39.0, 9494.0], [39.1, 9496.0], [39.2, 9505.0], [39.3, 9518.0], [39.4, 9526.0], [39.5, 9543.0], [39.6, 9546.0], [39.7, 9563.0], [39.8, 9563.0], [39.9, 9578.0], [40.0, 9581.0], [40.1, 9594.0], [40.2, 9600.0], [40.3, 9613.0], [40.4, 9627.0], [40.5, 9632.0], [40.6, 9653.0], [40.7, 9668.0], [40.8, 9678.0], [40.9, 9688.0], [41.0, 9692.0], [41.1, 9708.0], [41.2, 9732.0], [41.3, 9757.0], [41.4, 9776.0], [41.5, 9803.0], [41.6, 9815.0], [41.7, 9832.0], [41.8, 9851.0], [41.9, 9867.0], [42.0, 9883.0], [42.1, 10006.0], [42.2, 10026.0], [42.3, 10303.0], [42.4, 10320.0], [42.5, 10324.0], [42.6, 10339.0], [42.7, 10351.0], [42.8, 10393.0], [42.9, 10400.0], [43.0, 10424.0], [43.1, 10451.0], [43.2, 10461.0], [43.3, 10474.0], [43.4, 10495.0], [43.5, 10513.0], [43.6, 10582.0], [43.7, 10964.0], [43.8, 10988.0], [43.9, 11007.0], [44.0, 11034.0], [44.1, 11052.0], [44.2, 11081.0], [44.3, 11108.0], [44.4, 11126.0], [44.5, 11161.0], [44.6, 11165.0], [44.7, 11173.0], [44.8, 11193.0], [44.9, 11206.0], [45.0, 11207.0], [45.1, 11229.0], [45.2, 11233.0], [45.3, 11237.0], [45.4, 11257.0], [45.5, 11267.0], [45.6, 11271.0], [45.7, 11276.0], [45.8, 11283.0], [45.9, 11289.0], [46.0, 11301.0], [46.1, 11312.0], [46.2, 11331.0], [46.3, 11389.0], [46.4, 11447.0], [46.5, 11467.0], [46.6, 11490.0], [46.7, 11514.0], [46.8, 11542.0], [46.9, 11561.0], [47.0, 11574.0], [47.1, 11575.0], [47.2, 11593.0], [47.3, 11593.0], [47.4, 11609.0], [47.5, 11635.0], [47.6, 11646.0], [47.7, 11654.0], [47.8, 11661.0], [47.9, 11683.0], [48.0, 11698.0], [48.1, 11701.0], [48.2, 11723.0], [48.3, 11725.0], [48.4, 11731.0], [48.5, 11738.0], [48.6, 11743.0], [48.7, 11748.0], [48.8, 11755.0], [48.9, 11761.0], [49.0, 11774.0], [49.1, 11791.0], [49.2, 11806.0], [49.3, 11820.0], [49.4, 11826.0], [49.5, 11848.0], [49.6, 11853.0], [49.7, 11865.0], [49.8, 11874.0], [49.9, 11901.0], [50.0, 11913.0], [50.1, 11970.0], [50.2, 12019.0], [50.3, 12020.0], [50.4, 12038.0], [50.5, 12053.0], [50.6, 12060.0], [50.7, 12081.0], [50.8, 12081.0], [50.9, 12085.0], [51.0, 12096.0], [51.1, 12099.0], [51.2, 12109.0], [51.3, 12148.0], [51.4, 12164.0], [51.5, 12181.0], [51.6, 12183.0], [51.7, 12188.0], [51.8, 12189.0], [51.9, 12219.0], [52.0, 12229.0], [52.1, 12254.0], [52.2, 12269.0], [52.3, 12269.0], [52.4, 12285.0], [52.5, 12291.0], [52.6, 12306.0], [52.7, 12322.0], [52.8, 12324.0], [52.9, 12342.0], [53.0, 12342.0], [53.1, 12352.0], [53.2, 12355.0], [53.3, 12376.0], [53.4, 12393.0], [53.5, 12402.0], [53.6, 12433.0], [53.7, 12436.0], [53.8, 12455.0], [53.9, 12466.0], [54.0, 12469.0], [54.1, 12487.0], [54.2, 12502.0], [54.3, 12527.0], [54.4, 12538.0], [54.5, 12817.0], [54.6, 12877.0], [54.7, 12951.0], [54.8, 12956.0], [54.9, 12988.0], [55.0, 13006.0], [55.1, 13022.0], [55.2, 13035.0], [55.3, 13053.0], [55.4, 13069.0], [55.5, 13093.0], [55.6, 13101.0], [55.7, 13103.0], [55.8, 13105.0], [55.9, 13120.0], [56.0, 13124.0], [56.1, 13125.0], [56.2, 13153.0], [56.3, 13161.0], [56.4, 13162.0], [56.5, 13175.0], [56.6, 13177.0], [56.7, 13189.0], [56.8, 13193.0], [56.9, 13203.0], [57.0, 13219.0], [57.1, 13245.0], [57.2, 13252.0], [57.3, 13257.0], [57.4, 13295.0], [57.5, 13311.0], [57.6, 13437.0], [57.7, 13454.0], [57.8, 13473.0], [57.9, 13474.0], [58.0, 13486.0], [58.1, 13487.0], [58.2, 13504.0], [58.3, 13510.0], [58.4, 13527.0], [58.5, 13535.0], [58.6, 13540.0], [58.7, 13550.0], [58.8, 13572.0], [58.9, 13579.0], [59.0, 13586.0], [59.1, 13602.0], [59.2, 13614.0], [59.3, 13619.0], [59.4, 13620.0], [59.5, 13630.0], [59.6, 13632.0], [59.7, 13634.0], [59.8, 13646.0], [59.9, 13649.0], [60.0, 13653.0], [60.1, 13665.0], [60.2, 13673.0], [60.3, 13678.0], [60.4, 13691.0], [60.5, 13702.0], [60.6, 13712.0], [60.7, 13736.0], [60.8, 13745.0], [60.9, 13761.0], [61.0, 13780.0], [61.1, 13781.0], [61.2, 13792.0], [61.3, 13795.0], [61.4, 13795.0], [61.5, 13811.0], [61.6, 13826.0], [61.7, 13889.0], [61.8, 13908.0], [61.9, 13925.0], [62.0, 13927.0], [62.1, 13941.0], [62.2, 13956.0], [62.3, 13977.0], [62.4, 13989.0], [62.5, 13997.0], [62.6, 14012.0], [62.7, 14023.0], [62.8, 14030.0], [62.9, 14060.0], [63.0, 14075.0], [63.1, 14106.0], [63.2, 14108.0], [63.3, 14132.0], [63.4, 14137.0], [63.5, 14152.0], [63.6, 14158.0], [63.7, 14166.0], [63.8, 14181.0], [63.9, 14196.0], [64.0, 14213.0], [64.1, 14215.0], [64.2, 14229.0], [64.3, 14244.0], [64.4, 14252.0], [64.5, 14265.0], [64.6, 14289.0], [64.7, 14299.0], [64.8, 14302.0], [64.9, 14309.0], [65.0, 14328.0], [65.1, 14345.0], [65.2, 14372.0], [65.3, 14377.0], [65.4, 14428.0], [65.5, 14428.0], [65.6, 14454.0], [65.7, 14487.0], [65.8, 14503.0], [65.9, 14519.0], [66.0, 14530.0], [66.1, 14602.0], [66.2, 14623.0], [66.3, 14641.0], [66.4, 14664.0], [66.5, 14678.0], [66.6, 14698.0], [66.7, 14720.0], [66.8, 14738.0], [66.9, 14760.0], [67.0, 14780.0], [67.1, 14800.0], [67.2, 14818.0], [67.3, 14833.0], [67.4, 14852.0], [67.5, 14870.0], [67.6, 14895.0], [67.7, 14915.0], [67.8, 14927.0], [67.9, 14945.0], [68.0, 14970.0], [68.1, 14990.0], [68.2, 15006.0], [68.3, 15009.0], [68.4, 15018.0], [68.5, 15029.0], [68.6, 15040.0], [68.7, 15049.0], [68.8, 15061.0], [68.9, 15063.0], [69.0, 15081.0], [69.1, 15102.0], [69.2, 15120.0], [69.3, 15147.0], [69.4, 15224.0], [69.5, 15237.0], [69.6, 15247.0], [69.7, 15263.0], [69.8, 15282.0], [69.9, 15314.0], [70.0, 15327.0], [70.1, 15328.0], [70.2, 15340.0], [70.3, 15356.0], [70.4, 15375.0], [70.5, 15377.0], [70.6, 15394.0], [70.7, 15400.0], [70.8, 15405.0], [70.9, 15412.0], [71.0, 15413.0], [71.1, 15415.0], [71.2, 15427.0], [71.3, 15429.0], [71.4, 15433.0], [71.5, 15444.0], [71.6, 15473.0], [71.7, 15484.0], [71.8, 15504.0], [71.9, 15530.0], [72.0, 15552.0], [72.1, 15564.0], [72.2, 15594.0], [72.3, 15603.0], [72.4, 15604.0], [72.5, 15609.0], [72.6, 15616.0], [72.7, 15630.0], [72.8, 15634.0], [72.9, 15641.0], [73.0, 15648.0], [73.1, 15661.0], [73.2, 15671.0], [73.3, 15677.0], [73.4, 15695.0], [73.5, 15700.0], [73.6, 15702.0], [73.7, 15722.0], [73.8, 15737.0], [73.9, 15814.0], [74.0, 15830.0], [74.1, 15841.0], [74.2, 15856.0], [74.3, 15862.0], [74.4, 15872.0], [74.5, 15885.0], [74.6, 15900.0], [74.7, 15912.0], [74.8, 15921.0], [74.9, 15952.0], [75.0, 15970.0], [75.1, 15988.0], [75.2, 15988.0], [75.3, 15988.0], [75.4, 16003.0], [75.5, 16025.0], [75.6, 16026.0], [75.7, 16035.0], [75.8, 16043.0], [75.9, 16045.0], [76.0, 16060.0], [76.1, 16060.0], [76.2, 16071.0], [76.3, 16079.0], [76.4, 16096.0], [76.5, 16112.0], [76.6, 16120.0], [76.7, 16136.0], [76.8, 16153.0], [76.9, 16174.0], [77.0, 16189.0], [77.1, 16210.0], [77.2, 16227.0], [77.3, 16246.0], [77.4, 16477.0], [77.5, 16488.0], [77.6, 16513.0], [77.7, 16527.0], [77.8, 16547.0], [77.9, 16551.0], [78.0, 16556.0], [78.1, 16585.0], [78.2, 16600.0], [78.3, 16612.0], [78.4, 16635.0], [78.5, 16650.0], [78.6, 16657.0], [78.7, 16666.0], [78.8, 16675.0], [78.9, 16678.0], [79.0, 16680.0], [79.1, 16686.0], [79.2, 16690.0], [79.3, 16693.0], [79.4, 16708.0], [79.5, 16723.0], [79.6, 16739.0], [79.7, 16745.0], [79.8, 16759.0], [79.9, 16780.0], [80.0, 16804.0], [80.1, 16812.0], [80.2, 16837.0], [80.3, 16845.0], [80.4, 16861.0], [80.5, 16869.0], [80.6, 16890.0], [80.7, 16909.0], [80.8, 16924.0], [80.9, 16957.0], [81.0, 16971.0], [81.1, 16978.0], [81.2, 16986.0], [81.3, 17006.0], [81.4, 17028.0], [81.5, 17044.0], [81.6, 17063.0], [81.7, 17085.0], [81.8, 17092.0], [81.9, 17121.0], [82.0, 17125.0], [82.1, 17148.0], [82.2, 17183.0], [82.3, 17204.0], [82.4, 17220.0], [82.5, 17237.0], [82.6, 17254.0], [82.7, 17256.0], [82.8, 17271.0], [82.9, 17303.0], [83.0, 17322.0], [83.1, 17328.0], [83.2, 17341.0], [83.3, 17377.0], [83.4, 18016.0], [83.5, 18048.0], [83.6, 18053.0], [83.7, 18062.0], [83.8, 18098.0], [83.9, 18138.0], [84.0, 18144.0], [84.1, 18153.0], [84.2, 18165.0], [84.3, 18178.0], [84.4, 18184.0], [84.5, 18196.0], [84.6, 18214.0], [84.7, 18215.0], [84.8, 18234.0], [84.9, 18241.0], [85.0, 18246.0], [85.1, 18259.0], [85.2, 18260.0], [85.3, 18266.0], [85.4, 18273.0], [85.5, 18277.0], [85.6, 18284.0], [85.7, 18285.0], [85.8, 18289.0], [85.9, 18289.0], [86.0, 18290.0], [86.1, 18300.0], [86.2, 18304.0], [86.3, 18314.0], [86.4, 18318.0], [86.5, 18326.0], [86.6, 18330.0], [86.7, 18338.0], [86.8, 18347.0], [86.9, 18359.0], [87.0, 18372.0], [87.1, 18387.0], [87.2, 18395.0], [87.3, 18413.0], [87.4, 18433.0], [87.5, 18435.0], [87.6, 18450.0], [87.7, 18453.0], [87.8, 18456.0], [87.9, 18467.0], [88.0, 18473.0], [88.1, 18473.0], [88.2, 18485.0], [88.3, 18496.0], [88.4, 18502.0], [88.5, 18502.0], [88.6, 18507.0], [88.7, 18526.0], [88.8, 18528.0], [88.9, 18538.0], [89.0, 18539.0], [89.1, 18543.0], [89.2, 18554.0], [89.3, 18560.0], [89.4, 18563.0], [89.5, 18593.0], [89.6, 18606.0], [89.7, 18612.0], [89.8, 18627.0], [89.9, 18661.0], [90.0, 18669.0], [90.1, 19174.0], [90.2, 19193.0], [90.3, 19198.0], [90.4, 19204.0], [90.5, 19221.0], [90.6, 19223.0], [90.7, 19234.0], [90.8, 19243.0], [90.9, 19259.0], [91.0, 19259.0], [91.1, 19271.0], [91.2, 19272.0], [91.3, 19274.0], [91.4, 19279.0], [91.5, 19285.0], [91.6, 19285.0], [91.7, 19287.0], [91.8, 19301.0], [91.9, 19310.0], [92.0, 19321.0], [92.1, 19324.0], [92.2, 19334.0], [92.3, 19340.0], [92.4, 19354.0], [92.5, 19357.0], [92.6, 19392.0], [92.7, 19404.0], [92.8, 19426.0], [92.9, 19440.0], [93.0, 19461.0], [93.1, 19474.0], [93.2, 19480.0], [93.3, 19515.0], [93.4, 19516.0], [93.5, 19528.0], [93.6, 19547.0], [93.7, 19569.0], [93.8, 19581.0], [93.9, 19582.0], [94.0, 19592.0], [94.1, 19600.0], [94.2, 19604.0], [94.3, 19605.0], [94.4, 19621.0], [94.5, 19627.0], [94.6, 19637.0], [94.7, 19650.0], [94.8, 19659.0], [94.9, 19670.0], [95.0, 19672.0], [95.1, 19683.0], [95.2, 19696.0], [95.3, 19702.0], [95.4, 19711.0], [95.5, 19722.0], [95.6, 19745.0], [95.7, 19798.0], [95.8, 19809.0], [95.9, 19818.0], [96.0, 19828.0], [96.1, 19853.0], [96.2, 19864.0], [96.3, 19905.0], [96.4, 19927.0], [96.5, 19936.0], [96.6, 19942.0], [96.7, 19955.0], [96.8, 19971.0], [96.9, 20203.0], [97.0, 20210.0], [97.1, 20233.0], [97.2, 20279.0], [97.3, 20405.0], [97.4, 20414.0], [97.5, 20439.0], [97.6, 20461.0], [97.7, 20463.0], [97.8, 20465.0], [97.9, 20468.0], [98.0, 20484.0], [98.1, 20507.0], [98.2, 20510.0], [98.3, 20528.0], [98.4, 20534.0], [98.5, 20536.0], [98.6, 20563.0], [98.7, 20563.0], [98.8, 20571.0], [98.9, 20584.0], [99.0, 20585.0], [99.1, 20602.0], [99.2, 20603.0], [99.3, 20604.0], [99.4, 20612.0], [99.5, 20614.0], [99.6, 20616.0], [99.7, 20628.0], [99.8, 20638.0], [99.9, 20655.0]], "isOverall": false, "label": "Home", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 800.0, "maxY": 15.0, "series": [{"data": [[800.0, 2.0], [900.0, 2.0], [1000.0, 3.0], [1100.0, 3.0], [1200.0, 3.0], [1300.0, 3.0], [1400.0, 3.0], [1500.0, 3.0], [1600.0, 4.0], [1700.0, 4.0], [1800.0, 1.0], [1900.0, 4.0], [2000.0, 5.0], [2100.0, 5.0], [2200.0, 2.0], [2300.0, 6.0], [2400.0, 6.0], [2600.0, 5.0], [2700.0, 6.0], [2800.0, 3.0], [2900.0, 1.0], [3000.0, 3.0], [3100.0, 12.0], [3200.0, 6.0], [3400.0, 3.0], [3500.0, 2.0], [3600.0, 2.0], [3700.0, 2.0], [4200.0, 2.0], [4300.0, 1.0], [4500.0, 7.0], [4600.0, 6.0], [4400.0, 2.0], [4700.0, 6.0], [4800.0, 5.0], [5000.0, 6.0], [5100.0, 4.0], [4900.0, 5.0], [5300.0, 1.0], [5500.0, 10.0], [5600.0, 6.0], [5700.0, 6.0], [5800.0, 9.0], [5900.0, 7.0], [6000.0, 5.0], [6100.0, 9.0], [6200.0, 6.0], [6300.0, 5.0], [6400.0, 6.0], [6900.0, 7.0], [6700.0, 3.0], [7000.0, 11.0], [7100.0, 9.0], [7200.0, 6.0], [7300.0, 5.0], [7500.0, 2.0], [7600.0, 10.0], [7700.0, 9.0], [7800.0, 5.0], [7900.0, 5.0], [8000.0, 8.0], [8100.0, 5.0], [8200.0, 6.0], [8300.0, 4.0], [8400.0, 6.0], [8500.0, 12.0], [8600.0, 7.0], [8700.0, 8.0], [8800.0, 8.0], [9100.0, 4.0], [9200.0, 10.0], [9000.0, 3.0], [9300.0, 10.0], [9400.0, 10.0], [9500.0, 10.0], [9600.0, 9.0], [9700.0, 4.0], [10000.0, 2.0], [9800.0, 6.0], [10300.0, 6.0], [10400.0, 6.0], [10500.0, 2.0], [10900.0, 2.0], [11000.0, 4.0], [11100.0, 6.0], [11200.0, 11.0], [11300.0, 4.0], [11400.0, 3.0], [11500.0, 7.0], [11600.0, 7.0], [11700.0, 11.0], [11800.0, 7.0], [11900.0, 3.0], [12000.0, 10.0], [12100.0, 7.0], [12200.0, 7.0], [12300.0, 9.0], [12400.0, 7.0], [12500.0, 3.0], [12800.0, 2.0], [12900.0, 3.0], [13000.0, 6.0], [13100.0, 13.0], [13200.0, 6.0], [13300.0, 1.0], [13400.0, 6.0], [13500.0, 9.0], [13600.0, 14.0], [13700.0, 10.0], [13800.0, 3.0], [13900.0, 8.0], [14000.0, 5.0], [14100.0, 9.0], [14200.0, 8.0], [14300.0, 6.0], [14400.0, 4.0], [14500.0, 3.0], [14600.0, 6.0], [14700.0, 4.0], [14800.0, 6.0], [15000.0, 9.0], [15300.0, 8.0], [14900.0, 5.0], [15100.0, 3.0], [15200.0, 5.0], [15400.0, 11.0], [15500.0, 5.0], [15600.0, 12.0], [15700.0, 4.0], [15800.0, 7.0], [15900.0, 9.0], [16000.0, 11.0], [16100.0, 6.0], [16200.0, 3.0], [16500.0, 6.0], [16600.0, 12.0], [16700.0, 6.0], [16400.0, 2.0], [16800.0, 7.0], [16900.0, 6.0], [17000.0, 6.0], [17100.0, 4.0], [17200.0, 6.0], [17300.0, 5.0], [18000.0, 5.0], [18100.0, 7.0], [18200.0, 15.0], [18300.0, 12.0], [18400.0, 11.0], [18600.0, 5.0], [18500.0, 12.0], [19100.0, 3.0], [19200.0, 14.0], [19300.0, 9.0], [19400.0, 6.0], [19500.0, 8.0], [19600.0, 12.0], [19700.0, 5.0], [19800.0, 5.0], [19900.0, 6.0], [20400.0, 8.0], [20200.0, 4.0], [20500.0, 10.0], [20600.0, 9.0]], "isOverall": false, "label": "Home", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 20600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 19.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1.500ms"], [2, "Requests having \nresponse time > 1.500ms"], [3, "Requests in error"]], "maxY": 981.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 19.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1.500ms", "isController": false}, {"data": [[2.0, 981.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1.500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 383.0078431372541, "minX": 1.6077216E12, "maxY": 882.8978723404258, "series": [{"data": [[1.60772166E12, 383.0078431372541], [1.6077216E12, 882.8978723404258]], "isOverall": false, "label": "Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60772166E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 874.0, "minX": 1.0, "maxY": 20655.0, "series": [{"data": [[2.0, 20604.0], [3.0, 20602.0], [4.0, 20584.0], [5.0, 20563.0], [6.0, 20536.0], [7.0, 20510.0], [8.0, 20655.0], [9.0, 20628.0], [10.0, 20612.0], [11.0, 20585.0], [12.0, 20571.0], [13.0, 20638.0], [14.0, 20614.0], [16.0, 20441.0], [17.0, 20563.0], [18.0, 20233.0], [19.0, 20534.0], [20.0, 20210.0], [21.0, 20528.0], [22.0, 20203.0], [23.0, 20507.0], [24.0, 20484.0], [25.0, 20463.0], [26.0, 20461.0], [27.0, 20465.0], [28.0, 20439.0], [29.0, 20405.0], [30.0, 20414.0], [31.0, 20468.0], [33.0, 19955.0], [32.0, 19971.0], [35.0, 19942.0], [34.0, 19936.0], [37.0, 19905.0], [36.0, 19927.0], [39.0, 19864.0], [38.0, 19853.0], [41.0, 19828.0], [40.0, 19818.0], [43.0, 19798.0], [42.0, 19809.0], [45.0, 19722.0], [44.0, 19745.0], [47.0, 19711.0], [46.0, 19702.0], [49.0, 19683.0], [48.0, 19696.0], [51.0, 19650.0], [50.0, 19659.0], [53.0, 19672.0], [52.0, 19670.0], [55.0, 19621.0], [54.0, 19637.0], [57.0, 19582.0], [56.0, 19600.0], [59.0, 19605.0], [58.0, 19581.0], [61.0, 19547.0], [60.0, 19569.0], [63.0, 19515.0], [62.0, 19528.0], [67.0, 19480.0], [66.0, 19461.0], [65.0, 19474.0], [64.0, 19516.0], [71.0, 19392.0], [70.0, 19404.0], [69.0, 19426.0], [68.0, 19440.0], [75.0, 19604.0], [74.0, 19334.0], [73.0, 19627.0], [72.0, 19354.0], [79.0, 19340.0], [78.0, 19357.0], [77.0, 19592.0], [76.0, 19324.0], [83.0, 19274.0], [82.0, 19285.0], [81.0, 19310.0], [80.0, 19321.0], [87.0, 19198.0], [86.0, 19221.0], [85.0, 19234.0], [84.0, 19259.0], [91.0, 19301.0], [90.0, 19279.0], [89.0, 19272.0], [88.0, 19285.0], [95.0, 19243.0], [94.0, 19259.0], [93.0, 19271.0], [92.0, 19287.0], [99.0, 19174.0], [98.0, 19193.0], [97.0, 19204.0], [96.0, 19223.0], [103.0, 18563.0], [102.0, 18543.0], [101.0, 18593.0], [100.0, 18627.0], [107.0, 18661.0], [106.0, 18669.0], [105.0, 18538.0], [104.0, 18554.0], [111.0, 18502.0], [110.0, 18606.0], [109.0, 18539.0], [108.0, 18560.0], [115.0, 18433.0], [114.0, 18528.0], [113.0, 18467.0], [112.0, 18485.0], [119.0, 18507.0], [118.0, 18526.0], [117.0, 18473.0], [116.0, 18502.0], [123.0, 18435.0], [122.0, 18456.0], [121.0, 18473.0], [120.0, 18496.0], [127.0, 18359.0], [126.0, 18372.0], [125.0, 18387.0], [124.0, 18413.0], [135.0, 18289.0], [134.0, 18259.0], [133.0, 18612.0], [132.0, 18266.0], [131.0, 18289.0], [130.0, 18290.0], [129.0, 18326.0], [128.0, 18347.0], [143.0, 18450.0], [142.0, 18453.0], [141.0, 18184.0], [140.0, 18196.0], [139.0, 18215.0], [138.0, 18234.0], [137.0, 18246.0], [136.0, 18273.0], [151.0, 18318.0], [150.0, 18338.0], [149.0, 18330.0], [148.0, 18395.0], [147.0, 18300.0], [146.0, 18314.0], [145.0, 18285.0], [144.0, 18165.0], [159.0, 18178.0], [158.0, 18138.0], [157.0, 18214.0], [156.0, 18241.0], [155.0, 18260.0], [154.0, 18277.0], [153.0, 18294.0], [167.0, 17377.0], [166.0, 18016.0], [165.0, 18048.0], [164.0, 18062.0], [163.0, 18053.0], [162.0, 18098.0], [161.0, 18144.0], [160.0, 18153.0], [175.0, 17237.0], [174.0, 17254.0], [173.0, 17271.0], [172.0, 17256.0], [171.0, 17303.0], [170.0, 17322.0], [169.0, 17341.0], [168.0, 17328.0], [183.0, 17085.0], [182.0, 17092.0], [181.0, 17121.0], [180.0, 17125.0], [179.0, 17148.0], [178.0, 17183.0], [177.0, 17204.0], [176.0, 17220.0], [191.0, 16957.0], [190.0, 16971.0], [189.0, 16978.0], [188.0, 16986.0], [187.0, 17006.0], [186.0, 17028.0], [185.0, 17044.0], [184.0, 17063.0], [199.0, 16812.0], [198.0, 16837.0], [197.0, 16845.0], [196.0, 16861.0], [195.0, 16869.0], [194.0, 16890.0], [193.0, 16909.0], [192.0, 16924.0], [207.0, 16680.0], [206.0, 16690.0], [205.0, 16723.0], [204.0, 16739.0], [203.0, 16745.0], [202.0, 16759.0], [201.0, 16780.0], [200.0, 16804.0], [215.0, 16600.0], [214.0, 16612.0], [213.0, 16635.0], [212.0, 16650.0], [211.0, 16657.0], [210.0, 16678.0], [209.0, 16693.0], [208.0, 16675.0], [223.0, 16708.0], [222.0, 16477.0], [221.0, 16488.0], [220.0, 16513.0], [219.0, 16527.0], [218.0, 16551.0], [217.0, 16556.0], [216.0, 16585.0], [231.0, 16174.0], [230.0, 16189.0], [229.0, 16210.0], [228.0, 16227.0], [227.0, 16246.0], [226.0, 16666.0], [225.0, 16686.0], [224.0, 16547.0], [239.0, 16025.0], [238.0, 16043.0], [237.0, 16071.0], [236.0, 16079.0], [235.0, 16096.0], [234.0, 16120.0], [233.0, 16136.0], [232.0, 16153.0], [247.0, 16060.0], [246.0, 15988.0], [245.0, 15988.0], [244.0, 16112.0], [243.0, 16045.0], [242.0, 16060.0], [241.0, 15989.0], [240.0, 16003.0], [255.0, 15912.0], [254.0, 15830.0], [253.0, 15856.0], [252.0, 15970.0], [251.0, 15885.0], [250.0, 15921.0], [249.0, 16026.0], [248.0, 15952.0], [270.0, 15564.0], [271.0, 15630.0], [269.0, 15671.0], [268.0, 15603.0], [267.0, 15700.0], [266.0, 15722.0], [265.0, 15641.0], [264.0, 15661.0], [263.0, 15677.0], [257.0, 15872.0], [256.0, 15900.0], [259.0, 15841.0], [258.0, 15862.0], [262.0, 15702.0], [261.0, 15814.0], [260.0, 15737.0], [286.0, 15327.0], [287.0, 15377.0], [285.0, 15415.0], [284.0, 15988.0], [283.0, 15444.0], [282.0, 15375.0], [281.0, 16035.0], [280.0, 15394.0], [279.0, 15413.0], [273.0, 15604.0], [272.0, 15609.0], [275.0, 15484.0], [274.0, 15504.0], [278.0, 15412.0], [277.0, 15530.0], [276.0, 15473.0], [302.0, 15147.0], [303.0, 15120.0], [301.0, 15594.0], [300.0, 15616.0], [299.0, 15634.0], [298.0, 15648.0], [297.0, 15237.0], [296.0, 15552.0], [295.0, 15695.0], [289.0, 15340.0], [288.0, 15356.0], [291.0, 15282.0], [290.0, 15314.0], [294.0, 15224.0], [293.0, 15247.0], [292.0, 15263.0], [318.0, 15427.0], [319.0, 14833.0], [317.0, 14852.0], [316.0, 14870.0], [315.0, 14895.0], [314.0, 14915.0], [313.0, 14927.0], [312.0, 14945.0], [311.0, 14970.0], [305.0, 15081.0], [304.0, 15102.0], [307.0, 15049.0], [306.0, 15061.0], [310.0, 14990.0], [309.0, 15009.0], [308.0, 15029.0], [334.0, 14641.0], [335.0, 14623.0], [333.0, 14664.0], [332.0, 14678.0], [331.0, 14698.0], [330.0, 15328.0], [329.0, 14720.0], [328.0, 14738.0], [327.0, 14760.0], [321.0, 14818.0], [320.0, 15433.0], [323.0, 14800.0], [322.0, 15429.0], [326.0, 14780.0], [325.0, 15402.5], [350.0, 14345.0], [351.0, 14328.0], [349.0, 14372.0], [348.0, 14377.0], [347.0, 14428.0], [346.0, 14428.0], [345.0, 14454.0], [344.0, 14487.0], [343.0, 14503.0], [337.0, 15063.0], [336.0, 14602.0], [339.0, 15018.0], [338.0, 15040.0], [342.0, 14519.0], [341.0, 14530.0], [340.0, 15006.0], [366.0, 14158.0], [367.0, 14166.0], [365.0, 14181.0], [364.0, 14060.0], [363.0, 14196.0], [362.0, 14213.0], [361.0, 14215.0], [360.0, 14229.0], [359.0, 14188.0], [353.0, 14299.0], [352.0, 14309.0], [355.0, 14289.0], [354.0, 14302.0], [357.0, 14252.0], [356.0, 14265.0], [382.0, 13889.0], [383.0, 13997.0], [381.0, 14030.0], [380.0, 13908.0], [379.0, 13927.0], [378.0, 13941.0], [377.0, 14075.0], [376.0, 13956.0], [375.0, 13977.0], [369.0, 14152.0], [368.0, 14023.0], [371.0, 14012.0], [370.0, 14137.0], [374.0, 14106.0], [373.0, 14108.0], [372.0, 13989.0], [398.0, 13630.0], [399.0, 13620.0], [397.0, 13653.0], [396.0, 13646.0], [395.0, 13665.0], [394.0, 13678.0], [393.0, 13702.0], [392.0, 13712.0], [391.0, 13736.0], [385.0, 13795.0], [384.0, 13811.0], [387.0, 13780.0], [386.0, 13795.0], [390.0, 13745.0], [389.0, 13761.0], [388.0, 13781.0], [414.0, 13673.0], [415.0, 13649.0], [413.0, 13691.0], [412.0, 13437.0], [411.0, 13454.0], [410.0, 13474.0], [409.0, 13486.0], [408.0, 13504.0], [407.0, 13792.0], [401.0, 13634.0], [400.0, 13925.0], [403.0, 13579.0], [402.0, 13619.0], [406.0, 13540.0], [405.0, 13826.0], [404.0, 13572.0], [430.0, 13124.0], [431.0, 13103.0], [429.0, 13153.0], [428.0, 13162.0], [427.0, 13175.0], [426.0, 13193.0], [425.0, 13473.0], [424.0, 13487.0], [423.0, 13510.0], [417.0, 13614.0], [416.0, 13632.0], [419.0, 13586.0], [418.0, 13602.0], [422.0, 13527.0], [421.0, 13550.0], [420.0, 13535.0], [446.0, 13101.0], [447.0, 13053.0], [445.0, 13120.0], [444.0, 13105.0], [443.0, 13161.0], [442.0, 13177.0], [441.0, 13189.0], [440.0, 13203.0], [439.0, 13219.0], [433.0, 13125.0], [432.0, 13093.0], [435.0, 13295.0], [434.0, 13311.0], [438.0, 13245.0], [437.0, 13257.0], [436.0, 13252.0], [462.0, 12817.0], [463.0, 12324.0], [461.0, 12342.0], [460.0, 12352.0], [459.0, 12376.0], [458.0, 12877.0], [457.0, 12402.0], [456.0, 12433.0], [455.0, 12466.0], [449.0, 13035.0], [448.0, 13069.0], [451.0, 13006.0], [450.0, 13022.0], [454.0, 12951.0], [453.0, 12956.0], [452.0, 12988.0], [478.0, 12527.0], [479.0, 12502.0], [477.0, 12538.0], [476.0, 12060.0], [475.0, 12081.0], [474.0, 12109.0], [473.0, 12148.0], [472.0, 12164.0], [471.0, 12181.0], [465.0, 12269.0], [464.0, 12291.0], [467.0, 12229.0], [466.0, 12269.0], [470.0, 12183.0], [469.0, 12188.0], [468.0, 12219.0], [494.0, 12096.0], [495.0, 12085.0], [493.0, 11806.0], [492.0, 12099.0], [491.0, 12285.0], [490.0, 12306.0], [489.0, 12322.0], [488.0, 12342.0], [487.0, 12355.0], [481.0, 12469.0], [480.0, 12487.0], [483.0, 12436.0], [482.0, 12455.0], [486.0, 11874.0], [485.0, 12393.0], [484.0, 11913.0], [510.0, 11593.0], [511.0, 11574.0], [509.0, 11609.0], [508.0, 11635.0], [507.0, 11970.0], [506.0, 11646.0], [505.0, 11701.0], [504.0, 12189.0], [503.0, 12020.0], [497.0, 12081.0], [496.0, 12254.0], [499.0, 11723.0], [498.0, 11748.0], [502.0, 12019.0], [501.0, 11738.0], [500.0, 12053.0], [540.0, 11276.0], [543.0, 11257.0], [529.0, 11661.0], [528.0, 11683.0], [531.0, 11593.0], [530.0, 11467.0], [533.0, 11561.0], [532.0, 11575.0], [542.0, 11267.0], [541.0, 11331.0], [539.0, 11301.0], [538.0, 11312.0], [537.0, 11447.0], [536.0, 11490.0], [527.0, 11698.0], [513.0, 11853.0], [512.0, 12038.0], [515.0, 11901.0], [514.0, 11761.0], [517.0, 11865.0], [516.0, 11743.0], [519.0, 11826.0], [518.0, 11848.0], [526.0, 11725.0], [525.0, 11654.0], [524.0, 11731.0], [523.0, 11755.0], [522.0, 11774.0], [521.0, 11791.0], [520.0, 11820.0], [535.0, 11514.0], [534.0, 11542.0], [572.0, 10400.0], [575.0, 10339.0], [561.0, 11034.0], [560.0, 11052.0], [563.0, 11007.0], [562.0, 10582.0], [565.0, 10964.0], [564.0, 10988.0], [574.0, 10351.0], [573.0, 10393.0], [571.0, 10424.0], [570.0, 10451.0], [569.0, 10461.0], [568.0, 10474.0], [559.0, 11165.0], [547.0, 11256.0], [545.0, 11313.0], [549.0, 11206.0], [548.0, 11271.0], [551.0, 11289.0], [550.0, 11193.0], [558.0, 11207.0], [557.0, 11081.0], [556.0, 11233.0], [555.0, 11108.0], [554.0, 11126.0], [553.0, 11161.0], [552.0, 11173.0], [567.0, 10495.0], [566.0, 10513.0], [604.0, 9505.0], [607.0, 9463.0], [593.0, 9653.0], [592.0, 9668.0], [595.0, 10026.0], [594.0, 9632.0], [597.0, 9600.0], [596.0, 10006.0], [606.0, 9478.0], [605.0, 9494.0], [603.0, 9526.0], [602.0, 9546.0], [601.0, 9563.0], [600.0, 9578.0], [591.0, 9688.0], [577.0, 10320.0], [576.0, 10324.0], [579.0, 9883.0], [578.0, 10303.0], [581.0, 9851.0], [580.0, 9867.0], [583.0, 9815.0], [582.0, 9832.0], [590.0, 9678.0], [589.0, 9692.0], [588.0, 9708.0], [587.0, 9732.0], [586.0, 9757.0], [585.0, 9776.0], [584.0, 9803.0], [599.0, 9594.0], [598.0, 9613.0], [636.0, 9323.0], [639.0, 9270.0], [625.0, 9543.0], [624.0, 9563.0], [627.0, 9496.0], [626.0, 9518.0], [629.0, 9454.0], [628.0, 9478.0], [638.0, 9292.0], [637.0, 9310.0], [635.0, 9340.0], [634.0, 9359.0], [633.0, 9008.0], [632.0, 9027.0], [623.0, 9581.0], [609.0, 9424.0], [608.0, 9443.0], [611.0, 9391.0], [610.0, 9401.0], [613.0, 9359.0], [612.0, 9378.0], [615.0, 9327.0], [614.0, 9348.0], [622.0, 9199.0], [621.0, 9627.0], [620.0, 9248.0], [619.0, 9261.0], [618.0, 9275.0], [617.0, 9299.0], [616.0, 9305.0], [631.0, 9413.0], [630.0, 9067.0], [668.0, 8778.0], [671.0, 8809.0], [657.0, 8589.0], [656.0, 8611.0], [659.0, 8553.0], [658.0, 8569.0], [661.0, 8518.0], [660.0, 8535.0], [670.0, 8832.0], [669.0, 8846.0], [667.0, 8885.0], [666.0, 8897.0], [665.0, 8466.0], [664.0, 8462.0], [655.0, 8631.0], [641.0, 9232.0], [640.0, 9248.0], [643.0, 9187.0], [642.0, 9213.0], [645.0, 8804.0], [644.0, 8819.0], [647.0, 8765.0], [646.0, 8782.0], [654.0, 8629.0], [653.0, 8649.0], [652.0, 8670.0], [651.0, 9186.0], [650.0, 9120.0], [649.0, 9230.0], [648.0, 8748.0], [663.0, 8861.0], [662.0, 8500.0], [700.0, 8150.0], [703.0, 8095.0], [689.0, 8355.0], [688.0, 8470.0], [691.0, 8325.0], [690.0, 8327.0], [693.0, 8279.0], [692.0, 8299.0], [702.0, 8110.0], [701.0, 8126.0], [699.0, 8171.0], [698.0, 8192.0], [697.0, 8209.0], [696.0, 8227.0], [687.0, 8398.0], [673.0, 8766.0], [672.0, 8787.0], [675.0, 8652.0], [674.0, 8748.0], [677.0, 8589.0], [676.0, 8708.0], [679.0, 8541.0], [678.0, 8567.0], [686.0, 8505.0], [685.0, 8435.0], [684.0, 8535.0], [683.0, 8469.0], [682.0, 8478.0], [681.0, 8593.0], [680.0, 8614.0], [695.0, 8238.0], [694.0, 8268.0], [732.0, 7737.0], [735.0, 7668.0], [721.0, 7946.0], [720.0, 7952.0], [723.0, 7901.0], [722.0, 7925.0], [725.0, 7866.0], [724.0, 7884.0], [734.0, 7694.0], [733.0, 7711.0], [731.0, 7749.0], [730.0, 7763.0], [729.0, 7788.0], [728.0, 7810.0], [719.0, 7980.0], [705.0, 8056.0], [704.0, 8076.0], [707.0, 7743.0], [706.0, 7761.0], [709.0, 7721.0], [708.0, 7727.0], [711.0, 7675.0], [710.0, 7695.0], [718.0, 8004.0], [717.0, 8013.0], [716.0, 8055.0], [715.0, 8072.0], [714.0, 8096.0], [713.0, 7640.0], [712.0, 7665.0], [727.0, 7824.0], [726.0, 7855.0], [764.0, 7248.0], [767.0, 6751.0], [753.0, 6953.0], [752.0, 6970.0], [755.0, 7368.0], [754.0, 7388.0], [757.0, 7325.0], [756.0, 7349.0], [766.0, 6770.0], [765.0, 6748.0], [763.0, 7285.0], [762.0, 7235.0], [761.0, 7247.0], [760.0, 7269.0], [751.0, 6986.0], [737.0, 7640.0], [736.0, 7649.0], [739.0, 7603.0], [738.0, 7619.0], [741.0, 7137.0], [740.0, 7584.0], [743.0, 7126.0], [742.0, 7144.0], [750.0, 7004.0], [749.0, 7025.0], [748.0, 7041.0], [747.0, 7056.0], [746.0, 7536.0], [745.0, 7092.0], [744.0, 7110.0], [759.0, 7290.0], [758.0, 7306.0], [796.0, 6254.0], [799.0, 6199.0], [785.0, 6449.0], [784.0, 6484.0], [787.0, 6412.0], [786.0, 6430.0], [789.0, 6381.0], [788.0, 6400.0], [798.0, 6217.0], [797.0, 6238.0], [795.0, 6275.0], [794.0, 6296.0], [793.0, 6340.0], [792.0, 6356.0], [783.0, 6494.0], [769.0, 7177.0], [768.0, 7197.0], [771.0, 7145.0], [770.0, 7157.0], [773.0, 7084.0], [772.0, 7116.0], [775.0, 7063.0], [774.0, 7087.0], [782.0, 6937.0], [781.0, 6953.0], [780.0, 6973.0], [779.0, 6996.0], [778.0, 7011.0], [777.0, 7024.0], [776.0, 7021.0], [791.0, 6344.0], [790.0, 6363.0], [828.0, 5853.0], [831.0, 5798.0], [817.0, 5931.0], [816.0, 5950.0], [819.0, 5911.0], [818.0, 6261.0], [821.0, 5897.0], [820.0, 5916.0], [830.0, 5815.0], [829.0, 5838.0], [827.0, 5787.0], [826.0, 5809.0], [825.0, 5827.0], [824.0, 5847.0], [815.0, 5966.0], [801.0, 6164.0], [800.0, 6183.0], [803.0, 6167.0], [802.0, 6146.0], [805.0, 6130.0], [804.0, 6143.0], [807.0, 6109.0], [806.0, 6126.0], [814.0, 5976.0], [813.0, 5998.0], [812.0, 6021.0], [811.0, 6033.0], [810.0, 6058.0], [809.0, 6079.0], [808.0, 6094.0], [823.0, 5864.0], [822.0, 5881.0], [860.0, 5002.0], [863.0, 4948.0], [849.0, 5540.0], [848.0, 5567.0], [851.0, 5505.0], [850.0, 5524.0], [853.0, 5147.0], [852.0, 5164.0], [862.0, 4968.0], [861.0, 4985.0], [859.0, 4986.0], [858.0, 5008.0], [857.0, 5066.0], [856.0, 5026.0], [847.0, 5584.0], [833.0, 5758.0], [832.0, 5773.0], [835.0, 5716.0], [834.0, 5739.0], [837.0, 5683.0], [836.0, 5698.0], [839.0, 5638.0], [838.0, 5661.0], [846.0, 5540.0], [845.0, 5554.0], [844.0, 5586.0], [843.0, 5561.0], [842.0, 5584.0], [841.0, 5603.0], [840.0, 5625.0], [855.0, 5344.0], [854.0, 5125.0], [892.0, 4596.0], [895.0, 4274.0], [881.0, 4644.0], [880.0, 4673.0], [883.0, 4614.0], [882.0, 4629.0], [885.0, 4576.0], [884.0, 4592.0], [894.0, 4303.0], [893.0, 4562.0], [891.0, 4622.0], [890.0, 4472.0], [889.0, 4489.0], [888.0, 4510.0], [879.0, 4691.0], [865.0, 5115.0], [864.0, 4925.0], [867.0, 4875.0], [866.0, 4894.0], [869.0, 4838.0], [868.0, 4862.0], [871.0, 5027.0], [870.0, 4819.0], [878.0, 4711.0], [877.0, 4709.0], [876.0, 4715.0], [875.0, 4733.0], [874.0, 4749.0], [873.0, 4763.0], [872.0, 5009.0], [887.0, 4530.0], [886.0, 4542.0], [924.0, 3062.0], [927.0, 2912.0], [913.0, 3142.0], [912.0, 3162.0], [915.0, 3131.0], [914.0, 3125.0], [917.0, 3201.0], [916.0, 3237.0], [926.0, 3007.0], [925.0, 3053.0], [923.0, 3104.0], [922.0, 3120.0], [921.0, 3144.0], [920.0, 3156.0], [911.0, 3179.0], [897.0, 3721.0], [896.0, 4263.0], [899.0, 3687.0], [898.0, 3706.0], [901.0, 3583.0], [900.0, 3660.0], [903.0, 3497.0], [902.0, 3534.0], [910.0, 3198.0], [909.0, 3218.0], [908.0, 3237.0], [907.0, 3257.0], [906.0, 3270.0], [905.0, 3454.0], [904.0, 3475.0], [919.0, 3181.0], [918.0, 3191.0], [956.0, 2191.0], [959.0, 2146.0], [945.0, 2445.0], [944.0, 2473.0], [947.0, 2392.0], [946.0, 2409.0], [949.0, 2345.0], [948.0, 2363.0], [958.0, 2173.0], [957.0, 2198.0], [955.0, 2235.0], [954.0, 2258.0], [953.0, 2319.0], [952.0, 2349.0], [943.0, 2485.0], [929.0, 2824.0], [928.0, 2889.0], [931.0, 2788.0], [930.0, 2808.0], [933.0, 2766.0], [932.0, 2792.0], [935.0, 2721.0], [934.0, 2747.0], [942.0, 2497.0], [941.0, 2603.0], [940.0, 2630.0], [939.0, 2644.0], [938.0, 2670.0], [937.0, 2669.0], [936.0, 2710.0], [951.0, 2370.0], [950.0, 2408.0], [989.0, 1248.0], [976.0, 1239.5], [977.0, 1630.0], [979.0, 1577.0], [978.0, 1602.0], [981.0, 1516.0], [980.0, 1549.0], [991.0, 1195.0], [990.0, 1218.0], [988.0, 1278.0], [987.0, 1313.0], [986.0, 1348.0], [985.0, 1381.0], [984.0, 1404.0], [967.0, 1955.0], [966.0, 1986.0], [965.0, 2000.0], [964.0, 2032.0], [963.0, 2048.0], [962.0, 2059.0], [961.0, 2091.0], [960.0, 2115.0], [975.0, 1684.0], [974.0, 1702.0], [973.0, 1729.0], [972.0, 1756.0], [971.0, 1787.0], [970.0, 1806.0], [969.0, 1915.0], [968.0, 1928.0], [983.0, 1436.0], [982.0, 1487.0], [999.0, 874.0], [998.0, 949.0], [997.0, 999.0], [996.0, 1006.0], [995.0, 1036.0], [994.0, 1068.0], [993.0, 1118.0], [992.0, 1161.0], [1.0, 20616.0]], "isOverall": false, "label": "Home", "isController": false}, {"data": [[500.48200000000026, 11572.315000000008]], "isOverall": false, "label": "Home-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 999.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 462.1666666666667, "minX": 1.6077216E12, "maxY": 169702.5, "series": [{"data": [[1.60772166E12, 169702.5], [1.6077216E12, 52130.833333333336]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60772166E12, 1504.5], [1.6077216E12, 462.1666666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60772166E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 4216.561702127659, "minX": 1.6077216E12, "maxY": 13831.925490196076, "series": [{"data": [[1.60772166E12, 13831.925490196076], [1.6077216E12, 4216.561702127659]], "isOverall": false, "label": "Home", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60772166E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 4216.468085106381, "minX": 1.6077216E12, "maxY": 13831.866666666656, "series": [{"data": [[1.60772166E12, 13831.866666666656], [1.6077216E12, 4216.468085106381]], "isOverall": false, "label": "Home", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60772166E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 245.727659574468, "minX": 1.6077216E12, "maxY": 926.6771241830073, "series": [{"data": [[1.60772166E12, 926.6771241830073], [1.6077216E12, 245.727659574468]], "isOverall": false, "label": "Home", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60772166E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 826.0, "minX": 1.6077216E12, "maxY": 20655.0, "series": [{"data": [[1.60772166E12, 20655.0], [1.6077216E12, 7197.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60772166E12, 7039.303997077942], [1.6077216E12, 883.2999957799911]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60772166E12, 7049.751001095772], [1.6077216E12, 899.2300016880035]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60772166E12, 7045.154998630285], [1.6077216E12, 892.1499978899956]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60772166E12, 6748.0], [1.6077216E12, 826.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60772166E12, 13908.0], [1.6077216E12, 4622.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60772166E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1021.0, "minX": 10.0, "maxY": 20409.5, "series": [{"data": [[36.0, 1742.5], [37.0, 4709.0], [39.0, 2721.0], [10.0, 1021.0], [40.0, 5631.5], [48.0, 10016.0], [49.0, 14229.0], [53.0, 16924.0], [52.0, 20409.5], [54.0, 8467.5], [56.0, 17623.0], [57.0, 18314.0], [59.0, 12045.5], [60.0, 15255.0], [19.0, 3270.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 60.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1021.0, "minX": 10.0, "maxY": 20409.5, "series": [{"data": [[36.0, 1742.5], [37.0, 4709.0], [39.0, 2720.0], [10.0, 1021.0], [40.0, 5631.0], [48.0, 10016.0], [49.0, 14229.0], [53.0, 16924.0], [52.0, 20409.5], [54.0, 8467.5], [56.0, 17623.0], [57.0, 18314.0], [59.0, 12045.5], [60.0, 15255.0], [19.0, 3270.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 60.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.6077216E12, "maxY": 16.666666666666668, "series": [{"data": [[1.6077216E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6077216E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 3.9166666666666665, "minX": 1.6077216E12, "maxY": 12.75, "series": [{"data": [[1.60772166E12, 12.75], [1.6077216E12, 3.9166666666666665]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60772166E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 3.9166666666666665, "minX": 1.6077216E12, "maxY": 12.75, "series": [{"data": [[1.60772166E12, 12.75], [1.6077216E12, 3.9166666666666665]], "isOverall": false, "label": "Home-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60772166E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 3.9166666666666665, "minX": 1.6077216E12, "maxY": 12.75, "series": [{"data": [[1.60772166E12, 12.75], [1.6077216E12, 3.9166666666666665]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60772166E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

