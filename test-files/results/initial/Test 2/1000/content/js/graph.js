/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 197.0, "minX": 0.0, "maxY": 23599.0, "series": [{"data": [[0.0, 197.0], [0.1, 236.0], [0.2, 250.0], [0.3, 250.0], [0.4, 294.0], [0.5, 295.0], [0.6, 309.0], [0.7, 327.0], [0.8, 337.0], [0.9, 338.0], [1.0, 354.0], [1.1, 370.0], [1.2, 385.0], [1.3, 400.0], [1.4, 400.0], [1.5, 411.0], [1.6, 423.0], [1.7, 427.0], [1.8, 435.0], [1.9, 444.0], [2.0, 450.0], [2.1, 457.0], [2.2, 465.0], [2.3, 475.0], [2.4, 485.0], [2.5, 486.0], [2.6, 488.0], [2.7, 509.0], [2.8, 514.0], [2.9, 518.0], [3.0, 524.0], [3.1, 532.0], [3.2, 533.0], [3.3, 536.0], [3.4, 537.0], [3.5, 565.0], [3.6, 577.0], [3.7, 581.0], [3.8, 589.0], [3.9, 592.0], [4.0, 597.0], [4.1, 604.0], [4.2, 611.0], [4.3, 657.0], [4.4, 750.0], [4.5, 763.0], [4.6, 772.0], [4.7, 779.0], [4.8, 819.0], [4.9, 849.0], [5.0, 861.0], [5.1, 869.0], [5.2, 880.0], [5.3, 886.0], [5.4, 895.0], [5.5, 906.0], [5.6, 910.0], [5.7, 921.0], [5.8, 929.0], [5.9, 935.0], [6.0, 943.0], [6.1, 948.0], [6.2, 958.0], [6.3, 965.0], [6.4, 972.0], [6.5, 978.0], [6.6, 989.0], [6.7, 994.0], [6.8, 1002.0], [6.9, 1008.0], [7.0, 1015.0], [7.1, 1024.0], [7.2, 1031.0], [7.3, 1036.0], [7.4, 1044.0], [7.5, 1051.0], [7.6, 1058.0], [7.7, 1067.0], [7.8, 1075.0], [7.9, 1083.0], [8.0, 1089.0], [8.1, 1094.0], [8.2, 1103.0], [8.3, 1110.0], [8.4, 1116.0], [8.5, 1125.0], [8.6, 1131.0], [8.7, 1140.0], [8.8, 1149.0], [8.9, 1152.0], [9.0, 1160.0], [9.1, 1167.0], [9.2, 1176.0], [9.3, 1183.0], [9.4, 1189.0], [9.5, 1200.0], [9.6, 1209.0], [9.7, 1218.0], [9.8, 1224.0], [9.9, 1230.0], [10.0, 1237.0], [10.1, 1245.0], [10.2, 1252.0], [10.3, 1255.0], [10.4, 1265.0], [10.5, 1276.0], [10.6, 1285.0], [10.7, 1289.0], [10.8, 1297.0], [10.9, 1302.0], [11.0, 1314.0], [11.1, 1320.0], [11.2, 1325.0], [11.3, 1331.0], [11.4, 1339.0], [11.5, 1349.0], [11.6, 1356.0], [11.7, 1363.0], [11.8, 1574.0], [11.9, 1583.0], [12.0, 1594.0], [12.1, 1603.0], [12.2, 1634.0], [12.3, 1641.0], [12.4, 2472.0], [12.5, 2480.0], [12.6, 2488.0], [12.7, 2496.0], [12.8, 2504.0], [12.9, 2509.0], [13.0, 2518.0], [13.1, 2523.0], [13.2, 2534.0], [13.3, 2540.0], [13.4, 2547.0], [13.5, 2554.0], [13.6, 2560.0], [13.7, 2567.0], [13.8, 2574.0], [13.9, 2581.0], [14.0, 2588.0], [14.1, 2596.0], [14.2, 2603.0], [14.3, 2608.0], [14.4, 2619.0], [14.5, 2626.0], [14.6, 2637.0], [14.7, 2638.0], [14.8, 2645.0], [14.9, 2653.0], [15.0, 2658.0], [15.1, 2669.0], [15.2, 2677.0], [15.3, 2683.0], [15.4, 2688.0], [15.5, 2696.0], [15.6, 2702.0], [15.7, 2712.0], [15.8, 2723.0], [15.9, 2726.0], [16.0, 2734.0], [16.1, 2739.0], [16.2, 2748.0], [16.3, 2765.0], [16.4, 2767.0], [16.5, 2767.0], [16.6, 2775.0], [16.7, 2781.0], [16.8, 2788.0], [16.9, 2795.0], [17.0, 2806.0], [17.1, 2812.0], [17.2, 2821.0], [17.3, 2827.0], [17.4, 2833.0], [17.5, 2840.0], [17.6, 2849.0], [17.7, 2857.0], [17.8, 2863.0], [17.9, 2870.0], [18.0, 2877.0], [18.1, 2883.0], [18.2, 2891.0], [18.3, 2900.0], [18.4, 2905.0], [18.5, 2913.0], [18.6, 2916.0], [18.7, 2923.0], [18.8, 2929.0], [18.9, 2942.0], [19.0, 2951.0], [19.1, 2956.0], [19.2, 2964.0], [19.3, 2970.0], [19.4, 2970.0], [19.5, 2977.0], [19.6, 2984.0], [19.7, 2991.0], [19.8, 3000.0], [19.9, 3005.0], [20.0, 3012.0], [20.1, 3021.0], [20.2, 3027.0], [20.3, 3034.0], [20.4, 3041.0], [20.5, 3047.0], [20.6, 3801.0], [20.7, 3821.0], [20.8, 3836.0], [20.9, 3842.0], [21.0, 3849.0], [21.1, 3857.0], [21.2, 3864.0], [21.3, 3874.0], [21.4, 3881.0], [21.5, 3889.0], [21.6, 3899.0], [21.7, 3906.0], [21.8, 3914.0], [21.9, 3918.0], [22.0, 3927.0], [22.1, 3936.0], [22.2, 3945.0], [22.3, 3947.0], [22.4, 3958.0], [22.5, 3966.0], [22.6, 3975.0], [22.7, 3982.0], [22.8, 3993.0], [22.9, 4000.0], [23.0, 4005.0], [23.1, 4014.0], [23.2, 4023.0], [23.3, 4031.0], [23.4, 4042.0], [23.5, 4044.0], [23.6, 4056.0], [23.7, 4069.0], [23.8, 4087.0], [23.9, 4092.0], [24.0, 4098.0], [24.1, 4104.0], [24.2, 4117.0], [24.3, 4121.0], [24.4, 4125.0], [24.5, 4133.0], [24.6, 4142.0], [24.7, 4147.0], [24.8, 4157.0], [24.9, 4164.0], [25.0, 4169.0], [25.1, 4180.0], [25.2, 4186.0], [25.3, 4191.0], [25.4, 4202.0], [25.5, 4214.0], [25.6, 4214.0], [25.7, 4217.0], [25.8, 4230.0], [25.9, 4234.0], [26.0, 4257.0], [26.1, 4257.0], [26.2, 4263.0], [26.3, 4265.0], [26.4, 4271.0], [26.5, 4697.0], [26.6, 4716.0], [26.7, 4723.0], [26.8, 4725.0], [26.9, 4730.0], [27.0, 4780.0], [27.1, 4783.0], [27.2, 4788.0], [27.3, 4791.0], [27.4, 4798.0], [27.5, 4804.0], [27.6, 4806.0], [27.7, 4818.0], [27.8, 4826.0], [27.9, 4833.0], [28.0, 4834.0], [28.1, 4843.0], [28.2, 4850.0], [28.3, 6783.0], [28.4, 6795.0], [28.5, 6802.0], [28.6, 6808.0], [28.7, 6816.0], [28.8, 6823.0], [28.9, 6834.0], [29.0, 6840.0], [29.1, 6847.0], [29.2, 6852.0], [29.3, 6857.0], [29.4, 6861.0], [29.5, 6873.0], [29.6, 6884.0], [29.7, 6896.0], [29.8, 6899.0], [29.9, 6903.0], [30.0, 6907.0], [30.1, 6915.0], [30.2, 6922.0], [30.3, 6923.0], [30.4, 6944.0], [30.5, 6948.0], [30.6, 6949.0], [30.7, 6951.0], [30.8, 6954.0], [30.9, 6973.0], [31.0, 6980.0], [31.1, 6983.0], [31.2, 6988.0], [31.3, 6994.0], [31.4, 7003.0], [31.5, 7008.0], [31.6, 7015.0], [31.7, 7021.0], [31.8, 7026.0], [31.9, 7036.0], [32.0, 7043.0], [32.1, 7050.0], [32.2, 7056.0], [32.3, 7061.0], [32.4, 7069.0], [32.5, 7077.0], [32.6, 7082.0], [32.7, 7089.0], [32.8, 7097.0], [32.9, 7103.0], [33.0, 7107.0], [33.1, 7113.0], [33.2, 7119.0], [33.3, 7121.0], [33.4, 7127.0], [33.5, 7136.0], [33.6, 7136.0], [33.7, 7152.0], [33.8, 7162.0], [33.9, 7170.0], [34.0, 7177.0], [34.1, 7182.0], [34.2, 7192.0], [34.3, 7195.0], [34.4, 7204.0], [34.5, 7210.0], [34.6, 7219.0], [34.7, 7224.0], [34.8, 7231.0], [34.9, 7241.0], [35.0, 7249.0], [35.1, 7255.0], [35.2, 7262.0], [35.3, 7268.0], [35.4, 7276.0], [35.5, 7282.0], [35.6, 7288.0], [35.7, 7295.0], [35.8, 7304.0], [35.9, 7309.0], [36.0, 7315.0], [36.1, 7324.0], [36.2, 7328.0], [36.3, 7336.0], [36.4, 7345.0], [36.5, 7348.0], [36.6, 7355.0], [36.7, 7363.0], [36.8, 7369.0], [36.9, 7375.0], [37.0, 7383.0], [37.1, 7388.0], [37.2, 7394.0], [37.3, 7401.0], [37.4, 7407.0], [37.5, 7413.0], [37.6, 7420.0], [37.7, 7427.0], [37.8, 7432.0], [37.9, 7441.0], [38.0, 7447.0], [38.1, 7452.0], [38.2, 7460.0], [38.3, 7466.0], [38.4, 7472.0], [38.5, 7479.0], [38.6, 7485.0], [38.7, 7491.0], [38.8, 7498.0], [38.9, 7504.0], [39.0, 7511.0], [39.1, 7517.0], [39.2, 7524.0], [39.3, 7528.0], [39.4, 7535.0], [39.5, 7543.0], [39.6, 7549.0], [39.7, 7554.0], [39.8, 7563.0], [39.9, 7569.0], [40.0, 7573.0], [40.1, 7583.0], [40.2, 7605.0], [40.3, 7613.0], [40.4, 7620.0], [40.5, 7627.0], [40.6, 7634.0], [40.7, 7640.0], [40.8, 7643.0], [40.9, 7644.0], [41.0, 7660.0], [41.1, 7667.0], [41.2, 7674.0], [41.3, 7680.0], [41.4, 7688.0], [41.5, 7691.0], [41.6, 7699.0], [41.7, 7704.0], [41.8, 7713.0], [41.9, 7718.0], [42.0, 7726.0], [42.1, 7731.0], [42.2, 7738.0], [42.3, 7747.0], [42.4, 7753.0], [42.5, 7761.0], [42.6, 7763.0], [42.7, 7772.0], [42.8, 7778.0], [42.9, 7778.0], [43.0, 7787.0], [43.1, 7797.0], [43.2, 7809.0], [43.3, 7820.0], [43.4, 7823.0], [43.5, 7823.0], [43.6, 7829.0], [43.7, 7839.0], [43.8, 7849.0], [43.9, 7856.0], [44.0, 7863.0], [44.1, 7868.0], [44.2, 7876.0], [44.3, 7884.0], [44.4, 7890.0], [44.5, 7897.0], [44.6, 7903.0], [44.7, 7910.0], [44.8, 7918.0], [44.9, 7924.0], [45.0, 7932.0], [45.1, 7937.0], [45.2, 7944.0], [45.3, 7948.0], [45.4, 7956.0], [45.5, 7964.0], [45.6, 7972.0], [45.7, 7980.0], [45.8, 7984.0], [45.9, 7994.0], [46.0, 7999.0], [46.1, 8005.0], [46.2, 8012.0], [46.3, 8019.0], [46.4, 8027.0], [46.5, 8034.0], [46.6, 8040.0], [46.7, 8048.0], [46.8, 8055.0], [46.9, 8062.0], [47.0, 8067.0], [47.1, 8074.0], [47.2, 8082.0], [47.3, 8089.0], [47.4, 8095.0], [47.5, 8101.0], [47.6, 8106.0], [47.7, 8114.0], [47.8, 8121.0], [47.9, 8128.0], [48.0, 8136.0], [48.1, 8144.0], [48.2, 8150.0], [48.3, 8155.0], [48.4, 8166.0], [48.5, 8171.0], [48.6, 8175.0], [48.7, 8186.0], [48.8, 8191.0], [48.9, 8198.0], [49.0, 8205.0], [49.1, 8212.0], [49.2, 8218.0], [49.3, 8225.0], [49.4, 8232.0], [49.5, 8241.0], [49.6, 8246.0], [49.7, 8255.0], [49.8, 8261.0], [49.9, 8269.0], [50.0, 8275.0], [50.1, 8282.0], [50.2, 8289.0], [50.3, 8297.0], [50.4, 8304.0], [50.5, 8310.0], [50.6, 8316.0], [50.7, 8319.0], [50.8, 8322.0], [50.9, 8326.0], [51.0, 8330.0], [51.1, 8345.0], [51.2, 8357.0], [51.3, 8369.0], [51.4, 8374.0], [51.5, 8383.0], [51.6, 8389.0], [51.7, 8396.0], [51.8, 8402.0], [51.9, 8403.0], [52.0, 8416.0], [52.1, 8426.0], [52.2, 8432.0], [52.3, 8438.0], [52.4, 8438.0], [52.5, 8438.0], [52.6, 8444.0], [52.7, 8470.0], [52.8, 8478.0], [52.9, 8485.0], [53.0, 8491.0], [53.1, 8498.0], [53.2, 8500.0], [53.3, 8508.0], [53.4, 8508.0], [53.5, 8523.0], [53.6, 8532.0], [53.7, 8537.0], [53.8, 8539.0], [53.9, 8542.0], [54.0, 8547.0], [54.1, 8558.0], [54.2, 8570.0], [54.3, 8583.0], [54.4, 9276.0], [54.5, 9302.0], [54.6, 9351.0], [54.7, 9352.0], [54.8, 9357.0], [54.9, 9358.0], [55.0, 9365.0], [55.1, 9366.0], [55.2, 9372.0], [55.3, 9376.0], [55.4, 9384.0], [55.5, 9393.0], [55.6, 9399.0], [55.7, 9406.0], [55.8, 9411.0], [55.9, 9419.0], [56.0, 9428.0], [56.1, 9434.0], [56.2, 9440.0], [56.3, 9446.0], [56.4, 9452.0], [56.5, 9459.0], [56.6, 9466.0], [56.7, 9473.0], [56.8, 9481.0], [56.9, 9487.0], [57.0, 9493.0], [57.1, 9500.0], [57.2, 9504.0], [57.3, 9511.0], [57.4, 9519.0], [57.5, 9526.0], [57.6, 9533.0], [57.7, 9540.0], [57.8, 9545.0], [57.9, 9552.0], [58.0, 9561.0], [58.1, 9569.0], [58.2, 9573.0], [58.3, 9581.0], [58.4, 9585.0], [58.5, 9591.0], [58.6, 9598.0], [58.7, 9606.0], [58.8, 9612.0], [58.9, 9621.0], [59.0, 9626.0], [59.1, 9635.0], [59.2, 9642.0], [59.3, 9648.0], [59.4, 9654.0], [59.5, 9661.0], [59.6, 9670.0], [59.7, 9676.0], [59.8, 9683.0], [59.9, 9693.0], [60.0, 9699.0], [60.1, 9708.0], [60.2, 9714.0], [60.3, 9720.0], [60.4, 9728.0], [60.5, 9733.0], [60.6, 9738.0], [60.7, 9746.0], [60.8, 9752.0], [60.9, 9759.0], [61.0, 9767.0], [61.1, 9769.0], [61.2, 9775.0], [61.3, 9788.0], [61.4, 9793.0], [61.5, 9801.0], [61.6, 9808.0], [61.7, 9813.0], [61.8, 9819.0], [61.9, 9827.0], [62.0, 9835.0], [62.1, 9841.0], [62.2, 9847.0], [62.3, 9855.0], [62.4, 9861.0], [62.5, 9869.0], [62.6, 9874.0], [62.7, 9884.0], [62.8, 9890.0], [62.9, 9898.0], [63.0, 9905.0], [63.1, 9913.0], [63.2, 9918.0], [63.3, 9925.0], [63.4, 9931.0], [63.5, 9936.0], [63.6, 9945.0], [63.7, 9949.0], [63.8, 9954.0], [63.9, 9971.0], [64.0, 9977.0], [64.1, 9979.0], [64.2, 9987.0], [64.3, 9991.0], [64.4, 9998.0], [64.5, 10005.0], [64.6, 10012.0], [64.7, 10021.0], [64.8, 10027.0], [64.9, 10036.0], [65.0, 10043.0], [65.1, 10051.0], [65.2, 10058.0], [65.3, 10065.0], [65.4, 10073.0], [65.5, 10077.0], [65.6, 10085.0], [65.7, 10093.0], [65.8, 10093.0], [65.9, 10099.0], [66.0, 10108.0], [66.1, 10119.0], [66.2, 10120.0], [66.3, 10127.0], [66.4, 10142.0], [66.5, 10165.0], [66.6, 10169.0], [66.7, 10172.0], [66.8, 10178.0], [66.9, 10180.0], [67.0, 10183.0], [67.1, 10203.0], [67.2, 10207.0], [67.3, 10207.0], [67.4, 10208.0], [67.5, 10233.0], [67.6, 10234.0], [67.7, 10239.0], [67.8, 10244.0], [67.9, 10253.0], [68.0, 10258.0], [68.1, 10266.0], [68.2, 10274.0], [68.3, 10282.0], [68.4, 10285.0], [68.5, 10813.0], [68.6, 10820.0], [68.7, 10826.0], [68.8, 10834.0], [68.9, 10838.0], [69.0, 10843.0], [69.1, 10861.0], [69.2, 10866.0], [69.3, 10870.0], [69.4, 10877.0], [69.5, 10884.0], [69.6, 10891.0], [69.7, 10903.0], [69.8, 10907.0], [69.9, 10912.0], [70.0, 10921.0], [70.1, 10928.0], [70.2, 10933.0], [70.3, 10941.0], [70.4, 10947.0], [70.5, 10955.0], [70.6, 10960.0], [70.7, 10972.0], [70.8, 10984.0], [70.9, 10991.0], [71.0, 11000.0], [71.1, 11010.0], [71.2, 11012.0], [71.3, 11015.0], [71.4, 11029.0], [71.5, 11039.0], [71.6, 11608.0], [71.7, 11617.0], [71.8, 11623.0], [71.9, 11632.0], [72.0, 11640.0], [72.1, 11647.0], [72.2, 11655.0], [72.3, 11662.0], [72.4, 11665.0], [72.5, 11669.0], [72.6, 11695.0], [72.7, 11698.0], [72.8, 11700.0], [72.9, 11702.0], [73.0, 11726.0], [73.1, 11729.0], [73.2, 11735.0], [73.3, 11740.0], [73.4, 11748.0], [73.5, 11754.0], [73.6, 11762.0], [73.7, 11771.0], [73.8, 11775.0], [73.9, 11791.0], [74.0, 11793.0], [74.1, 11796.0], [74.2, 11806.0], [74.3, 11812.0], [74.4, 11819.0], [74.5, 11823.0], [74.6, 11831.0], [74.7, 11840.0], [74.8, 11845.0], [74.9, 11852.0], [75.0, 11860.0], [75.1, 11865.0], [75.2, 11879.0], [75.3, 11888.0], [75.4, 11894.0], [75.5, 11901.0], [75.6, 11908.0], [75.7, 11913.0], [75.8, 12671.0], [75.9, 12681.0], [76.0, 12687.0], [76.1, 12693.0], [76.2, 12706.0], [76.3, 12709.0], [76.4, 12717.0], [76.5, 12724.0], [76.6, 12748.0], [76.7, 12754.0], [76.8, 12756.0], [76.9, 12761.0], [77.0, 12762.0], [77.1, 12770.0], [77.2, 12775.0], [77.3, 12791.0], [77.4, 12806.0], [77.5, 12811.0], [77.6, 12818.0], [77.7, 12819.0], [77.8, 12826.0], [77.9, 12834.0], [78.0, 12835.0], [78.1, 12841.0], [78.2, 12849.0], [78.3, 12863.0], [78.4, 12875.0], [78.5, 12878.0], [78.6, 12881.0], [78.7, 12889.0], [78.8, 12895.0], [78.9, 12903.0], [79.0, 12906.0], [79.1, 12911.0], [79.2, 12930.0], [79.3, 12934.0], [79.4, 12938.0], [79.5, 12947.0], [79.6, 12952.0], [79.7, 12959.0], [79.8, 12965.0], [79.9, 12975.0], [80.0, 12982.0], [80.1, 12987.0], [80.2, 12999.0], [80.3, 13005.0], [80.4, 13013.0], [80.5, 13021.0], [80.6, 13028.0], [80.7, 13036.0], [80.8, 13043.0], [80.9, 13047.0], [81.0, 13054.0], [81.1, 13060.0], [81.2, 13067.0], [81.3, 13068.0], [81.4, 13080.0], [81.5, 13087.0], [81.6, 13094.0], [81.7, 13102.0], [81.8, 13109.0], [81.9, 13117.0], [82.0, 13123.0], [82.1, 13128.0], [82.2, 13137.0], [82.3, 13143.0], [82.4, 13152.0], [82.5, 13155.0], [82.6, 13165.0], [82.7, 13171.0], [82.8, 13182.0], [82.9, 13189.0], [83.0, 13197.0], [83.1, 13201.0], [83.2, 13201.0], [83.3, 13228.0], [83.4, 13229.0], [83.5, 13236.0], [83.6, 13242.0], [83.7, 13250.0], [83.8, 13255.0], [83.9, 13265.0], [84.0, 13270.0], [84.1, 13277.0], [84.2, 13285.0], [84.3, 13291.0], [84.4, 13292.0], [84.5, 13311.0], [84.6, 13313.0], [84.7, 13317.0], [84.8, 13334.0], [84.9, 13339.0], [85.0, 13340.0], [85.1, 13347.0], [85.2, 13355.0], [85.3, 13359.0], [85.4, 13370.0], [85.5, 13377.0], [85.6, 13927.0], [85.7, 13944.0], [85.8, 13953.0], [85.9, 13967.0], [86.0, 13969.0], [86.1, 13978.0], [86.2, 14002.0], [86.3, 14317.0], [86.4, 14320.0], [86.5, 14345.0], [86.6, 14345.0], [86.7, 14352.0], [86.8, 14355.0], [86.9, 14360.0], [87.0, 14367.0], [87.1, 14383.0], [87.2, 14500.0], [87.3, 14618.0], [87.4, 14620.0], [87.5, 14632.0], [87.6, 14645.0], [87.7, 22237.0], [87.8, 22247.0], [87.9, 22250.0], [88.0, 22255.0], [88.1, 22277.0], [88.2, 22284.0], [88.3, 22286.0], [88.4, 22293.0], [88.5, 22300.0], [88.6, 22310.0], [88.7, 22317.0], [88.8, 22329.0], [88.9, 22332.0], [89.0, 22335.0], [89.1, 22341.0], [89.2, 22364.0], [89.3, 22367.0], [89.4, 22368.0], [89.5, 22373.0], [89.6, 22378.0], [89.7, 22410.0], [89.8, 22416.0], [89.9, 22425.0], [90.0, 22429.0], [90.1, 22433.0], [90.2, 22437.0], [90.3, 22448.0], [90.4, 22458.0], [90.5, 22466.0], [90.6, 22475.0], [90.7, 22482.0], [90.8, 22490.0], [90.9, 22498.0], [91.0, 22503.0], [91.1, 22513.0], [91.2, 22519.0], [91.3, 22525.0], [91.4, 22526.0], [91.5, 22530.0], [91.6, 22533.0], [91.7, 22578.0], [91.8, 22578.0], [91.9, 22587.0], [92.0, 22591.0], [92.1, 22594.0], [92.2, 22602.0], [92.3, 22611.0], [92.4, 22619.0], [92.5, 22626.0], [92.6, 22629.0], [92.7, 22635.0], [92.8, 22642.0], [92.9, 22667.0], [93.0, 22675.0], [93.1, 22675.0], [93.2, 22681.0], [93.3, 22683.0], [93.4, 22699.0], [93.5, 22705.0], [93.6, 22708.0], [93.7, 22712.0], [93.8, 22724.0], [93.9, 22738.0], [94.0, 22757.0], [94.1, 22763.0], [94.2, 22764.0], [94.3, 22773.0], [94.4, 22780.0], [94.5, 22787.0], [94.6, 22796.0], [94.7, 22804.0], [94.8, 22810.0], [94.9, 22813.0], [95.0, 22815.0], [95.1, 22836.0], [95.2, 22837.0], [95.3, 22842.0], [95.4, 22852.0], [95.5, 22859.0], [95.6, 22870.0], [95.7, 22881.0], [95.8, 22883.0], [95.9, 22884.0], [96.0, 22888.0], [96.1, 22934.0], [96.2, 22941.0], [96.3, 22947.0], [96.4, 22954.0], [96.5, 22958.0], [96.6, 22959.0], [96.7, 22960.0], [96.8, 22986.0], [96.9, 22991.0], [97.0, 23005.0], [97.1, 23014.0], [97.2, 23018.0], [97.3, 23020.0], [97.4, 23026.0], [97.5, 23029.0], [97.6, 23033.0], [97.7, 23070.0], [97.8, 23116.0], [97.9, 23125.0], [98.0, 23130.0], [98.1, 23138.0], [98.2, 23139.0], [98.3, 23144.0], [98.4, 23154.0], [98.5, 23166.0], [98.6, 23178.0], [98.7, 23200.0], [98.8, 23338.0], [98.9, 23345.0], [99.0, 23354.0], [99.1, 23373.0], [99.2, 23381.0], [99.3, 23382.0], [99.4, 23383.0], [99.5, 23395.0], [99.6, 23418.0], [99.7, 23422.0], [99.8, 23597.0], [99.9, 23599.0]], "isOverall": false, "label": "Home", "isController": false}, {"data": [[0.0, 588.0], [0.1, 590.0], [0.2, 592.0], [0.3, 592.0], [0.4, 595.0], [0.5, 597.0], [0.6, 598.0], [0.7, 599.0], [0.8, 826.0], [0.9, 827.0], [1.0, 831.0], [1.1, 969.0], [1.2, 989.0], [1.3, 994.0], [1.4, 994.0], [1.5, 997.0], [1.6, 998.0], [1.7, 1000.0], [1.8, 1001.0], [1.9, 1002.0], [2.0, 1003.0], [2.1, 1010.0], [2.2, 1145.0], [2.3, 1162.0], [2.4, 1163.0], [2.5, 1166.0], [2.6, 1166.0], [2.7, 1170.0], [2.8, 1171.0], [2.9, 1172.0], [3.0, 1174.0], [3.1, 1175.0], [3.2, 1177.0], [3.3, 1340.0], [3.4, 1342.0], [3.5, 1343.0], [3.6, 1344.0], [3.7, 1346.0], [3.8, 1346.0], [3.9, 1348.0], [4.0, 1349.0], [4.1, 1351.0], [4.2, 1352.0], [4.3, 1354.0], [4.4, 1510.0], [4.5, 1514.0], [4.6, 1515.0], [4.7, 1515.0], [4.8, 1516.0], [4.9, 1519.0], [5.0, 1519.0], [5.1, 1521.0], [5.2, 1522.0], [5.3, 1526.0], [5.4, 1529.0], [5.5, 1530.0], [5.6, 1533.0], [5.7, 1537.0], [5.8, 1538.0], [5.9, 1540.0], [6.0, 1540.0], [6.1, 1542.0], [6.2, 1546.0], [6.3, 1547.0], [6.4, 1549.0], [6.5, 1608.0], [6.6, 1616.0], [6.7, 1638.0], [6.8, 1639.0], [6.9, 1643.0], [7.0, 1643.0], [7.1, 1643.0], [7.2, 1643.0], [7.3, 1644.0], [7.4, 1644.0], [7.5, 1645.0], [7.6, 1645.0], [7.7, 1646.0], [7.8, 1646.0], [7.9, 1647.0], [8.0, 1647.0], [8.1, 1648.0], [8.2, 1648.0], [8.3, 1649.0], [8.4, 1651.0], [8.5, 1652.0], [8.6, 1652.0], [8.7, 1653.0], [8.8, 1653.0], [8.9, 1655.0], [9.0, 1655.0], [9.1, 1655.0], [9.2, 1655.0], [9.3, 1655.0], [9.4, 1656.0], [9.5, 1656.0], [9.6, 1656.0], [9.7, 1657.0], [9.8, 1657.0], [9.9, 1659.0], [10.0, 1660.0], [10.1, 1668.0], [10.2, 1677.0], [10.3, 1677.0], [10.4, 1679.0], [10.5, 1681.0], [10.6, 1681.0], [10.7, 1684.0], [10.8, 1690.0], [10.9, 1691.0], [11.0, 1695.0], [11.1, 1697.0], [11.2, 1699.0], [11.3, 1699.0], [11.4, 1699.0], [11.5, 1701.0], [11.6, 1701.0], [11.7, 1703.0], [11.8, 1704.0], [11.9, 1705.0], [12.0, 1705.0], [12.1, 1707.0], [12.2, 1708.0], [12.3, 1709.0], [12.4, 1711.0], [12.5, 1713.0], [12.6, 1713.0], [12.7, 1713.0], [12.8, 1714.0], [12.9, 1716.0], [13.0, 1719.0], [13.1, 1721.0], [13.2, 1721.0], [13.3, 1722.0], [13.4, 1723.0], [13.5, 1725.0], [13.6, 1726.0], [13.7, 1727.0], [13.8, 1728.0], [13.9, 1754.0], [14.0, 1866.0], [14.1, 1867.0], [14.2, 1869.0], [14.3, 1875.0], [14.4, 1876.0], [14.5, 1877.0], [14.6, 1877.0], [14.7, 1879.0], [14.8, 1880.0], [14.9, 1880.0], [15.0, 1880.0], [15.1, 1886.0], [15.2, 1886.0], [15.3, 1887.0], [15.4, 1889.0], [15.5, 1890.0], [15.6, 1890.0], [15.7, 1891.0], [15.8, 1892.0], [15.9, 1892.0], [16.0, 1894.0], [16.1, 1894.0], [16.2, 1897.0], [16.3, 1897.0], [16.4, 1898.0], [16.5, 1898.0], [16.6, 1899.0], [16.7, 1899.0], [16.8, 1900.0], [16.9, 1900.0], [17.0, 1901.0], [17.1, 1901.0], [17.2, 1902.0], [17.3, 1903.0], [17.4, 1903.0], [17.5, 1903.0], [17.6, 1904.0], [17.7, 1906.0], [17.8, 1907.0], [17.9, 1908.0], [18.0, 2013.0], [18.1, 2026.0], [18.2, 2026.0], [18.3, 2033.0], [18.4, 2033.0], [18.5, 2035.0], [18.6, 2036.0], [18.7, 2036.0], [18.8, 2038.0], [18.9, 2042.0], [19.0, 2042.0], [19.1, 2042.0], [19.2, 2043.0], [19.3, 2043.0], [19.4, 2045.0], [19.5, 2045.0], [19.6, 2052.0], [19.7, 2053.0], [19.8, 2056.0], [19.9, 2118.0], [20.0, 2120.0], [20.1, 2120.0], [20.2, 2126.0], [20.3, 2128.0], [20.4, 2128.0], [20.5, 2129.0], [20.6, 2130.0], [20.7, 2131.0], [20.8, 2132.0], [20.9, 2186.0], [21.0, 2187.0], [21.1, 2187.0], [21.2, 2194.0], [21.3, 2196.0], [21.4, 2197.0], [21.5, 2197.0], [21.6, 2201.0], [21.7, 2262.0], [21.8, 2263.0], [21.9, 2264.0], [22.0, 2265.0], [22.1, 2267.0], [22.2, 2267.0], [22.3, 2268.0], [22.4, 2270.0], [22.5, 2271.0], [22.6, 2277.0], [22.7, 2278.0], [22.8, 2279.0], [22.9, 2286.0], [23.0, 2863.0], [23.1, 2863.0], [23.2, 2863.0], [23.3, 2865.0], [23.4, 2865.0], [23.5, 2865.0], [23.6, 2866.0], [23.7, 2866.0], [23.8, 2866.0], [23.9, 2867.0], [24.0, 2868.0], [24.1, 2870.0], [24.2, 2871.0], [24.3, 2872.0], [24.4, 2875.0], [24.5, 2875.0], [24.6, 2880.0], [24.7, 2880.0], [24.8, 2882.0], [24.9, 2905.0], [25.0, 2939.0], [25.1, 2939.0], [25.2, 2940.0], [25.3, 2946.0], [25.4, 2990.0], [25.5, 3046.0], [25.6, 3051.0], [25.7, 3051.0], [25.8, 3053.0], [25.9, 3054.0], [26.0, 3055.0], [26.1, 3056.0], [26.2, 3884.0], [26.3, 3885.0], [26.4, 3885.0], [26.5, 3886.0], [26.6, 3886.0], [26.7, 3887.0], [26.8, 3887.0], [26.9, 3888.0], [27.0, 3888.0], [27.1, 3889.0], [27.2, 3889.0], [27.3, 3890.0], [27.4, 3890.0], [27.5, 3891.0], [27.6, 3891.0], [27.7, 3892.0], [27.8, 3892.0], [27.9, 3892.0], [28.0, 3893.0], [28.1, 3893.0], [28.2, 3894.0], [28.3, 3934.0], [28.4, 3942.0], [28.5, 3942.0], [28.6, 3942.0], [28.7, 3942.0], [28.8, 3944.0], [28.9, 3944.0], [29.0, 3944.0], [29.1, 3944.0], [29.2, 3944.0], [29.3, 3945.0], [29.4, 3945.0], [29.5, 3945.0], [29.6, 3946.0], [29.7, 3946.0], [29.8, 3946.0], [29.9, 3947.0], [30.0, 3947.0], [30.1, 3947.0], [30.2, 3948.0], [30.3, 3948.0], [30.4, 3948.0], [30.5, 3948.0], [30.6, 3948.0], [30.7, 3949.0], [30.8, 3949.0], [30.9, 3949.0], [31.0, 3949.0], [31.1, 3949.0], [31.2, 3950.0], [31.3, 3950.0], [31.4, 3951.0], [31.5, 3952.0], [31.6, 3954.0], [31.7, 4323.0], [31.8, 4327.0], [31.9, 4328.0], [32.0, 4329.0], [32.1, 4329.0], [32.2, 4330.0], [32.3, 4707.0], [32.4, 4708.0], [32.5, 4727.0], [32.6, 4727.0], [32.7, 4731.0], [32.8, 4732.0], [32.9, 4913.0], [33.0, 4920.0], [33.1, 4933.0], [33.2, 4935.0], [33.3, 4935.0], [33.4, 4937.0], [33.5, 4937.0], [33.6, 4937.0], [33.7, 4938.0], [33.8, 4938.0], [33.9, 4938.0], [34.0, 4938.0], [34.1, 4939.0], [34.2, 4939.0], [34.3, 4939.0], [34.4, 4939.0], [34.5, 4939.0], [34.6, 4940.0], [34.7, 4940.0], [34.8, 4940.0], [34.9, 4940.0], [35.0, 4941.0], [35.1, 4941.0], [35.2, 4941.0], [35.3, 4943.0], [35.4, 4943.0], [35.5, 4946.0], [35.6, 4947.0], [35.7, 4948.0], [35.8, 4948.0], [35.9, 4949.0], [36.0, 4949.0], [36.1, 4949.0], [36.2, 4949.0], [36.3, 4952.0], [36.4, 4959.0], [36.5, 4979.0], [36.6, 5043.0], [36.7, 5047.0], [36.8, 5050.0], [36.9, 5051.0], [37.0, 5055.0], [37.1, 5056.0], [37.2, 5057.0], [37.3, 5059.0], [37.4, 5063.0], [37.5, 5067.0], [37.6, 5382.0], [37.7, 5383.0], [37.8, 5385.0], [37.9, 5386.0], [38.0, 5387.0], [38.1, 5389.0], [38.2, 5390.0], [38.3, 5391.0], [38.4, 5392.0], [38.5, 5393.0], [38.6, 5606.0], [38.7, 5610.0], [38.8, 5610.0], [38.9, 5611.0], [39.0, 5614.0], [39.1, 5615.0], [39.2, 5616.0], [39.3, 5620.0], [39.4, 5797.0], [39.5, 5799.0], [39.6, 5802.0], [39.7, 5802.0], [39.8, 7682.0], [39.9, 7682.0], [40.0, 7683.0], [40.1, 7684.0], [40.2, 7685.0], [40.3, 7687.0], [40.4, 7687.0], [40.5, 7688.0], [40.6, 7688.0], [40.7, 7692.0], [40.8, 7701.0], [40.9, 8451.0], [41.0, 8452.0], [41.1, 8452.0], [41.2, 8453.0], [41.3, 8453.0], [41.4, 8453.0], [41.5, 8453.0], [41.6, 8454.0], [41.7, 8454.0], [41.8, 8454.0], [41.9, 8454.0], [42.0, 8455.0], [42.1, 8455.0], [42.2, 8455.0], [42.3, 8455.0], [42.4, 8455.0], [42.5, 8455.0], [42.6, 8455.0], [42.7, 8456.0], [42.8, 8456.0], [42.9, 8456.0], [43.0, 8456.0], [43.1, 8456.0], [43.2, 8457.0], [43.3, 8457.0], [43.4, 8458.0], [43.5, 10344.0], [43.6, 10348.0], [43.7, 10350.0], [43.8, 10352.0], [43.9, 10352.0], [44.0, 10353.0], [44.1, 10353.0], [44.2, 10354.0], [44.3, 10355.0], [44.4, 10355.0], [44.5, 10356.0], [44.6, 10358.0], [44.7, 10358.0], [44.8, 11058.0], [44.9, 11060.0], [45.0, 11061.0], [45.1, 11061.0], [45.2, 11061.0], [45.3, 11062.0], [45.4, 11063.0], [45.5, 11063.0], [45.6, 11063.0], [45.7, 11064.0], [45.8, 11064.0], [45.9, 11064.0], [46.0, 11065.0], [46.1, 11066.0], [46.2, 11067.0], [46.3, 11071.0], [46.4, 11072.0], [46.5, 11074.0], [46.6, 11079.0], [46.7, 11085.0], [46.8, 11091.0], [46.9, 11104.0], [47.0, 11575.0], [47.1, 11576.0], [47.2, 11576.0], [47.3, 11577.0], [47.4, 11577.0], [47.5, 11577.0], [47.6, 11577.0], [47.7, 11577.0], [47.8, 11577.0], [47.9, 11578.0], [48.0, 11580.0], [48.1, 11581.0], [48.2, 11582.0], [48.3, 11582.0], [48.4, 11582.0], [48.5, 11584.0], [48.6, 11588.0], [48.7, 11590.0], [48.8, 12003.0], [48.9, 12006.0], [49.0, 12010.0], [49.1, 12014.0], [49.2, 12017.0], [49.3, 12018.0], [49.4, 12018.0], [49.5, 12018.0], [49.6, 12024.0], [49.7, 12025.0], [49.8, 12027.0], [49.9, 12027.0], [50.0, 12028.0], [50.1, 12794.0], [50.2, 12795.0], [50.3, 12797.0], [50.4, 12800.0], [50.5, 12803.0], [50.6, 12807.0], [50.7, 12965.0], [50.8, 12967.0], [50.9, 12968.0], [51.0, 12971.0], [51.1, 12973.0], [51.2, 12974.0], [51.3, 12978.0], [51.4, 12978.0], [51.5, 12980.0], [51.6, 12981.0], [51.7, 13063.0], [51.8, 13066.0], [51.9, 13068.0], [52.0, 13070.0], [52.1, 13072.0], [52.2, 13073.0], [52.3, 13074.0], [52.4, 13074.0], [52.5, 13075.0], [52.6, 13077.0], [52.7, 13237.0], [52.8, 13242.0], [52.9, 13244.0], [53.0, 13245.0], [53.1, 13246.0], [53.2, 13248.0], [53.3, 13250.0], [53.4, 13253.0], [53.5, 13253.0], [53.6, 13262.0], [53.7, 13544.0], [53.8, 13546.0], [53.9, 13548.0], [54.0, 13551.0], [54.1, 13552.0], [54.2, 13554.0], [54.3, 13555.0], [54.4, 13556.0], [54.5, 13557.0], [54.6, 13559.0], [54.7, 13559.0], [54.8, 13562.0], [54.9, 13562.0], [55.0, 13562.0], [55.1, 13565.0], [55.2, 13566.0], [55.3, 13567.0], [55.4, 13568.0], [55.5, 13570.0], [55.6, 13572.0], [55.7, 13574.0], [55.8, 13578.0], [55.9, 13579.0], [56.0, 13584.0], [56.1, 13586.0], [56.2, 13588.0], [56.3, 13589.0], [56.4, 13590.0], [56.5, 13591.0], [56.6, 13593.0], [56.7, 13593.0], [56.8, 13593.0], [56.9, 13594.0], [57.0, 13596.0], [57.1, 13598.0], [57.2, 13600.0], [57.3, 13602.0], [57.4, 13603.0], [57.5, 13604.0], [57.6, 13604.0], [57.7, 13606.0], [57.8, 13606.0], [57.9, 13606.0], [58.0, 13611.0], [58.1, 13612.0], [58.2, 13613.0], [58.3, 13615.0], [58.4, 13615.0], [58.5, 13615.0], [58.6, 13616.0], [58.7, 13616.0], [58.8, 13616.0], [58.9, 13618.0], [59.0, 13618.0], [59.1, 13619.0], [59.2, 13619.0], [59.3, 13620.0], [59.4, 13620.0], [59.5, 13620.0], [59.6, 13622.0], [59.7, 13622.0], [59.8, 13622.0], [59.9, 13622.0], [60.0, 13623.0], [60.1, 13623.0], [60.2, 13625.0], [60.3, 13625.0], [60.4, 13626.0], [60.5, 13626.0], [60.6, 13627.0], [60.7, 13629.0], [60.8, 13629.0], [60.9, 13631.0], [61.0, 13631.0], [61.1, 13633.0], [61.2, 13633.0], [61.3, 13634.0], [61.4, 13635.0], [61.5, 13636.0], [61.6, 13637.0], [61.7, 13639.0], [61.8, 13639.0], [61.9, 13640.0], [62.0, 13640.0], [62.1, 13641.0], [62.2, 13643.0], [62.3, 13643.0], [62.4, 13643.0], [62.5, 13646.0], [62.6, 13646.0], [62.7, 13646.0], [62.8, 13646.0], [62.9, 13646.0], [63.0, 13647.0], [63.1, 13647.0], [63.2, 13648.0], [63.3, 13649.0], [63.4, 13650.0], [63.5, 13651.0], [63.6, 13652.0], [63.7, 13652.0], [63.8, 13653.0], [63.9, 13653.0], [64.0, 13654.0], [64.1, 13657.0], [64.2, 13659.0], [64.3, 13661.0], [64.4, 13662.0], [64.5, 13663.0], [64.6, 13666.0], [64.7, 13668.0], [64.8, 13670.0], [64.9, 13671.0], [65.0, 13673.0], [65.1, 13772.0], [65.2, 13772.0], [65.3, 13775.0], [65.4, 13778.0], [65.5, 13778.0], [65.6, 13779.0], [65.7, 13780.0], [65.8, 13783.0], [65.9, 13784.0], [66.0, 13785.0], [66.1, 13903.0], [66.2, 13906.0], [66.3, 13907.0], [66.4, 13908.0], [66.5, 13911.0], [66.6, 13913.0], [66.7, 13913.0], [66.8, 13915.0], [66.9, 13915.0], [67.0, 13915.0], [67.1, 14031.0], [67.2, 14037.0], [67.3, 14038.0], [67.4, 14038.0], [67.5, 14038.0], [67.6, 14040.0], [67.7, 14041.0], [67.8, 14042.0], [67.9, 14043.0], [68.0, 14045.0], [68.1, 14046.0], [68.2, 14048.0], [68.3, 14048.0], [68.4, 14049.0], [68.5, 14052.0], [68.6, 14055.0], [68.7, 14057.0], [68.8, 14058.0], [68.9, 14059.0], [69.0, 14060.0], [69.1, 14061.0], [69.2, 14061.0], [69.3, 14063.0], [69.4, 14067.0], [69.5, 14068.0], [69.6, 14068.0], [69.7, 14069.0], [69.8, 14070.0], [69.9, 14074.0], [70.0, 14078.0], [70.1, 14082.0], [70.2, 14088.0], [70.3, 14089.0], [70.4, 14090.0], [70.5, 14091.0], [70.6, 14091.0], [70.7, 14092.0], [70.8, 14093.0], [70.9, 14093.0], [71.0, 14094.0], [71.1, 14095.0], [71.2, 14095.0], [71.3, 14095.0], [71.4, 14097.0], [71.5, 14098.0], [71.6, 14099.0], [71.7, 14099.0], [71.8, 14099.0], [71.9, 14102.0], [72.0, 14103.0], [72.1, 14103.0], [72.2, 14103.0], [72.3, 14104.0], [72.4, 14104.0], [72.5, 14106.0], [72.6, 14108.0], [72.7, 14108.0], [72.8, 14109.0], [72.9, 14111.0], [73.0, 14113.0], [73.1, 14114.0], [73.2, 14117.0], [73.3, 14118.0], [73.4, 14119.0], [73.5, 14120.0], [73.6, 14120.0], [73.7, 14121.0], [73.8, 14121.0], [73.9, 14123.0], [74.0, 14124.0], [74.1, 14126.0], [74.2, 14127.0], [74.3, 14130.0], [74.4, 14130.0], [74.5, 14131.0], [74.6, 14133.0], [74.7, 14133.0], [74.8, 14137.0], [74.9, 14138.0], [75.0, 14140.0], [75.1, 14142.0], [75.2, 14143.0], [75.3, 14144.0], [75.4, 14145.0], [75.5, 14146.0], [75.6, 14148.0], [75.7, 14151.0], [75.8, 14151.0], [75.9, 14151.0], [76.0, 14154.0], [76.1, 14155.0], [76.2, 14155.0], [76.3, 14158.0], [76.4, 14158.0], [76.5, 14158.0], [76.6, 14160.0], [76.7, 14163.0], [76.8, 14164.0], [76.9, 14165.0], [77.0, 14165.0], [77.1, 14167.0], [77.2, 14168.0], [77.3, 14168.0], [77.4, 14168.0], [77.5, 14169.0], [77.6, 14170.0], [77.7, 14172.0], [77.8, 14173.0], [77.9, 14174.0], [78.0, 14175.0], [78.1, 14176.0], [78.2, 14180.0], [78.3, 14180.0], [78.4, 14181.0], [78.5, 14197.0], [78.6, 14201.0], [78.7, 14202.0], [78.8, 14204.0], [78.9, 14206.0], [79.0, 14207.0], [79.1, 14208.0], [79.2, 14210.0], [79.3, 14211.0], [79.4, 14212.0], [79.5, 14213.0], [79.6, 14213.0], [79.7, 14214.0], [79.8, 14215.0], [79.9, 14217.0], [80.0, 14218.0], [80.1, 14218.0], [80.2, 14222.0], [80.3, 14222.0], [80.4, 14222.0], [80.5, 14225.0], [80.6, 14226.0], [80.7, 14227.0], [80.8, 14228.0], [80.9, 14228.0], [81.0, 14229.0], [81.1, 14229.0], [81.2, 14232.0], [81.3, 14234.0], [81.4, 14234.0], [81.5, 14235.0], [81.6, 14239.0], [81.7, 14239.0], [81.8, 14241.0], [81.9, 14243.0], [82.0, 14243.0], [82.1, 14244.0], [82.2, 14246.0], [82.3, 14246.0], [82.4, 14246.0], [82.5, 14247.0], [82.6, 14248.0], [82.7, 14251.0], [82.8, 14252.0], [82.9, 14253.0], [83.0, 14254.0], [83.1, 14254.0], [83.2, 14254.0], [83.3, 14255.0], [83.4, 14255.0], [83.5, 14256.0], [83.6, 14258.0], [83.7, 14260.0], [83.8, 14260.0], [83.9, 14262.0], [84.0, 14262.0], [84.1, 14264.0], [84.2, 14265.0], [84.3, 14265.0], [84.4, 14269.0], [84.5, 14274.0], [84.6, 14274.0], [84.7, 14275.0], [84.8, 14278.0], [84.9, 14278.0], [85.0, 14279.0], [85.1, 14279.0], [85.2, 14282.0], [85.3, 14286.0], [85.4, 14286.0], [85.5, 15006.0], [85.6, 15009.0], [85.7, 15011.0], [85.8, 15013.0], [85.9, 15015.0], [86.0, 15126.0], [86.1, 15198.0], [86.2, 15198.0], [86.3, 15202.0], [86.4, 15203.0], [86.5, 15204.0], [86.6, 15208.0], [86.7, 15211.0], [86.8, 15212.0], [86.9, 15215.0], [87.0, 15216.0], [87.1, 15388.0], [87.2, 15390.0], [87.3, 15392.0], [87.4, 15393.0], [87.5, 15393.0], [87.6, 15395.0], [87.7, 15397.0], [87.8, 15399.0], [87.9, 15401.0], [88.0, 15402.0], [88.1, 15432.0], [88.2, 15433.0], [88.3, 15433.0], [88.4, 15434.0], [88.5, 15435.0], [88.6, 15437.0], [88.7, 15438.0], [88.8, 15440.0], [88.9, 15443.0], [89.0, 15445.0], [89.1, 15621.0], [89.2, 15621.0], [89.3, 15626.0], [89.4, 15627.0], [89.5, 15630.0], [89.6, 15634.0], [89.7, 15650.0], [89.8, 15653.0], [89.9, 15654.0], [90.0, 15658.0], [90.1, 15658.0], [90.2, 15659.0], [90.3, 15660.0], [90.4, 15660.0], [90.5, 15661.0], [90.6, 15661.0], [90.7, 15662.0], [90.8, 15662.0], [90.9, 15663.0], [91.0, 15664.0], [91.1, 15665.0], [91.2, 15666.0], [91.3, 15666.0], [91.4, 15667.0], [91.5, 15668.0], [91.6, 15669.0], [91.7, 15670.0], [91.8, 15671.0], [91.9, 15671.0], [92.0, 15673.0], [92.1, 15675.0], [92.2, 15675.0], [92.3, 15677.0], [92.4, 15681.0], [92.5, 15685.0], [92.6, 15686.0], [92.7, 15687.0], [92.8, 15688.0], [92.9, 15688.0], [93.0, 15688.0], [93.1, 15691.0], [93.2, 15694.0], [93.3, 15696.0], [93.4, 15699.0], [93.5, 15701.0], [93.6, 15744.0], [93.7, 15747.0], [93.8, 15748.0], [93.9, 15751.0], [94.0, 15751.0], [94.1, 15753.0], [94.2, 15754.0], [94.3, 15755.0], [94.4, 15755.0], [94.5, 15756.0], [94.6, 15757.0], [94.7, 15757.0], [94.8, 15757.0], [94.9, 15760.0], [95.0, 15760.0], [95.1, 15762.0], [95.2, 15764.0], [95.3, 15808.0], [95.4, 15812.0], [95.5, 15814.0], [95.6, 15816.0], [95.7, 15817.0], [95.8, 15820.0], [95.9, 15821.0], [96.0, 15824.0], [96.1, 15863.0], [96.2, 15863.0], [96.3, 16103.0], [96.4, 16139.0], [96.5, 16197.0], [96.6, 16199.0], [96.7, 16200.0], [96.8, 16200.0], [96.9, 16200.0], [97.0, 16204.0], [97.1, 16204.0], [97.2, 16205.0], [97.3, 16254.0], [97.4, 16272.0], [97.5, 16288.0], [97.6, 16366.0], [97.7, 16366.0], [97.8, 16368.0], [97.9, 16371.0], [98.0, 16371.0], [98.1, 16374.0], [98.2, 16375.0], [98.3, 16377.0], [98.4, 16377.0], [98.5, 16380.0], [98.6, 16417.0], [98.7, 16418.0], [98.8, 17439.0], [98.9, 17443.0], [99.0, 17447.0], [99.1, 20181.0], [99.2, 20198.0], [99.3, 20213.0], [99.4, 20325.0], [99.5, 20326.0], [99.6, 20326.0], [99.7, 20466.0], [99.8, 20468.0], [99.9, 20468.0]], "isOverall": false, "label": "Test Page", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 79.0, "series": [{"data": [[600.0, 4.0], [700.0, 4.0], [800.0, 7.0], [900.0, 13.0], [1000.0, 14.0], [1100.0, 13.0], [1200.0, 14.0], [1300.0, 9.0], [1500.0, 3.0], [1600.0, 3.0], [2400.0, 4.0], [2500.0, 14.0], [2600.0, 14.0], [2700.0, 14.0], [2800.0, 13.0], [2900.0, 14.0], [3000.0, 8.0], [3800.0, 11.0], [3900.0, 12.0], [4000.0, 12.0], [4100.0, 13.0], [4200.0, 11.0], [4600.0, 1.0], [4700.0, 9.0], [4800.0, 8.0], [6700.0, 2.0], [6800.0, 14.0], [6900.0, 15.0], [7000.0, 15.0], [7100.0, 15.0], [7200.0, 14.0], [7300.0, 15.0], [7400.0, 16.0], [7500.0, 13.0], [7600.0, 15.0], [7700.0, 15.0], [7800.0, 14.0], [7900.0, 15.0], [8000.0, 14.0], [8100.0, 15.0], [8200.0, 14.0], [8300.0, 14.0], [8400.0, 14.0], [8500.0, 12.0], [9200.0, 1.0], [9300.0, 12.0], [9400.0, 14.0], [9500.0, 16.0], [9600.0, 14.0], [9700.0, 14.0], [9800.0, 15.0], [9900.0, 15.0], [10000.0, 15.0], [10100.0, 11.0], [10200.0, 14.0], [10800.0, 12.0], [10900.0, 13.0], [11000.0, 6.0], [11600.0, 12.0], [11700.0, 14.0], [11800.0, 14.0], [11900.0, 3.0], [12600.0, 4.0], [12700.0, 12.0], [12800.0, 15.0], [12900.0, 14.0], [13000.0, 14.0], [13100.0, 14.0], [13200.0, 14.0], [13300.0, 11.0], [13900.0, 6.0], [14000.0, 1.0], [14300.0, 9.0], [14500.0, 1.0], [14600.0, 4.0], [22200.0, 8.0], [22300.0, 12.0], [22400.0, 13.0], [22500.0, 12.0], [23300.0, 8.0], [22600.0, 13.0], [22700.0, 12.0], [22800.0, 14.0], [22900.0, 9.0], [23000.0, 8.0], [23100.0, 9.0], [23200.0, 1.0], [23400.0, 2.0], [23500.0, 2.0], [100.0, 1.0], [200.0, 5.0], [300.0, 7.0], [400.0, 13.0], [500.0, 14.0]], "isOverall": false, "label": "Home", "isController": false}, {"data": [[800.0, 3.0], [900.0, 5.0], [1000.0, 5.0], [1100.0, 11.0], [1300.0, 11.0], [1500.0, 22.0], [1600.0, 50.0], [1700.0, 25.0], [1800.0, 28.0], [1900.0, 12.0], [2000.0, 19.0], [2100.0, 17.0], [2200.0, 13.0], [2800.0, 19.0], [2900.0, 6.0], [3000.0, 7.0], [3800.0, 21.0], [3900.0, 34.0], [4300.0, 6.0], [4700.0, 6.0], [4900.0, 37.0], [5000.0, 10.0], [5300.0, 10.0], [5600.0, 8.0], [5700.0, 2.0], [5800.0, 2.0], [7600.0, 10.0], [7700.0, 1.0], [8400.0, 26.0], [10300.0, 13.0], [11000.0, 21.0], [11100.0, 1.0], [11500.0, 18.0], [12000.0, 13.0], [12700.0, 3.0], [12800.0, 3.0], [12900.0, 10.0], [13000.0, 10.0], [13200.0, 10.0], [13600.0, 79.0], [13700.0, 10.0], [13500.0, 35.0], [13900.0, 10.0], [14000.0, 48.0], [14100.0, 68.0], [14200.0, 69.0], [15000.0, 5.0], [15100.0, 3.0], [15200.0, 8.0], [15300.0, 8.0], [15400.0, 12.0], [15600.0, 44.0], [15700.0, 18.0], [15800.0, 10.0], [16200.0, 9.0], [16100.0, 4.0], [16300.0, 10.0], [17400.0, 3.0], [16400.0, 2.0], [20100.0, 2.0], [20200.0, 1.0], [20300.0, 3.0], [20400.0, 3.0], [500.0, 8.0]], "isOverall": false, "label": "Test Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 23500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 26.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1839.0, "series": [{"data": [[0.0, 26.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 135.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1839.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 523.647855530474, "minX": 1.60772916E12, "maxY": 546.712909441234, "series": [{"data": [[1.60772916E12, 523.647855530474], [1.60772922E12, 546.712909441234]], "isOverall": false, "label": "Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60772922E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 197.0, "minX": 1.0, "maxY": 23379.1, "series": [{"data": [[128.0, 197.0], [132.0, 236.0], [134.0, 250.0], [136.0, 258.0], [138.0, 295.0], [141.0, 294.0], [142.0, 334.0], [144.0, 309.0], [146.0, 370.0], [147.0, 385.0], [149.0, 354.0], [151.0, 423.0], [155.0, 400.0], [157.0, 411.0], [159.0, 427.0], [161.0, 435.0], [163.0, 444.0], [165.0, 450.0], [166.0, 457.0], [168.0, 465.0], [170.0, 475.0], [172.0, 485.0], [173.0, 488.0], [175.0, 486.0], [177.0, 514.0], [179.0, 509.0], [180.0, 518.0], [182.0, 524.0], [184.0, 533.0], [186.0, 537.0], [187.0, 536.0], [188.0, 532.0], [191.0, 581.0], [192.0, 577.0], [194.0, 565.0], [196.0, 592.0], [198.0, 589.0], [199.0, 597.0], [201.0, 604.0], [203.0, 611.0], [208.0, 657.0], [213.0, 699.0], [220.0, 750.0], [222.0, 763.0], [224.0, 772.0], [226.0, 779.0], [231.0, 819.0], [235.0, 849.0], [237.0, 861.0], [238.0, 869.0], [241.0, 880.0], [242.0, 886.0], [244.0, 895.0], [246.0, 16034.0], [248.0, 910.0], [250.0, 921.0], [251.0, 929.0], [253.0, 935.0], [255.0, 943.0], [269.0, 1002.0], [257.0, 948.0], [258.0, 958.0], [268.0, 22642.148514851495], [260.0, 965.0], [262.0, 972.0], [256.0, 23379.1], [264.0, 978.0], [265.0, 21134.454545454548], [267.0, 994.0], [271.0, 1008.0], [272.0, 1015.0], [274.0, 1024.0], [276.0, 1031.0], [277.0, 1036.0], [279.0, 1044.0], [281.0, 1051.0], [283.0, 1058.0], [284.0, 1067.0], [286.0, 1075.0], [300.0, 1131.0], [290.0, 1089.0], [288.0, 1083.0], [291.0, 1094.0], [293.0, 1103.0], [295.0, 1110.0], [296.0, 1116.0], [298.0, 1125.0], [302.0, 1140.0], [303.0, 1149.0], [316.0, 1200.0], [305.0, 1152.0], [307.0, 1160.0], [308.0, 1167.0], [310.0, 1176.0], [312.0, 1183.0], [314.0, 1189.0], [317.0, 1209.0], [319.0, 1218.0], [321.0, 1224.0], [323.0, 1230.0], [325.0, 1237.0], [326.0, 1245.0], [328.0, 1252.0], [329.0, 1255.0], [331.0, 1265.0], [333.0, 1276.0], [335.0, 1285.0], [336.0, 1289.0], [338.0, 1297.0], [340.0, 1302.0], [342.0, 1314.0], [344.0, 1320.0], [345.0, 1325.0], [347.0, 1331.0], [349.0, 1339.0], [351.0, 1349.0], [352.0, 1356.0], [354.0, 1363.0], [376.0, 1574.0], [378.0, 1583.0], [380.0, 1594.0], [382.0, 1603.0], [386.0, 1634.0], [388.0, 1641.0], [429.0, 2472.0], [431.0, 2480.0], [432.0, 2488.0], [434.0, 2496.0], [436.0, 2504.0], [438.0, 2509.0], [439.0, 2518.0], [441.0, 2523.0], [443.0, 2534.0], [445.0, 2540.0], [446.0, 2547.0], [460.0, 2603.0], [450.0, 2560.0], [448.0, 2554.0], [451.0, 2567.0], [453.0, 2574.0], [455.0, 2581.0], [456.0, 2588.0], [458.0, 2596.0], [462.0, 2608.0], [463.0, 2619.0], [465.0, 2626.0], [467.0, 2637.0], [468.0, 2638.0], [470.0, 2645.0], [472.0, 2653.0], [474.0, 2658.0], [475.0, 2669.0], [477.0, 2677.0], [479.0, 2683.0], [481.0, 2688.0], [482.0, 2696.0], [484.0, 2702.0], [486.0, 2712.0], [487.0, 2723.0], [489.0, 2726.0], [491.0, 2734.0], [493.0, 2739.0], [494.0, 2748.0], [498.0, 2765.0], [497.0, 2767.0], [499.0, 2767.0], [501.0, 2775.0], [503.0, 2781.0], [504.0, 2788.0], [506.0, 2795.0], [508.0, 2806.0], [510.0, 2812.0], [525.0, 2877.0], [513.0, 2827.0], [512.0, 2821.0], [527.0, 2883.0], [515.0, 2833.0], [517.0, 2840.0], [518.0, 2849.0], [536.0, 2916.0], [537.0, 2923.0], [539.0, 2929.0], [541.0, 2942.0], [543.0, 2951.0], [529.0, 2891.0], [530.0, 2900.0], [532.0, 2905.0], [534.0, 2913.0], [520.0, 2857.0], [522.0, 2863.0], [524.0, 2870.0], [546.0, 2964.0], [544.0, 2956.0], [548.0, 2970.0], [549.0, 2977.0], [551.0, 2984.0], [560.0, 3021.0], [561.0, 3027.0], [563.0, 3034.0], [565.0, 3041.0], [566.0, 3047.0], [553.0, 2991.0], [555.0, 3000.0], [556.0, 3005.0], [558.0, 3012.0], [612.0, 3801.0], [614.0, 3821.0], [632.0, 3906.0], [634.0, 3914.0], [636.0, 3918.0], [637.0, 3927.0], [639.0, 3936.0], [616.0, 3836.0], [618.0, 3842.0], [619.0, 3849.0], [621.0, 3857.0], [623.0, 3864.0], [625.0, 3874.0], [627.0, 3881.0], [628.0, 3889.0], [630.0, 3899.0], [654.0, 4000.0], [641.0, 3945.0], [643.0, 3947.0], [645.0, 3958.0], [646.0, 3966.0], [657.0, 4014.0], [669.0, 4069.0], [670.0, 4056.0], [665.0, 4042.0], [668.0, 4087.0], [659.0, 4023.0], [661.0, 4031.0], [663.0, 4044.0], [648.0, 3975.0], [650.0, 3982.0], [652.0, 3993.0], [655.0, 4005.0], [685.0, 4142.0], [672.0, 4098.0], [674.0, 4104.0], [676.0, 4092.0], [678.0, 4121.0], [688.0, 4157.0], [689.0, 14628.75], [702.0, 4215.5], [697.0, 4191.0], [700.0, 13441.636363636364], [690.0, 4164.0], [692.0, 4169.0], [694.0, 4180.0], [695.0, 4186.0], [680.0, 4117.0], [681.0, 4125.0], [683.0, 4133.0], [686.0, 4147.0], [706.0, 4230.0], [704.0, 4202.0], [707.0, 4257.0], [709.0, 4234.0], [711.0, 4263.0], [712.0, 4257.0], [714.0, 4265.0], [716.0, 4271.0], [718.0, 13090.571428571426], [755.0, 4716.0], [758.0, 4730.0], [759.0, 4697.0], [761.0, 4725.0], [763.0, 4723.0], [764.0, 4788.0], [767.0, 4798.0], [749.0, 11766.13953488372], [770.0, 4783.0], [768.0, 4804.0], [772.0, 4791.0], [771.0, 10922.000000000002], [773.0, 4780.0], [775.0, 4806.0], [784.0, 9761.183098591542], [786.0, 4850.0], [777.0, 4834.0], [779.0, 4818.0], [780.0, 4826.0], [782.0, 4833.0], [821.0, 7677.620689655174]], "isOverall": false, "label": "Home", "isController": false}, {"data": [[623.4170000000004, 9264.598999999993]], "isOverall": false, "label": "Home-Aggregated", "isController": false}, {"data": [[2.0, 15863.0], [3.0, 20468.0], [4.0, 20468.0], [5.0, 20466.0], [6.0, 15808.0], [7.0, 15824.0], [8.0, 15820.0], [9.0, 15821.0], [10.0, 15817.0], [11.0, 15816.0], [12.0, 15814.0], [13.0, 15812.0], [14.0, 20325.0], [15.0, 20326.0], [16.0, 20326.0], [17.0, 15748.0], [18.0, 15744.0], [19.0, 15757.0], [20.0, 15756.0], [21.0, 15753.0], [22.0, 15751.0], [23.0, 15747.0], [24.0, 20198.0], [25.0, 20213.0], [26.0, 20181.0], [27.0, 15694.0], [28.0, 15701.0], [29.0, 15688.0], [30.0, 15688.0], [31.0, 15685.0], [33.0, 15696.0], [32.0, 15699.0], [35.0, 15688.0], [34.0, 15691.0], [37.0, 15686.0], [36.0, 15687.0], [39.0, 15666.0], [38.0, 15675.0], [41.0, 15661.0], [40.0, 15681.0], [43.0, 15675.0], [42.0, 15677.0], [45.0, 15669.0], [44.0, 15673.0], [47.0, 15666.0], [46.0, 15667.0], [49.0, 15660.0], [48.0, 15662.0], [51.0, 15671.0], [50.0, 15658.0], [53.0, 15668.0], [52.0, 15671.0], [55.0, 15665.0], [54.0, 15659.0], [57.0, 15661.0], [56.0, 15663.0], [59.0, 15653.0], [58.0, 15654.0], [61.0, 15664.0], [60.0, 15650.0], [63.0, 15660.0], [62.0, 15662.0], [67.0, 16417.0], [66.0, 16418.0], [65.0, 15670.0], [64.0, 15658.0], [71.0, 16368.0], [70.0, 16377.0], [69.0, 2262.0], [68.0, 2265.0], [75.0, 16366.0], [74.0, 16371.0], [73.0, 16371.0], [72.0, 16374.0], [79.0, 16375.0], [78.0, 16377.0], [77.0, 16380.0], [76.0, 16366.0], [83.0, 2267.0], [82.0, 2268.0], [81.0, 2270.0], [80.0, 2271.0], [87.0, 2286.0], [86.0, 2263.0], [85.0, 2279.0], [84.0, 2264.0], [91.0, 16204.0], [90.0, 16205.0], [89.0, 2277.0], [88.0, 2278.0], [95.0, 16199.0], [94.0, 16200.0], [93.0, 16200.0], [92.0, 16204.0], [99.0, 16103.0], [98.0, 16139.0], [97.0, 16200.0], [96.0, 16197.0], [103.0, 2132.0], [102.0, 2118.0], [101.0, 2120.0], [100.0, 2120.0], [107.0, 2128.0], [106.0, 2130.0], [105.0, 2129.0], [104.0, 2131.0], [111.0, 2187.0], [110.0, 2187.0], [109.0, 2126.0], [108.0, 2128.0], [115.0, 2196.0], [114.0, 2197.0], [113.0, 2201.0], [112.0, 2186.0], [119.0, 15757.0], [118.0, 15760.0], [117.0, 2194.0], [116.0, 2197.0], [123.0, 15754.0], [122.0, 15755.0], [121.0, 15755.0], [120.0, 15757.0], [127.0, 15760.0], [126.0, 15762.0], [125.0, 15764.0], [124.0, 15751.0], [135.0, 2033.0], [134.0, 2036.0], [133.0, 2036.0], [132.0, 2035.0], [131.0, 2038.0], [130.0, 2026.0], [129.0, 2026.0], [128.0, 2013.0], [143.0, 2042.0], [142.0, 2042.0], [141.0, 2042.0], [140.0, 2043.0], [139.0, 2043.0], [138.0, 2045.0], [137.0, 2045.0], [136.0, 2033.0], [151.0, 15443.0], [150.0, 15445.0], [149.0, 15433.0], [148.0, 15435.0], [147.0, 15437.0], [146.0, 2052.0], [145.0, 2053.0], [144.0, 2056.0], [159.0, 1866.0], [158.0, 1867.0], [157.0, 1869.0], [156.0, 15433.0], [155.0, 15432.0], [154.0, 15434.0], [153.0, 15438.0], [152.0, 15440.0], [167.0, 1890.0], [166.0, 1876.0], [165.0, 1875.0], [164.0, 1877.0], [163.0, 1877.0], [162.0, 1879.0], [161.0, 1880.0], [160.0, 1880.0], [175.0, 15126.0], [174.0, 1889.0], [173.0, 1890.0], [172.0, 1892.0], [171.0, 1880.0], [170.0, 1886.0], [169.0, 1886.0], [168.0, 1887.0], [183.0, 15621.0], [182.0, 15621.0], [181.0, 15626.0], [180.0, 15627.0], [179.0, 15630.0], [178.0, 17443.0], [177.0, 17439.0], [176.0, 17447.0], [191.0, 1705.0], [190.0, 1707.0], [189.0, 1708.0], [188.0, 1695.0], [187.0, 1697.0], [186.0, 1699.0], [185.0, 1699.0], [184.0, 15634.0], [199.0, 15390.0], [198.0, 15393.0], [197.0, 1711.0], [196.0, 1713.0], [195.0, 1716.0], [194.0, 1701.0], [193.0, 1704.0], [192.0, 1705.0], [207.0, 15388.0], [206.0, 15392.0], [205.0, 15393.0], [204.0, 15395.0], [203.0, 15397.0], [202.0, 15399.0], [201.0, 15401.0], [200.0, 15402.0], [215.0, 1521.0], [214.0, 1522.0], [213.0, 1526.0], [212.0, 1529.0], [211.0, 1530.0], [210.0, 1516.0], [209.0, 1515.0], [208.0, 1519.0], [223.0, 15208.0], [222.0, 15211.0], [221.0, 15212.0], [220.0, 15198.0], [219.0, 15215.0], [218.0, 15216.0], [217.0, 1533.0], [216.0, 1519.0], [231.0, 1342.0], [230.0, 1344.0], [229.0, 1343.0], [228.0, 1346.0], [227.0, 15198.0], [226.0, 15202.0], [225.0, 15203.0], [224.0, 15204.0], [239.0, 15015.0], [238.0, 1348.0], [237.0, 1349.0], [236.0, 1346.0], [235.0, 1351.0], [234.0, 1352.0], [233.0, 1354.0], [232.0, 1340.0], [247.0, 1171.0], [246.0, 16254.0], [245.0, 16288.0], [244.0, 16272.0], [243.0, 15006.0], [242.0, 15009.0], [241.0, 15011.0], [240.0, 15013.0], [255.0, 1174.0], [254.0, 1175.0], [253.0, 1177.0], [252.0, 1162.0], [251.0, 1163.0], [250.0, 1166.0], [249.0, 1166.0], [248.0, 1170.0], [270.0, 13673.0], [271.0, 13671.0], [269.0, 13662.0], [268.0, 827.0], [267.0, 826.0], [266.0, 831.0], [265.0, 1010.0], [264.0, 994.0], [263.0, 998.0], [257.0, 989.0], [256.0, 1172.0], [259.0, 1002.0], [258.0, 1003.0], [262.0, 997.0], [261.0, 1001.0], [260.0, 1000.0], [286.0, 13646.0], [287.0, 13643.0], [285.0, 13646.0], [284.0, 13651.0], [283.0, 13654.0], [282.0, 13657.0], [281.0, 13646.0], [280.0, 13647.0], [279.0, 13652.0], [273.0, 13668.0], [272.0, 13670.0], [275.0, 13663.0], [274.0, 13666.0], [278.0, 13653.0], [277.0, 13659.0], [276.0, 13661.0], [302.0, 13616.0], [303.0, 13626.0], [301.0, 13618.0], [300.0, 13618.0], [299.0, 13622.0], [298.0, 13622.0], [297.0, 13627.0], [296.0, 13631.0], [295.0, 13633.0], [289.0, 13636.0], [288.0, 13639.0], [291.0, 13646.0], [290.0, 13633.0], [294.0, 13635.0], [293.0, 13640.0], [292.0, 13643.0], [318.0, 13606.0], [319.0, 13606.0], [317.0, 13613.0], [316.0, 13615.0], [315.0, 13616.0], [314.0, 13619.0], [313.0, 13620.0], [312.0, 13622.0], [311.0, 13623.0], [305.0, 13622.0], [304.0, 13626.0], [307.0, 13619.0], [306.0, 13620.0], [310.0, 13611.0], [309.0, 13615.0], [308.0, 13616.0], [334.0, 13598.0], [335.0, 13596.0], [333.0, 13586.0], [332.0, 13589.0], [331.0, 13590.0], [330.0, 13591.0], [329.0, 13593.0], [328.0, 13593.0], [327.0, 13600.0], [321.0, 13602.0], [320.0, 13603.0], [323.0, 13612.0], [322.0, 13615.0], [326.0, 13604.0], [325.0, 13606.0], [324.0, 13604.0], [350.0, 13567.0], [351.0, 13566.0], [349.0, 13556.0], [348.0, 13572.0], [347.0, 13562.0], [346.0, 13562.0], [345.0, 13565.0], [344.0, 13568.0], [343.0, 13570.0], [337.0, 13593.0], [336.0, 13594.0], [339.0, 13584.0], [338.0, 13588.0], [342.0, 13574.0], [341.0, 13578.0], [340.0, 13579.0], [366.0, 14286.0], [367.0, 14286.0], [365.0, 14275.0], [364.0, 14278.0], [363.0, 14279.0], [362.0, 13554.0], [361.0, 13557.0], [360.0, 13544.0], [359.0, 13546.0], [353.0, 13559.0], [352.0, 13562.0], [355.0, 13555.0], [354.0, 13559.0], [358.0, 13548.0], [357.0, 13551.0], [356.0, 13552.0], [382.0, 14260.0], [383.0, 14258.0], [381.0, 14262.0], [380.0, 14265.0], [379.0, 14254.0], [378.0, 14255.0], [377.0, 14262.0], [376.0, 14264.0], [375.0, 14265.0], [369.0, 14279.0], [368.0, 14282.0], [371.0, 14274.0], [370.0, 14278.0], [374.0, 14269.0], [373.0, 14254.0], [372.0, 14274.0], [399.0, 7945.0], [389.0, 7927.0], [388.0, 14248.0], [390.0, 14244.0], [395.0, 7943.0], [397.0, 7949.0], [398.0, 7942.5], [396.0, 14246.0], [387.0, 14252.0], [386.0, 14253.0], [385.0, 14260.0], [384.0, 14256.0], [391.0, 14243.0], [394.0, 14251.0], [393.0, 14254.0], [392.0, 14255.0], [401.0, 5844.0], [400.0, 7936.0], [402.0, 7954.5], [403.0, 7956.0], [404.0, 5867.666666666667], [405.0, 7960.0], [406.0, 7956.0], [407.0, 5850.0], [408.0, 7938.0], [414.0, 5847.0], [415.0, 5837.666666666667], [412.0, 7931.5], [413.0, 7930.0], [409.0, 5840.333333333333], [410.0, 7934.0], [411.0, 7934.0], [417.0, 7934.5], [416.0, 7934.0], [418.0, 7933.5], [419.0, 7934.5], [420.0, 5839.666666666667], [421.0, 7934.0], [422.0, 7933.0], [423.0, 7931.0], [424.0, 5839.666666666667], [428.0, 7913.0], [430.0, 14204.0], [429.0, 14208.0], [431.0, 14201.0], [425.0, 7929.0], [426.0, 7934.5], [427.0, 5841.0], [446.0, 14165.0], [447.0, 14164.0], [445.0, 14172.0], [444.0, 14167.0], [443.0, 14168.0], [442.0, 14173.0], [441.0, 14174.0], [440.0, 14176.0], [439.0, 14180.0], [433.0, 14181.0], [432.0, 14197.0], [435.0, 14170.0], [434.0, 14175.0], [438.0, 14180.0], [437.0, 14168.0], [436.0, 14168.0], [462.0, 14154.0], [463.0, 14151.0], [461.0, 14138.0], [460.0, 14143.0], [459.0, 14145.0], [458.0, 14148.0], [457.0, 14151.0], [456.0, 14155.0], [455.0, 14155.0], [449.0, 14158.0], [448.0, 14158.0], [451.0, 14165.0], [450.0, 14169.0], [454.0, 14158.0], [453.0, 14160.0], [452.0, 14163.0], [478.0, 14127.0], [479.0, 14126.0], [477.0, 14130.0], [476.0, 14133.0], [475.0, 14120.0], [474.0, 14123.0], [473.0, 14124.0], [472.0, 14130.0], [471.0, 14131.0], [465.0, 14146.0], [464.0, 14151.0], [467.0, 14142.0], [466.0, 14144.0], [470.0, 14133.0], [469.0, 14137.0], [468.0, 14140.0], [494.0, 14102.0], [495.0, 14099.0], [493.0, 14104.0], [492.0, 14108.0], [491.0, 14109.0], [490.0, 14114.0], [489.0, 14117.0], [487.0, 14120.0], [481.0, 14121.0], [480.0, 14121.0], [483.0, 14117.0], [482.0, 14118.0], [486.0, 14108.0], [485.0, 14111.0], [484.0, 14113.0], [510.0, 14104.0], [511.0, 14103.0], [509.0, 14106.0], [508.0, 14093.0], [507.0, 14097.0], [506.0, 14099.0], [505.0, 14103.0], [504.0, 14091.0], [503.0, 14092.0], [497.0, 14095.0], [496.0, 14095.0], [499.0, 14090.0], [498.0, 14091.0], [502.0, 14095.0], [501.0, 14098.0], [500.0, 14103.0], [540.0, 14048.0], [543.0, 14045.0], [529.0, 14060.0], [528.0, 14061.0], [531.0, 14057.0], [530.0, 14059.0], [533.0, 14052.0], [532.0, 14055.0], [542.0, 14031.0], [541.0, 14049.0], [539.0, 14038.0], [538.0, 14037.0], [537.0, 14041.0], [536.0, 14043.0], [527.0, 14068.0], [513.0, 14094.0], [512.0, 14099.0], [515.0, 14089.0], [514.0, 14093.0], [517.0, 14082.0], [516.0, 14088.0], [519.0, 14074.0], [518.0, 14078.0], [526.0, 14070.0], [525.0, 14058.0], [524.0, 14061.0], [523.0, 14063.0], [522.0, 14067.0], [521.0, 14068.0], [520.0, 14069.0], [535.0, 14046.0], [534.0, 14048.0], [572.0, 8361.5], [569.0, 2269.5], [570.0, 2246.5], [571.0, 2242.5], [573.0, 6541.666666666666], [574.0, 8330.0], [575.0, 6510.666666666666], [561.0, 13915.0], [560.0, 13915.0], [563.0, 13911.0], [562.0, 13913.0], [565.0, 1542.0], [564.0, 13908.0], [568.0, 1538.0], [559.0, 13903.0], [545.0, 14040.0], [544.0, 14042.0], [547.0, 14038.0], [546.0, 14038.0], [549.0, 1514.0], [548.0, 1515.0], [551.0, 1510.0], [550.0, 1509.0], [558.0, 13906.0], [557.0, 13907.0], [556.0, 13913.0], [555.0, 13915.0], [554.0, 1722.0], [553.0, 1725.0], [552.0, 1727.0], [567.0, 1540.0], [566.0, 1540.0], [583.0, 2277.5], [579.0, 8324.5], [576.0, 8323.5], [591.0, 13648.0], [590.0, 13650.0], [589.0, 13652.0], [588.0, 1709.0], [586.0, 2281.0], [587.0, 2289.0], [577.0, 6510.666666666666], [578.0, 8327.0], [580.0, 6504.333333333334], [581.0, 8320.5], [582.0, 2474.3333333333335], [605.0, 8335.5], [604.0, 13629.0], [603.0, 13631.0], [602.0, 13634.0], [601.0, 13629.0], [600.0, 13637.0], [607.0, 8337.0], [593.0, 13643.0], [592.0, 13646.0], [595.0, 13639.0], [594.0, 13641.0], [597.0, 13649.0], [596.0, 13653.0], [599.0, 13640.0], [598.0, 13647.0], [606.0, 13625.0], [584.0, 2477.0], [585.0, 2282.0], [611.0, 2476.5], [608.0, 6574.666666666666], [623.0, 1894.0], [622.0, 1898.0], [621.0, 1899.0], [620.0, 1900.0], [619.0, 1903.0], [618.0, 1902.0], [617.0, 1904.0], [616.0, 1907.0], [609.0, 2478.0], [610.0, 2476.5], [638.0, 13245.0], [625.0, 1891.0], [624.0, 1892.0], [627.0, 1903.0], [626.0, 1903.0], [629.0, 1900.0], [628.0, 1901.0], [631.0, 13253.0], [630.0, 1897.0], [637.0, 13242.0], [636.0, 13253.0], [635.0, 13244.0], [634.0, 13246.0], [633.0, 13248.0], [632.0, 13237.0], [615.0, 1906.0], [614.0, 1908.0], [613.0, 1894.0], [612.0, 1898.0], [668.0, 12974.0], [671.0, 12967.0], [657.0, 13077.0], [656.0, 13063.0], [659.0, 13074.0], [658.0, 13075.0], [661.0, 5802.0], [660.0, 1537.0], [670.0, 12971.0], [669.0, 12973.0], [667.0, 12978.0], [666.0, 12980.0], [665.0, 12981.0], [664.0, 5797.0], [655.0, 13066.0], [641.0, 7508.0], [640.0, 13250.0], [643.0, 1713.0], [642.0, 1714.0], [645.0, 1726.0], [644.0, 1728.0], [647.0, 1723.0], [646.0, 1721.0], [654.0, 13068.0], [653.0, 13070.0], [652.0, 13072.0], [651.0, 13073.0], [650.0, 13074.0], [649.0, 1719.0], [648.0, 1721.0], [663.0, 5799.0], [662.0, 5802.0], [700.0, 5387.0], [703.0, 597.0], [689.0, 12807.0], [688.0, 12794.0], [691.0, 5389.0], [690.0, 969.0], [693.0, 5386.0], [692.0, 5390.0], [702.0, 599.0], [701.0, 598.0], [699.0, 5391.0], [698.0, 5392.0], [697.0, 5393.0], [696.0, 5382.0], [687.0, 12795.0], [673.0, 12965.0], [672.0, 12968.0], [675.0, 5614.0], [674.0, 12978.0], [677.0, 5611.0], [676.0, 5615.0], [679.0, 5610.0], [678.0, 5610.0], [686.0, 12797.0], [685.0, 12800.0], [684.0, 12803.0], [683.0, 1145.0], [682.0, 5616.0], [681.0, 5620.0], [680.0, 5606.0], [695.0, 5383.0], [694.0, 5385.0], [732.0, 11582.0], [735.0, 11582.0], [721.0, 11577.0], [720.0, 11576.0], [723.0, 11577.0], [722.0, 11577.0], [725.0, 11576.0], [724.0, 11577.0], [734.0, 11584.0], [733.0, 11582.0], [731.0, 11581.0], [730.0, 11580.0], [729.0, 11588.0], [728.0, 11577.0], [719.0, 11575.0], [705.0, 595.0], [704.0, 595.0], [707.0, 590.0], [706.0, 592.0], [709.0, 5059.0], [708.0, 588.0], [711.0, 5056.0], [710.0, 5057.0], [718.0, 5043.0], [717.0, 5047.0], [716.0, 5050.0], [715.0, 5063.0], [714.0, 5051.0], [713.0, 5067.0], [712.0, 5055.0], [727.0, 11577.0], [726.0, 11578.0], [764.0, 11071.0], [741.0, 8176.0], [738.0, 8175.0], [737.0, 12027.0], [736.0, 11590.0], [751.0, 11061.0], [750.0, 11061.0], [749.0, 12010.0], [748.0, 12014.0], [747.0, 12003.0], [746.0, 12006.0], [745.0, 12018.0], [744.0, 12017.0], [739.0, 8179.0], [740.0, 8177.0], [742.0, 6891.333333333334], [743.0, 12018.0], [761.0, 11066.0], [760.0, 11065.0], [763.0, 11072.0], [762.0, 11067.0], [767.0, 11079.0], [753.0, 11060.0], [752.0, 11061.0], [755.0, 11063.0], [754.0, 11062.0], [757.0, 11064.0], [756.0, 11063.0], [759.0, 11064.0], [758.0, 11064.0], [766.0, 11074.0], [765.0, 11058.0], [796.0, 8453.0], [799.0, 8453.0], [785.0, 7683.0], [784.0, 10344.0], [787.0, 7684.0], [786.0, 7682.0], [789.0, 7687.0], [788.0, 7682.0], [798.0, 8451.0], [797.0, 8454.0], [795.0, 7701.0], [794.0, 7692.0], [793.0, 7687.0], [792.0, 7688.0], [783.0, 10353.0], [769.0, 11091.0], [768.0, 11085.0], [771.0, 11063.0], [770.0, 11104.0], [773.0, 10355.0], [772.0, 10355.0], [775.0, 10358.0], [774.0, 10358.0], [782.0, 10354.0], [781.0, 10353.0], [780.0, 10352.0], [779.0, 10352.0], [778.0, 10348.0], [777.0, 10350.0], [776.0, 10356.0], [791.0, 7688.0], [790.0, 7685.0], [824.0, 4441.0], [814.0, 6116.666666666667], [801.0, 6683.5], [804.0, 8456.0], [803.0, 8454.0], [802.0, 8453.0], [805.0, 6695.0], [807.0, 6118.0], [806.0, 8457.0], [825.0, 4441.0], [826.0, 4607.333333333333], [827.0, 4440.0], [828.0, 4440.5], [829.0, 4607.0], [830.0, 4441.5], [831.0, 4538.0], [816.0, 6113.333333333333], [817.0, 6699.5], [818.0, 6698.0], [819.0, 6112.333333333333], [820.0, 6696.5], [821.0, 6110.333333333333], [822.0, 4442.0], [823.0, 4599.0], [808.0, 6702.0], [809.0, 8455.0], [812.0, 5835.25], [811.0, 5822.5], [810.0, 8455.0], [813.0, 6700.0], [815.0, 6699.0], [800.0, 8452.0], [835.0, 4454.666666666667], [832.0, 4339.5], [846.0, 3909.3333333333335], [847.0, 3919.5], [844.0, 3909.0], [845.0, 3920.5], [842.0, 3917.0], [843.0, 3918.0], [833.0, 4337.0], [834.0, 4337.5], [836.0, 3914.5], [837.0, 3910.0], [838.0, 3917.0], [839.0, 3916.5], [848.0, 3920.5], [849.0, 3911.3333333333335], [850.0, 3922.0], [851.0, 3923.5], [852.0, 3922.5], [853.0, 3946.0], [855.0, 3944.0], [854.0, 3942.0], [840.0, 3907.0], [841.0, 3917.0], [1.0, 15863.0]], "isOverall": false, "label": "Test Page", "isController": false}, {"data": [[459.7909999999995, 9393.355]], "isOverall": false, "label": "Test Page-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 855.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 887.3333333333334, "minX": 1.60772916E12, "maxY": 292649.36666666664, "series": [{"data": [[1.60772916E12, 88150.63333333333], [1.60772922E12, 292649.36666666664]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60772916E12, 887.3333333333334], [1.60772922E12, 3146.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60772922E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2336.7588652482254, "minX": 1.60772916E12, "maxY": 11985.561281337046, "series": [{"data": [[1.60772916E12, 2336.7588652482254], [1.60772922E12, 11985.561281337046]], "isOverall": false, "label": "Home", "isController": false}, {"data": [[1.60772916E12, 3394.987577639752], [1.60772922E12, 10544.412395709169]], "isOverall": false, "label": "Test Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60772922E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2336.691489361702, "minX": 1.60772916E12, "maxY": 11985.494428969361, "series": [{"data": [[1.60772916E12, 2336.691489361702], [1.60772922E12, 11985.494428969361]], "isOverall": false, "label": "Home", "isController": false}, {"data": [[1.60772916E12, 3394.956521739132], [1.60772922E12, 10544.320619785467]], "isOverall": false, "label": "Test Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60772922E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.60772916E12, "maxY": 112.35515320334251, "series": [{"data": [[1.60772916E12, 50.102836879432594], [1.60772922E12, 112.35515320334251]], "isOverall": false, "label": "Home", "isController": false}, {"data": [[1.60772916E12, 0.0], [1.60772922E12, 0.0]], "isOverall": false, "label": "Test Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60772922E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 197.0, "minX": 1.60772916E12, "maxY": 23599.0, "series": [{"data": [[1.60772916E12, 4979.0], [1.60772922E12, 23599.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60772916E12, 257.9679991531372], [1.60772922E12, 994.0659988856315]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60772916E12, 272.24160152435303], [1.60772922E12, 997.4242001485825]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60772916E12, 265.8479980945587], [1.60772922E12, 996.4029994428158]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60772916E12, 197.0], [1.60772922E12, 588.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60772916E12, 2863.0], [1.60772922E12, 11754.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60772922E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 197.0, "minX": 1.0, "maxY": 15203.5, "series": [{"data": [[37.0, 13250.0], [40.0, 1636.0], [41.0, 4169.0], [45.0, 3821.0], [44.0, 10836.0], [47.0, 486.0], [46.0, 11870.0], [49.0, 10108.0], [53.0, 8508.0], [54.0, 13067.0], [55.0, 14092.5], [56.0, 15203.5], [57.0, 2599.5], [58.0, 12699.5], [59.0, 8005.0], [60.0, 7272.0], [1.0, 197.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 60.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 195.0, "minX": 1.0, "maxY": 15203.0, "series": [{"data": [[37.0, 13250.0], [40.0, 1636.0], [41.0, 4169.0], [45.0, 3820.0], [44.0, 10836.0], [47.0, 486.0], [46.0, 11870.0], [49.0, 10108.0], [53.0, 8508.0], [54.0, 13067.0], [55.0, 14092.5], [56.0, 15203.0], [57.0, 2599.5], [58.0, 12699.5], [59.0, 8005.0], [60.0, 7272.0], [1.0, 195.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 60.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 13.133333333333333, "minX": 1.60772916E12, "maxY": 20.2, "series": [{"data": [[1.60772916E12, 20.2], [1.60772922E12, 13.133333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60772922E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 7.383333333333334, "minX": 1.60772916E12, "maxY": 25.95, "series": [{"data": [[1.60772916E12, 7.383333333333334], [1.60772922E12, 25.95]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60772922E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 2.683333333333333, "minX": 1.60772916E12, "maxY": 13.983333333333333, "series": [{"data": [[1.60772916E12, 4.7], [1.60772922E12, 11.966666666666667]], "isOverall": false, "label": "Home-success", "isController": false}, {"data": [[1.60772916E12, 2.683333333333333], [1.60772922E12, 13.983333333333333]], "isOverall": false, "label": "Test Page-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60772922E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 7.383333333333334, "minX": 1.60772916E12, "maxY": 25.95, "series": [{"data": [[1.60772916E12, 7.383333333333334], [1.60772922E12, 25.95]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60772922E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

