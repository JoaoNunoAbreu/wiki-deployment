/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 272.0, "minX": 0.0, "maxY": 4287.0, "series": [{"data": [[0.0, 272.0], [0.1, 323.0], [0.2, 465.0], [0.3, 466.0], [0.4, 471.0], [0.5, 471.0], [0.6, 472.0], [0.7, 473.0], [0.8, 478.0], [0.9, 480.0], [1.0, 488.0], [1.1, 489.0], [1.2, 490.0], [1.3, 490.0], [1.4, 498.0], [1.5, 500.0], [1.6, 502.0], [1.7, 502.0], [1.8, 504.0], [1.9, 506.0], [2.0, 507.0], [2.1, 507.0], [2.2, 509.0], [2.3, 509.0], [2.4, 510.0], [2.5, 511.0], [2.6, 513.0], [2.7, 516.0], [2.8, 516.0], [2.9, 523.0], [3.0, 524.0], [3.1, 532.0], [3.2, 537.0], [3.3, 543.0], [3.4, 558.0], [3.5, 564.0], [3.6, 565.0], [3.7, 579.0], [3.8, 582.0], [3.9, 600.0], [4.0, 605.0], [4.1, 611.0], [4.2, 616.0], [4.3, 625.0], [4.4, 631.0], [4.5, 641.0], [4.6, 647.0], [4.7, 654.0], [4.8, 670.0], [4.9, 679.0], [5.0, 695.0], [5.1, 696.0], [5.2, 710.0], [5.3, 710.0], [5.4, 720.0], [5.5, 722.0], [5.6, 734.0], [5.7, 736.0], [5.8, 747.0], [5.9, 748.0], [6.0, 758.0], [6.1, 762.0], [6.2, 765.0], [6.3, 767.0], [6.4, 771.0], [6.5, 774.0], [6.6, 781.0], [6.7, 785.0], [6.8, 793.0], [6.9, 795.0], [7.0, 797.0], [7.1, 801.0], [7.2, 812.0], [7.3, 816.0], [7.4, 826.0], [7.5, 832.0], [7.6, 837.0], [7.7, 843.0], [7.8, 851.0], [7.9, 861.0], [8.0, 876.0], [8.1, 876.0], [8.2, 907.0], [8.3, 917.0], [8.4, 931.0], [8.5, 939.0], [8.6, 947.0], [8.7, 954.0], [8.8, 962.0], [8.9, 970.0], [9.0, 980.0], [9.1, 981.0], [9.2, 987.0], [9.3, 992.0], [9.4, 995.0], [9.5, 996.0], [9.6, 1006.0], [9.7, 1011.0], [9.8, 1014.0], [9.9, 1017.0], [10.0, 1022.0], [10.1, 1028.0], [10.2, 1037.0], [10.3, 1038.0], [10.4, 1041.0], [10.5, 1043.0], [10.6, 1048.0], [10.7, 1051.0], [10.8, 1054.0], [10.9, 1057.0], [11.0, 1064.0], [11.1, 1066.0], [11.2, 1072.0], [11.3, 1072.0], [11.4, 1075.0], [11.5, 1078.0], [11.6, 1086.0], [11.7, 1087.0], [11.8, 1090.0], [11.9, 1094.0], [12.0, 1098.0], [12.1, 1099.0], [12.2, 1103.0], [12.3, 1104.0], [12.4, 1111.0], [12.5, 1112.0], [12.6, 1116.0], [12.7, 1119.0], [12.8, 1128.0], [12.9, 1128.0], [13.0, 1134.0], [13.1, 1135.0], [13.2, 1143.0], [13.3, 1143.0], [13.4, 1150.0], [13.5, 1152.0], [13.6, 1158.0], [13.7, 1158.0], [13.8, 1162.0], [13.9, 1166.0], [14.0, 1166.0], [14.1, 1168.0], [14.2, 1172.0], [14.3, 1173.0], [14.4, 1174.0], [14.5, 1176.0], [14.6, 1180.0], [14.7, 1182.0], [14.8, 1184.0], [14.9, 1188.0], [15.0, 1192.0], [15.1, 1192.0], [15.2, 1194.0], [15.3, 1197.0], [15.4, 1201.0], [15.5, 1204.0], [15.6, 1207.0], [15.7, 1208.0], [15.8, 1210.0], [15.9, 1215.0], [16.0, 1215.0], [16.1, 1221.0], [16.2, 1223.0], [16.3, 1224.0], [16.4, 1227.0], [16.5, 1231.0], [16.6, 1232.0], [16.7, 1237.0], [16.8, 1240.0], [16.9, 1241.0], [17.0, 1246.0], [17.1, 1254.0], [17.2, 1257.0], [17.3, 1257.0], [17.4, 1259.0], [17.5, 1269.0], [17.6, 1273.0], [17.7, 1273.0], [17.8, 1276.0], [17.9, 1284.0], [18.0, 1290.0], [18.1, 1290.0], [18.2, 1293.0], [18.3, 1302.0], [18.4, 1305.0], [18.5, 1306.0], [18.6, 1319.0], [18.7, 1323.0], [18.8, 1351.0], [18.9, 1364.0], [19.0, 1397.0], [19.1, 1404.0], [19.2, 1421.0], [19.3, 1434.0], [19.4, 1444.0], [19.5, 1448.0], [19.6, 1463.0], [19.7, 1463.0], [19.8, 1469.0], [19.9, 1475.0], [20.0, 1481.0], [20.1, 1484.0], [20.2, 1493.0], [20.3, 1493.0], [20.4, 1500.0], [20.5, 1504.0], [20.6, 1510.0], [20.7, 1513.0], [20.8, 1519.0], [20.9, 1524.0], [21.0, 1528.0], [21.1, 1531.0], [21.2, 1531.0], [21.3, 1534.0], [21.4, 1543.0], [21.5, 1547.0], [21.6, 1554.0], [21.7, 1556.0], [21.8, 1561.0], [21.9, 1561.0], [22.0, 1569.0], [22.1, 1570.0], [22.2, 1578.0], [22.3, 1578.0], [22.4, 1582.0], [22.5, 1586.0], [22.6, 1592.0], [22.7, 1594.0], [22.8, 1599.0], [22.9, 1601.0], [23.0, 1609.0], [23.1, 1609.0], [23.2, 1615.0], [23.3, 1616.0], [23.4, 1624.0], [23.5, 1624.0], [23.6, 1632.0], [23.7, 1635.0], [23.8, 1639.0], [23.9, 1642.0], [24.0, 1651.0], [24.1, 1654.0], [24.2, 1656.0], [24.3, 1657.0], [24.4, 1666.0], [24.5, 1669.0], [24.6, 1672.0], [24.7, 1673.0], [24.8, 1674.0], [24.9, 1681.0], [25.0, 1686.0], [25.1, 1686.0], [25.2, 1690.0], [25.3, 1692.0], [25.4, 1699.0], [25.5, 1700.0], [25.6, 1705.0], [25.7, 1707.0], [25.8, 1715.0], [25.9, 1717.0], [26.0, 1720.0], [26.1, 1722.0], [26.2, 1730.0], [26.3, 1734.0], [26.4, 1735.0], [26.5, 1739.0], [26.6, 1751.0], [26.7, 1752.0], [26.8, 1760.0], [26.9, 1766.0], [27.0, 1770.0], [27.1, 1770.0], [27.2, 1777.0], [27.3, 1780.0], [27.4, 1785.0], [27.5, 1785.0], [27.6, 1799.0], [27.7, 1802.0], [27.8, 1802.0], [27.9, 1803.0], [28.0, 1816.0], [28.1, 1817.0], [28.2, 1817.0], [28.3, 1819.0], [28.4, 1829.0], [28.5, 1830.0], [28.6, 1832.0], [28.7, 1833.0], [28.8, 1835.0], [28.9, 1844.0], [29.0, 1848.0], [29.1, 1848.0], [29.2, 1849.0], [29.3, 1850.0], [29.4, 1863.0], [29.5, 1865.0], [29.6, 1866.0], [29.7, 1867.0], [29.8, 1881.0], [29.9, 1881.0], [30.0, 1896.0], [30.1, 1896.0], [30.2, 1899.0], [30.3, 1906.0], [30.4, 1911.0], [30.5, 1913.0], [30.6, 1915.0], [30.7, 1916.0], [30.8, 1922.0], [30.9, 1924.0], [31.0, 1928.0], [31.1, 1930.0], [31.2, 1931.0], [31.3, 1933.0], [31.4, 1941.0], [31.5, 1944.0], [31.6, 1945.0], [31.7, 1946.0], [31.8, 1949.0], [31.9, 1955.0], [32.0, 1960.0], [32.1, 1961.0], [32.2, 1964.0], [32.3, 1965.0], [32.4, 1970.0], [32.5, 1971.0], [32.6, 1974.0], [32.7, 1977.0], [32.8, 1981.0], [32.9, 1982.0], [33.0, 1984.0], [33.1, 1988.0], [33.2, 1992.0], [33.3, 1993.0], [33.4, 1997.0], [33.5, 1999.0], [33.6, 2005.0], [33.7, 2006.0], [33.8, 2011.0], [33.9, 2013.0], [34.0, 2017.0], [34.1, 2017.0], [34.2, 2024.0], [34.3, 2025.0], [34.4, 2030.0], [34.5, 2030.0], [34.6, 2033.0], [34.7, 2036.0], [34.8, 2038.0], [34.9, 2040.0], [35.0, 2041.0], [35.1, 2043.0], [35.2, 2045.0], [35.3, 2051.0], [35.4, 2052.0], [35.5, 2056.0], [35.6, 2057.0], [35.7, 2060.0], [35.8, 2065.0], [35.9, 2067.0], [36.0, 2070.0], [36.1, 2073.0], [36.2, 2075.0], [36.3, 2077.0], [36.4, 2077.0], [36.5, 2084.0], [36.6, 2085.0], [36.7, 2090.0], [36.8, 2091.0], [36.9, 2093.0], [37.0, 2096.0], [37.1, 2101.0], [37.2, 2102.0], [37.3, 2110.0], [37.4, 2110.0], [37.5, 2114.0], [37.6, 2116.0], [37.7, 2124.0], [37.8, 2125.0], [37.9, 2128.0], [38.0, 2128.0], [38.1, 2135.0], [38.2, 2137.0], [38.3, 2141.0], [38.4, 2146.0], [38.5, 2148.0], [38.6, 2152.0], [38.7, 2157.0], [38.8, 2159.0], [38.9, 2164.0], [39.0, 2166.0], [39.1, 2173.0], [39.2, 2176.0], [39.3, 2180.0], [39.4, 2184.0], [39.5, 2189.0], [39.6, 2190.0], [39.7, 2191.0], [39.8, 2195.0], [39.9, 2199.0], [40.0, 2200.0], [40.1, 2209.0], [40.2, 2209.0], [40.3, 2216.0], [40.4, 2218.0], [40.5, 2222.0], [40.6, 2229.0], [40.7, 2237.0], [40.8, 2241.0], [40.9, 2244.0], [41.0, 2248.0], [41.1, 2258.0], [41.2, 2260.0], [41.3, 2266.0], [41.4, 2268.0], [41.5, 2274.0], [41.6, 2274.0], [41.7, 2280.0], [41.8, 2280.0], [41.9, 2289.0], [42.0, 2296.0], [42.1, 2299.0], [42.2, 2302.0], [42.3, 2308.0], [42.4, 2312.0], [42.5, 2316.0], [42.6, 2322.0], [42.7, 2329.0], [42.8, 2330.0], [42.9, 2335.0], [43.0, 2337.0], [43.1, 2343.0], [43.2, 2346.0], [43.3, 2352.0], [43.4, 2354.0], [43.5, 2361.0], [43.6, 2363.0], [43.7, 2367.0], [43.8, 2371.0], [43.9, 2381.0], [44.0, 2385.0], [44.1, 2393.0], [44.2, 2394.0], [44.3, 2406.0], [44.4, 2408.0], [44.5, 2420.0], [44.6, 2424.0], [44.7, 2436.0], [44.8, 2440.0], [44.9, 2453.0], [45.0, 2457.0], [45.1, 2464.0], [45.2, 2466.0], [45.3, 2470.0], [45.4, 2472.0], [45.5, 2480.0], [45.6, 2482.0], [45.7, 2485.0], [45.8, 2488.0], [45.9, 2491.0], [46.0, 2495.0], [46.1, 2497.0], [46.2, 2501.0], [46.3, 2503.0], [46.4, 2508.0], [46.5, 2511.0], [46.6, 2519.0], [46.7, 2520.0], [46.8, 2525.0], [46.9, 2534.0], [47.0, 2535.0], [47.1, 2539.0], [47.2, 2543.0], [47.3, 2552.0], [47.4, 2553.0], [47.5, 2558.0], [47.6, 2563.0], [47.7, 2568.0], [47.8, 2569.0], [47.9, 2575.0], [48.0, 2577.0], [48.1, 2585.0], [48.2, 2585.0], [48.3, 2589.0], [48.4, 2592.0], [48.5, 2602.0], [48.6, 2602.0], [48.7, 2605.0], [48.8, 2606.0], [48.9, 2611.0], [49.0, 2612.0], [49.1, 2618.0], [49.2, 2618.0], [49.3, 2622.0], [49.4, 2625.0], [49.5, 2628.0], [49.6, 2634.0], [49.7, 2636.0], [49.8, 2636.0], [49.9, 2641.0], [50.0, 2641.0], [50.1, 2643.0], [50.2, 2650.0], [50.3, 2655.0], [50.4, 2657.0], [50.5, 2660.0], [50.6, 2666.0], [50.7, 2672.0], [50.8, 2674.0], [50.9, 2676.0], [51.0, 2683.0], [51.1, 2687.0], [51.2, 2688.0], [51.3, 2691.0], [51.4, 2692.0], [51.5, 2700.0], [51.6, 2701.0], [51.7, 2707.0], [51.8, 2708.0], [51.9, 2715.0], [52.0, 2716.0], [52.1, 2722.0], [52.2, 2724.0], [52.3, 2728.0], [52.4, 2728.0], [52.5, 2733.0], [52.6, 2733.0], [52.7, 2742.0], [52.8, 2748.0], [52.9, 2750.0], [53.0, 2750.0], [53.1, 2753.0], [53.2, 2754.0], [53.3, 2758.0], [53.4, 2764.0], [53.5, 2765.0], [53.6, 2767.0], [53.7, 2771.0], [53.8, 2771.0], [53.9, 2779.0], [54.0, 2780.0], [54.1, 2782.0], [54.2, 2784.0], [54.3, 2786.0], [54.4, 2789.0], [54.5, 2798.0], [54.6, 2799.0], [54.7, 2800.0], [54.8, 2801.0], [54.9, 2807.0], [55.0, 2812.0], [55.1, 2815.0], [55.2, 2816.0], [55.3, 2819.0], [55.4, 2820.0], [55.5, 2828.0], [55.6, 2828.0], [55.7, 2831.0], [55.8, 2834.0], [55.9, 2835.0], [56.0, 2835.0], [56.1, 2842.0], [56.2, 2843.0], [56.3, 2844.0], [56.4, 2845.0], [56.5, 2847.0], [56.6, 2849.0], [56.7, 2859.0], [56.8, 2860.0], [56.9, 2863.0], [57.0, 2865.0], [57.1, 2867.0], [57.2, 2875.0], [57.3, 2876.0], [57.4, 2877.0], [57.5, 2881.0], [57.6, 2883.0], [57.7, 2884.0], [57.8, 2890.0], [57.9, 2891.0], [58.0, 2891.0], [58.1, 2894.0], [58.2, 2894.0], [58.3, 2897.0], [58.4, 2899.0], [58.5, 2900.0], [58.6, 2908.0], [58.7, 2910.0], [58.8, 2911.0], [58.9, 2912.0], [59.0, 2914.0], [59.1, 2916.0], [59.2, 2916.0], [59.3, 2926.0], [59.4, 2928.0], [59.5, 2930.0], [59.6, 2931.0], [59.7, 2933.0], [59.8, 2935.0], [59.9, 2940.0], [60.0, 2941.0], [60.1, 2943.0], [60.2, 2944.0], [60.3, 2946.0], [60.4, 2948.0], [60.5, 2949.0], [60.6, 2950.0], [60.7, 2957.0], [60.8, 2957.0], [60.9, 2959.0], [61.0, 2960.0], [61.1, 2961.0], [61.2, 2961.0], [61.3, 2966.0], [61.4, 2968.0], [61.5, 2973.0], [61.6, 2974.0], [61.7, 2977.0], [61.8, 2979.0], [61.9, 2981.0], [62.0, 2982.0], [62.1, 2990.0], [62.2, 2992.0], [62.3, 2994.0], [62.4, 2997.0], [62.5, 2999.0], [62.6, 3000.0], [62.7, 3006.0], [62.8, 3006.0], [62.9, 3011.0], [63.0, 3011.0], [63.1, 3017.0], [63.2, 3018.0], [63.3, 3023.0], [63.4, 3024.0], [63.5, 3026.0], [63.6, 3027.0], [63.7, 3030.0], [63.8, 3031.0], [63.9, 3039.0], [64.0, 3039.0], [64.1, 3041.0], [64.2, 3042.0], [64.3, 3047.0], [64.4, 3052.0], [64.5, 3055.0], [64.6, 3056.0], [64.7, 3061.0], [64.8, 3062.0], [64.9, 3064.0], [65.0, 3069.0], [65.1, 3072.0], [65.2, 3073.0], [65.3, 3079.0], [65.4, 3079.0], [65.5, 3082.0], [65.6, 3085.0], [65.7, 3089.0], [65.8, 3089.0], [65.9, 3092.0], [66.0, 3095.0], [66.1, 3098.0], [66.2, 3102.0], [66.3, 3106.0], [66.4, 3106.0], [66.5, 3111.0], [66.6, 3112.0], [66.7, 3113.0], [66.8, 3115.0], [66.9, 3122.0], [67.0, 3123.0], [67.1, 3124.0], [67.2, 3125.0], [67.3, 3129.0], [67.4, 3129.0], [67.5, 3132.0], [67.6, 3132.0], [67.7, 3136.0], [67.8, 3138.0], [67.9, 3140.0], [68.0, 3140.0], [68.1, 3142.0], [68.2, 3144.0], [68.3, 3148.0], [68.4, 3151.0], [68.5, 3152.0], [68.6, 3154.0], [68.7, 3155.0], [68.8, 3156.0], [68.9, 3158.0], [69.0, 3159.0], [69.1, 3162.0], [69.2, 3163.0], [69.3, 3165.0], [69.4, 3167.0], [69.5, 3170.0], [69.6, 3170.0], [69.7, 3172.0], [69.8, 3173.0], [69.9, 3176.0], [70.0, 3177.0], [70.1, 3178.0], [70.2, 3180.0], [70.3, 3185.0], [70.4, 3186.0], [70.5, 3187.0], [70.6, 3187.0], [70.7, 3190.0], [70.8, 3190.0], [70.9, 3191.0], [71.0, 3192.0], [71.1, 3194.0], [71.2, 3195.0], [71.3, 3201.0], [71.4, 3202.0], [71.5, 3203.0], [71.6, 3206.0], [71.7, 3208.0], [71.8, 3208.0], [71.9, 3211.0], [72.0, 3211.0], [72.1, 3213.0], [72.2, 3215.0], [72.3, 3218.0], [72.4, 3219.0], [72.5, 3221.0], [72.6, 3222.0], [72.7, 3224.0], [72.8, 3224.0], [72.9, 3225.0], [73.0, 3225.0], [73.1, 3227.0], [73.2, 3230.0], [73.3, 3234.0], [73.4, 3234.0], [73.5, 3237.0], [73.6, 3238.0], [73.7, 3240.0], [73.8, 3241.0], [73.9, 3242.0], [74.0, 3248.0], [74.1, 3250.0], [74.2, 3251.0], [74.3, 3253.0], [74.4, 3254.0], [74.5, 3256.0], [74.6, 3256.0], [74.7, 3258.0], [74.8, 3260.0], [74.9, 3265.0], [75.0, 3267.0], [75.1, 3269.0], [75.2, 3270.0], [75.3, 3272.0], [75.4, 3272.0], [75.5, 3274.0], [75.6, 3276.0], [75.7, 3278.0], [75.8, 3280.0], [75.9, 3285.0], [76.0, 3285.0], [76.1, 3287.0], [76.2, 3288.0], [76.3, 3290.0], [76.4, 3291.0], [76.5, 3297.0], [76.6, 3298.0], [76.7, 3301.0], [76.8, 3302.0], [76.9, 3305.0], [77.0, 3305.0], [77.1, 3306.0], [77.2, 3308.0], [77.3, 3313.0], [77.4, 3318.0], [77.5, 3320.0], [77.6, 3320.0], [77.7, 3323.0], [77.8, 3323.0], [77.9, 3324.0], [78.0, 3325.0], [78.1, 3331.0], [78.2, 3331.0], [78.3, 3338.0], [78.4, 3338.0], [78.5, 3340.0], [78.6, 3341.0], [78.7, 3347.0], [78.8, 3349.0], [78.9, 3352.0], [79.0, 3353.0], [79.1, 3355.0], [79.2, 3357.0], [79.3, 3360.0], [79.4, 3362.0], [79.5, 3367.0], [79.6, 3368.0], [79.7, 3370.0], [79.8, 3370.0], [79.9, 3375.0], [80.0, 3380.0], [80.1, 3383.0], [80.2, 3384.0], [80.3, 3386.0], [80.4, 3387.0], [80.5, 3390.0], [80.6, 3391.0], [80.7, 3395.0], [80.8, 3398.0], [80.9, 3401.0], [81.0, 3403.0], [81.1, 3405.0], [81.2, 3406.0], [81.3, 3407.0], [81.4, 3413.0], [81.5, 3417.0], [81.6, 3418.0], [81.7, 3422.0], [81.8, 3423.0], [81.9, 3426.0], [82.0, 3428.0], [82.1, 3433.0], [82.2, 3434.0], [82.3, 3438.0], [82.4, 3440.0], [82.5, 3449.0], [82.6, 3450.0], [82.7, 3452.0], [82.8, 3456.0], [82.9, 3458.0], [83.0, 3462.0], [83.1, 3465.0], [83.2, 3467.0], [83.3, 3469.0], [83.4, 3470.0], [83.5, 3472.0], [83.6, 3479.0], [83.7, 3482.0], [83.8, 3484.0], [83.9, 3485.0], [84.0, 3488.0], [84.1, 3490.0], [84.2, 3490.0], [84.3, 3498.0], [84.4, 3498.0], [84.5, 3499.0], [84.6, 3499.0], [84.7, 3512.0], [84.8, 3516.0], [84.9, 3516.0], [85.0, 3516.0], [85.1, 3520.0], [85.2, 3521.0], [85.3, 3531.0], [85.4, 3532.0], [85.5, 3533.0], [85.6, 3534.0], [85.7, 3539.0], [85.8, 3543.0], [85.9, 3546.0], [86.0, 3547.0], [86.1, 3552.0], [86.2, 3556.0], [86.3, 3560.0], [86.4, 3562.0], [86.5, 3567.0], [86.6, 3570.0], [86.7, 3575.0], [86.8, 3576.0], [86.9, 3582.0], [87.0, 3585.0], [87.1, 3592.0], [87.2, 3596.0], [87.3, 3597.0], [87.4, 3603.0], [87.5, 3608.0], [87.6, 3611.0], [87.7, 3621.0], [87.8, 3622.0], [87.9, 3628.0], [88.0, 3629.0], [88.1, 3637.0], [88.2, 3639.0], [88.3, 3645.0], [88.4, 3646.0], [88.5, 3652.0], [88.6, 3654.0], [88.7, 3658.0], [88.8, 3660.0], [88.9, 3667.0], [89.0, 3669.0], [89.1, 3671.0], [89.2, 3673.0], [89.3, 3678.0], [89.4, 3685.0], [89.5, 3687.0], [89.6, 3688.0], [89.7, 3695.0], [89.8, 3702.0], [89.9, 3705.0], [90.0, 3705.0], [90.1, 3710.0], [90.2, 3718.0], [90.3, 3720.0], [90.4, 3721.0], [90.5, 3727.0], [90.6, 3735.0], [90.7, 3737.0], [90.8, 3738.0], [90.9, 3744.0], [91.0, 3751.0], [91.1, 3753.0], [91.2, 3754.0], [91.3, 3759.0], [91.4, 3768.0], [91.5, 3769.0], [91.6, 3769.0], [91.7, 3775.0], [91.8, 3781.0], [91.9, 3785.0], [92.0, 3787.0], [92.1, 3792.0], [92.2, 3798.0], [92.3, 3800.0], [92.4, 3804.0], [92.5, 3811.0], [92.6, 3814.0], [92.7, 3816.0], [92.8, 3818.0], [92.9, 3825.0], [93.0, 3830.0], [93.1, 3832.0], [93.2, 3835.0], [93.3, 3843.0], [93.4, 3846.0], [93.5, 3849.0], [93.6, 3852.0], [93.7, 3854.0], [93.8, 3860.0], [93.9, 3864.0], [94.0, 3870.0], [94.1, 3877.0], [94.2, 3880.0], [94.3, 3887.0], [94.4, 3894.0], [94.5, 3896.0], [94.6, 3900.0], [94.7, 3910.0], [94.8, 3911.0], [94.9, 3916.0], [95.0, 3919.0], [95.1, 3928.0], [95.2, 3931.0], [95.3, 3937.0], [95.4, 3941.0], [95.5, 3946.0], [95.6, 3948.0], [95.7, 3954.0], [95.8, 3958.0], [95.9, 3966.0], [96.0, 3970.0], [96.1, 3975.0], [96.2, 3978.0], [96.3, 3986.0], [96.4, 3988.0], [96.5, 3996.0], [96.6, 3997.0], [96.7, 4004.0], [96.8, 4007.0], [96.9, 4010.0], [97.0, 4012.0], [97.1, 4020.0], [97.2, 4026.0], [97.3, 4032.0], [97.4, 4036.0], [97.5, 4046.0], [97.6, 4049.0], [97.7, 4063.0], [97.8, 4069.0], [97.9, 4078.0], [98.0, 4080.0], [98.1, 4086.0], [98.2, 4086.0], [98.3, 4093.0], [98.4, 4102.0], [98.5, 4110.0], [98.6, 4112.0], [98.7, 4119.0], [98.8, 4126.0], [98.9, 4134.0], [99.0, 4143.0], [99.1, 4150.0], [99.2, 4159.0], [99.3, 4176.0], [99.4, 4178.0], [99.5, 4193.0], [99.6, 4208.0], [99.7, 4226.0], [99.8, 4243.0], [99.9, 4272.0], [100.0, 4287.0]], "isOverall": false, "label": "Home", "isController": false}, {"data": [[0.0, 293.0], [0.1, 333.0], [0.2, 368.0], [0.3, 380.0], [0.4, 396.0], [0.5, 411.0], [0.6, 419.0], [0.7, 421.0], [0.8, 427.0], [0.9, 436.0], [1.0, 446.0], [1.1, 452.0], [1.2, 474.0], [1.3, 490.0], [1.4, 496.0], [1.5, 502.0], [1.6, 508.0], [1.7, 520.0], [1.8, 524.0], [1.9, 525.0], [2.0, 544.0], [2.1, 546.0], [2.2, 547.0], [2.3, 553.0], [2.4, 554.0], [2.5, 561.0], [2.6, 562.0], [2.7, 562.0], [2.8, 563.0], [2.9, 571.0], [3.0, 571.0], [3.1, 611.0], [3.2, 611.0], [3.3, 619.0], [3.4, 622.0], [3.5, 628.0], [3.6, 629.0], [3.7, 637.0], [3.8, 638.0], [3.9, 662.0], [4.0, 662.0], [4.1, 665.0], [4.2, 667.0], [4.3, 670.0], [4.4, 672.0], [4.5, 679.0], [4.6, 680.0], [4.7, 680.0], [4.8, 686.0], [4.9, 690.0], [5.0, 692.0], [5.1, 693.0], [5.2, 694.0], [5.3, 697.0], [5.4, 698.0], [5.5, 701.0], [5.6, 722.0], [5.7, 736.0], [5.8, 740.0], [5.9, 742.0], [6.0, 796.0], [6.1, 798.0], [6.2, 830.0], [6.3, 831.0], [6.4, 845.0], [6.5, 849.0], [6.6, 851.0], [6.7, 851.0], [6.8, 863.0], [6.9, 864.0], [7.0, 865.0], [7.1, 869.0], [7.2, 871.0], [7.3, 872.0], [7.4, 872.0], [7.5, 872.0], [7.6, 877.0], [7.7, 894.0], [7.8, 897.0], [7.9, 898.0], [8.0, 899.0], [8.1, 899.0], [8.2, 902.0], [8.3, 904.0], [8.4, 904.0], [8.5, 905.0], [8.6, 911.0], [8.7, 911.0], [8.8, 914.0], [8.9, 918.0], [9.0, 918.0], [9.1, 919.0], [9.2, 920.0], [9.3, 926.0], [9.4, 929.0], [9.5, 929.0], [9.6, 931.0], [9.7, 931.0], [9.8, 954.0], [9.9, 955.0], [10.0, 955.0], [10.1, 956.0], [10.2, 956.0], [10.3, 957.0], [10.4, 958.0], [10.5, 965.0], [10.6, 966.0], [10.7, 972.0], [10.8, 973.0], [10.9, 974.0], [11.0, 974.0], [11.1, 974.0], [11.2, 997.0], [11.3, 999.0], [11.4, 1000.0], [11.5, 1000.0], [11.6, 1000.0], [11.7, 1001.0], [11.8, 1002.0], [11.9, 1002.0], [12.0, 1002.0], [12.1, 1002.0], [12.2, 1002.0], [12.3, 1003.0], [12.4, 1008.0], [12.5, 1016.0], [12.6, 1044.0], [12.7, 1044.0], [12.8, 1045.0], [12.9, 1046.0], [13.0, 1046.0], [13.1, 1047.0], [13.2, 1048.0], [13.3, 1049.0], [13.4, 1056.0], [13.5, 1077.0], [13.6, 1078.0], [13.7, 1080.0], [13.8, 1097.0], [13.9, 1100.0], [14.0, 1116.0], [14.1, 1117.0], [14.2, 1118.0], [14.3, 1119.0], [14.4, 1120.0], [14.5, 1120.0], [14.6, 1121.0], [14.7, 1122.0], [14.8, 1122.0], [14.9, 1122.0], [15.0, 1123.0], [15.1, 1123.0], [15.2, 1131.0], [15.3, 1131.0], [15.4, 1131.0], [15.5, 1132.0], [15.6, 1134.0], [15.7, 1134.0], [15.8, 1134.0], [15.9, 1135.0], [16.0, 1136.0], [16.1, 1136.0], [16.2, 1136.0], [16.3, 1136.0], [16.4, 1181.0], [16.5, 1188.0], [16.6, 1189.0], [16.7, 1190.0], [16.8, 1191.0], [16.9, 1201.0], [17.0, 1205.0], [17.1, 1206.0], [17.2, 1244.0], [17.3, 1246.0], [17.4, 1260.0], [17.5, 1263.0], [17.6, 1264.0], [17.7, 1264.0], [17.8, 1264.0], [17.9, 1279.0], [18.0, 1280.0], [18.1, 1280.0], [18.2, 1282.0], [18.3, 1283.0], [18.4, 1283.0], [18.5, 1284.0], [18.6, 1285.0], [18.7, 1286.0], [18.8, 1317.0], [18.9, 1319.0], [19.0, 1320.0], [19.1, 1321.0], [19.2, 1331.0], [19.3, 1332.0], [19.4, 1333.0], [19.5, 1333.0], [19.6, 1334.0], [19.7, 1334.0], [19.8, 1347.0], [19.9, 1355.0], [20.0, 1355.0], [20.1, 1356.0], [20.2, 1357.0], [20.3, 1360.0], [20.4, 1360.0], [20.5, 1360.0], [20.6, 1361.0], [20.7, 1361.0], [20.8, 1363.0], [20.9, 1364.0], [21.0, 1370.0], [21.1, 1370.0], [21.2, 1370.0], [21.3, 1370.0], [21.4, 1370.0], [21.5, 1371.0], [21.6, 1371.0], [21.7, 1372.0], [21.8, 1372.0], [21.9, 1372.0], [22.0, 1373.0], [22.1, 1373.0], [22.2, 1373.0], [22.3, 1373.0], [22.4, 1374.0], [22.5, 1374.0], [22.6, 1374.0], [22.7, 1374.0], [22.8, 1375.0], [22.9, 1375.0], [23.0, 1415.0], [23.1, 1419.0], [23.2, 1420.0], [23.3, 1420.0], [23.4, 1421.0], [23.5, 1422.0], [23.6, 1430.0], [23.7, 1430.0], [23.8, 1432.0], [23.9, 1432.0], [24.0, 1432.0], [24.1, 1445.0], [24.2, 1450.0], [24.3, 1450.0], [24.4, 1451.0], [24.5, 1451.0], [24.6, 1460.0], [24.7, 1462.0], [24.8, 1476.0], [24.9, 1476.0], [25.0, 1479.0], [25.1, 1480.0], [25.2, 1488.0], [25.3, 1492.0], [25.4, 1493.0], [25.5, 1494.0], [25.6, 1495.0], [25.7, 1495.0], [25.8, 1498.0], [25.9, 1498.0], [26.0, 1498.0], [26.1, 1498.0], [26.2, 1499.0], [26.3, 1500.0], [26.4, 1500.0], [26.5, 1500.0], [26.6, 1501.0], [26.7, 1501.0], [26.8, 1502.0], [26.9, 1503.0], [27.0, 1503.0], [27.1, 1503.0], [27.2, 1503.0], [27.3, 1504.0], [27.4, 1504.0], [27.5, 1505.0], [27.6, 1505.0], [27.7, 1505.0], [27.8, 1506.0], [27.9, 1506.0], [28.0, 1507.0], [28.1, 1507.0], [28.2, 1508.0], [28.3, 1508.0], [28.4, 1510.0], [28.5, 1510.0], [28.6, 1512.0], [28.7, 1517.0], [28.8, 1544.0], [28.9, 1544.0], [29.0, 1548.0], [29.1, 1550.0], [29.2, 1558.0], [29.3, 1559.0], [29.4, 1561.0], [29.5, 1561.0], [29.6, 1562.0], [29.7, 1564.0], [29.8, 1564.0], [29.9, 1564.0], [30.0, 1565.0], [30.1, 1570.0], [30.2, 1590.0], [30.3, 1590.0], [30.4, 1591.0], [30.5, 1591.0], [30.6, 1591.0], [30.7, 1591.0], [30.8, 1592.0], [30.9, 1593.0], [31.0, 1606.0], [31.1, 1618.0], [31.2, 1619.0], [31.3, 1619.0], [31.4, 1620.0], [31.5, 1620.0], [31.6, 1620.0], [31.7, 1620.0], [31.8, 1621.0], [31.9, 1621.0], [32.0, 1621.0], [32.1, 1621.0], [32.2, 1621.0], [32.3, 1622.0], [32.4, 1624.0], [32.5, 1624.0], [32.6, 1624.0], [32.7, 1625.0], [32.8, 1625.0], [32.9, 1625.0], [33.0, 1626.0], [33.1, 1626.0], [33.2, 1626.0], [33.3, 1626.0], [33.4, 1627.0], [33.5, 1627.0], [33.6, 1628.0], [33.7, 1629.0], [33.8, 1631.0], [33.9, 1632.0], [34.0, 1632.0], [34.1, 1633.0], [34.2, 1634.0], [34.3, 1634.0], [34.4, 1635.0], [34.5, 1635.0], [34.6, 1636.0], [34.7, 1637.0], [34.8, 1641.0], [34.9, 1641.0], [35.0, 1642.0], [35.1, 1643.0], [35.2, 1645.0], [35.3, 1690.0], [35.4, 1692.0], [35.5, 1692.0], [35.6, 1692.0], [35.7, 1692.0], [35.8, 1694.0], [35.9, 1697.0], [36.0, 1703.0], [36.1, 1744.0], [36.2, 1746.0], [36.3, 1747.0], [36.4, 1748.0], [36.5, 1749.0], [36.6, 1749.0], [36.7, 1791.0], [36.8, 1847.0], [36.9, 1851.0], [37.0, 1851.0], [37.1, 1851.0], [37.2, 1851.0], [37.3, 1852.0], [37.4, 1853.0], [37.5, 1853.0], [37.6, 1853.0], [37.7, 1854.0], [37.8, 1856.0], [37.9, 1872.0], [38.0, 1875.0], [38.1, 1875.0], [38.2, 1875.0], [38.3, 1876.0], [38.4, 1876.0], [38.5, 1877.0], [38.6, 1877.0], [38.7, 1878.0], [38.8, 1878.0], [38.9, 1878.0], [39.0, 1879.0], [39.1, 1879.0], [39.2, 1880.0], [39.3, 1880.0], [39.4, 1882.0], [39.5, 1884.0], [39.6, 1884.0], [39.7, 1884.0], [39.8, 1885.0], [39.9, 1885.0], [40.0, 1885.0], [40.1, 1885.0], [40.2, 1885.0], [40.3, 1886.0], [40.4, 1886.0], [40.5, 1887.0], [40.6, 1887.0], [40.7, 1910.0], [40.8, 1910.0], [40.9, 1912.0], [41.0, 1912.0], [41.1, 1924.0], [41.2, 1927.0], [41.3, 1928.0], [41.4, 1928.0], [41.5, 1929.0], [41.6, 1930.0], [41.7, 1933.0], [41.8, 1933.0], [41.9, 1934.0], [42.0, 1934.0], [42.1, 1934.0], [42.2, 1935.0], [42.3, 1935.0], [42.4, 1936.0], [42.5, 1936.0], [42.6, 1936.0], [42.7, 1936.0], [42.8, 1937.0], [42.9, 1996.0], [43.0, 2020.0], [43.1, 2021.0], [43.2, 2021.0], [43.3, 2022.0], [43.4, 2022.0], [43.5, 2028.0], [43.6, 2028.0], [43.7, 2029.0], [43.8, 2030.0], [43.9, 2032.0], [44.0, 2032.0], [44.1, 2032.0], [44.2, 2033.0], [44.3, 2034.0], [44.4, 2034.0], [44.5, 2052.0], [44.6, 2053.0], [44.7, 2053.0], [44.8, 2053.0], [44.9, 2053.0], [45.0, 2054.0], [45.1, 2067.0], [45.2, 2069.0], [45.3, 2070.0], [45.4, 2070.0], [45.5, 2071.0], [45.6, 2071.0], [45.7, 2072.0], [45.8, 2078.0], [45.9, 2091.0], [46.0, 2094.0], [46.1, 2109.0], [46.2, 2109.0], [46.3, 2110.0], [46.4, 2110.0], [46.5, 2110.0], [46.6, 2111.0], [46.7, 2111.0], [46.8, 2111.0], [46.9, 2111.0], [47.0, 2111.0], [47.1, 2111.0], [47.2, 2111.0], [47.3, 2112.0], [47.4, 2112.0], [47.5, 2112.0], [47.6, 2113.0], [47.7, 2113.0], [47.8, 2113.0], [47.9, 2114.0], [48.0, 2114.0], [48.1, 2115.0], [48.2, 2115.0], [48.3, 2127.0], [48.4, 2145.0], [48.5, 2146.0], [48.6, 2146.0], [48.7, 2150.0], [48.8, 2163.0], [48.9, 2165.0], [49.0, 2173.0], [49.1, 2174.0], [49.2, 2174.0], [49.3, 2191.0], [49.4, 2192.0], [49.5, 2194.0], [49.6, 2196.0], [49.7, 2199.0], [49.8, 2200.0], [49.9, 2201.0], [50.0, 2201.0], [50.1, 2201.0], [50.2, 2202.0], [50.3, 2202.0], [50.4, 2202.0], [50.5, 2203.0], [50.6, 2203.0], [50.7, 2214.0], [50.8, 2216.0], [50.9, 2218.0], [51.0, 2219.0], [51.1, 2221.0], [51.2, 2221.0], [51.3, 2222.0], [51.4, 2222.0], [51.5, 2223.0], [51.6, 2223.0], [51.7, 2225.0], [51.8, 2226.0], [51.9, 2226.0], [52.0, 2226.0], [52.1, 2228.0], [52.2, 2228.0], [52.3, 2230.0], [52.4, 2230.0], [52.5, 2232.0], [52.6, 2234.0], [52.7, 2242.0], [52.8, 2243.0], [52.9, 2246.0], [53.0, 2246.0], [53.1, 2258.0], [53.2, 2259.0], [53.3, 2260.0], [53.4, 2261.0], [53.5, 2261.0], [53.6, 2262.0], [53.7, 2264.0], [53.8, 2264.0], [53.9, 2290.0], [54.0, 2291.0], [54.1, 2292.0], [54.2, 2293.0], [54.3, 2295.0], [54.4, 2295.0], [54.5, 2308.0], [54.6, 2310.0], [54.7, 2316.0], [54.8, 2316.0], [54.9, 2317.0], [55.0, 2317.0], [55.1, 2318.0], [55.2, 2318.0], [55.3, 2318.0], [55.4, 2318.0], [55.5, 2319.0], [55.6, 2319.0], [55.7, 2319.0], [55.8, 2320.0], [55.9, 2320.0], [56.0, 2322.0], [56.1, 2327.0], [56.2, 2327.0], [56.3, 2330.0], [56.4, 2330.0], [56.5, 2330.0], [56.6, 2331.0], [56.7, 2331.0], [56.8, 2331.0], [56.9, 2331.0], [57.0, 2332.0], [57.1, 2332.0], [57.2, 2333.0], [57.3, 2333.0], [57.4, 2333.0], [57.5, 2333.0], [57.6, 2334.0], [57.7, 2334.0], [57.8, 2334.0], [57.9, 2334.0], [58.0, 2334.0], [58.1, 2335.0], [58.2, 2335.0], [58.3, 2337.0], [58.4, 2337.0], [58.5, 2337.0], [58.6, 2337.0], [58.7, 2338.0], [58.8, 2338.0], [58.9, 2338.0], [59.0, 2338.0], [59.1, 2339.0], [59.2, 2339.0], [59.3, 2339.0], [59.4, 2340.0], [59.5, 2340.0], [59.6, 2340.0], [59.7, 2341.0], [59.8, 2342.0], [59.9, 2343.0], [60.0, 2343.0], [60.1, 2343.0], [60.2, 2346.0], [60.3, 2346.0], [60.4, 2346.0], [60.5, 2346.0], [60.6, 2347.0], [60.7, 2348.0], [60.8, 2348.0], [60.9, 2437.0], [61.0, 2437.0], [61.1, 2439.0], [61.2, 2440.0], [61.3, 2444.0], [61.4, 2444.0], [61.5, 2445.0], [61.6, 2445.0], [61.7, 2445.0], [61.8, 2446.0], [61.9, 2447.0], [62.0, 2448.0], [62.1, 2448.0], [62.2, 2449.0], [62.3, 2450.0], [62.4, 2450.0], [62.5, 2451.0], [62.6, 2452.0], [62.7, 2453.0], [62.8, 2453.0], [62.9, 2454.0], [63.0, 2454.0], [63.1, 2456.0], [63.2, 2456.0], [63.3, 2456.0], [63.4, 2457.0], [63.5, 2457.0], [63.6, 2457.0], [63.7, 2458.0], [63.8, 2459.0], [63.9, 2459.0], [64.0, 2459.0], [64.1, 2461.0], [64.2, 2461.0], [64.3, 2463.0], [64.4, 2464.0], [64.5, 2483.0], [64.6, 2506.0], [64.7, 2506.0], [64.8, 2506.0], [64.9, 2507.0], [65.0, 2507.0], [65.1, 2509.0], [65.2, 2510.0], [65.3, 2511.0], [65.4, 2522.0], [65.5, 2537.0], [65.6, 2538.0], [65.7, 2542.0], [65.8, 2543.0], [65.9, 2544.0], [66.0, 2544.0], [66.1, 2555.0], [66.2, 2556.0], [66.3, 2557.0], [66.4, 2557.0], [66.5, 2558.0], [66.6, 2558.0], [66.7, 2558.0], [66.8, 2558.0], [66.9, 2559.0], [67.0, 2559.0], [67.1, 2559.0], [67.2, 2560.0], [67.3, 2560.0], [67.4, 2560.0], [67.5, 2561.0], [67.6, 2561.0], [67.7, 2561.0], [67.8, 2561.0], [67.9, 2563.0], [68.0, 2563.0], [68.1, 2564.0], [68.2, 2564.0], [68.3, 2565.0], [68.4, 2565.0], [68.5, 2567.0], [68.6, 2567.0], [68.7, 2568.0], [68.8, 2568.0], [68.9, 2569.0], [69.0, 2569.0], [69.1, 2618.0], [69.2, 2619.0], [69.3, 2621.0], [69.4, 2621.0], [69.5, 2621.0], [69.6, 2622.0], [69.7, 2623.0], [69.8, 2623.0], [69.9, 2623.0], [70.0, 2624.0], [70.1, 2625.0], [70.2, 2625.0], [70.3, 2626.0], [70.4, 2626.0], [70.5, 2626.0], [70.6, 2627.0], [70.7, 2633.0], [70.8, 2633.0], [70.9, 2633.0], [71.0, 2633.0], [71.1, 2633.0], [71.2, 2634.0], [71.3, 2668.0], [71.4, 2670.0], [71.5, 2677.0], [71.6, 2681.0], [71.7, 2682.0], [71.8, 2682.0], [71.9, 2682.0], [72.0, 2683.0], [72.1, 2683.0], [72.2, 2683.0], [72.3, 2684.0], [72.4, 2684.0], [72.5, 2684.0], [72.6, 2684.0], [72.7, 2685.0], [72.8, 2685.0], [72.9, 2685.0], [73.0, 2685.0], [73.1, 2686.0], [73.2, 2687.0], [73.3, 2689.0], [73.4, 2699.0], [73.5, 2703.0], [73.6, 2712.0], [73.7, 2712.0], [73.8, 2712.0], [73.9, 2714.0], [74.0, 2714.0], [74.1, 2715.0], [74.2, 2715.0], [74.3, 2715.0], [74.4, 2715.0], [74.5, 2715.0], [74.6, 2715.0], [74.7, 2715.0], [74.8, 2715.0], [74.9, 2716.0], [75.0, 2716.0], [75.1, 2716.0], [75.2, 2716.0], [75.3, 2716.0], [75.4, 2717.0], [75.5, 2718.0], [75.6, 2718.0], [75.7, 2718.0], [75.8, 2718.0], [75.9, 2720.0], [76.0, 2720.0], [76.1, 2720.0], [76.2, 2720.0], [76.3, 2721.0], [76.4, 2721.0], [76.5, 2722.0], [76.6, 2722.0], [76.7, 2722.0], [76.8, 2722.0], [76.9, 2723.0], [77.0, 2724.0], [77.1, 2724.0], [77.2, 2725.0], [77.3, 2725.0], [77.4, 2731.0], [77.5, 2781.0], [77.6, 2782.0], [77.7, 2783.0], [77.8, 2783.0], [77.9, 2784.0], [78.0, 2784.0], [78.1, 2788.0], [78.2, 2791.0], [78.3, 2810.0], [78.4, 2811.0], [78.5, 2811.0], [78.6, 2812.0], [78.7, 2836.0], [78.8, 2836.0], [78.9, 2837.0], [79.0, 2838.0], [79.1, 2839.0], [79.2, 2839.0], [79.3, 2844.0], [79.4, 2845.0], [79.5, 2909.0], [79.6, 2910.0], [79.7, 2910.0], [79.8, 2914.0], [79.9, 2918.0], [80.0, 2918.0], [80.1, 2918.0], [80.2, 2919.0], [80.3, 2919.0], [80.4, 2919.0], [80.5, 2920.0], [80.6, 2920.0], [80.7, 2920.0], [80.8, 2920.0], [80.9, 2921.0], [81.0, 2921.0], [81.1, 2921.0], [81.2, 2921.0], [81.3, 2921.0], [81.4, 2921.0], [81.5, 2923.0], [81.6, 2923.0], [81.7, 2927.0], [81.8, 2927.0], [81.9, 2929.0], [82.0, 2929.0], [82.1, 2930.0], [82.2, 2930.0], [82.3, 2930.0], [82.4, 2930.0], [82.5, 2931.0], [82.6, 2932.0], [82.7, 2932.0], [82.8, 2932.0], [82.9, 2932.0], [83.0, 2932.0], [83.1, 2949.0], [83.2, 2950.0], [83.3, 2953.0], [83.4, 2954.0], [83.5, 2956.0], [83.6, 2982.0], [83.7, 2984.0], [83.8, 2991.0], [83.9, 2991.0], [84.0, 2991.0], [84.1, 2997.0], [84.2, 3003.0], [84.3, 3016.0], [84.4, 3016.0], [84.5, 3017.0], [84.6, 3018.0], [84.7, 3018.0], [84.8, 3019.0], [84.9, 3020.0], [85.0, 3020.0], [85.1, 3021.0], [85.2, 3022.0], [85.3, 3022.0], [85.4, 3022.0], [85.5, 3023.0], [85.6, 3023.0], [85.7, 3024.0], [85.8, 3024.0], [85.9, 3026.0], [86.0, 3026.0], [86.1, 3027.0], [86.2, 3029.0], [86.3, 3029.0], [86.4, 3030.0], [86.5, 3031.0], [86.6, 3046.0], [86.7, 3058.0], [86.8, 3058.0], [86.9, 3059.0], [87.0, 3060.0], [87.1, 3060.0], [87.2, 3060.0], [87.3, 3060.0], [87.4, 3061.0], [87.5, 3061.0], [87.6, 3062.0], [87.7, 3074.0], [87.8, 3075.0], [87.9, 3075.0], [88.0, 3076.0], [88.1, 3076.0], [88.2, 3076.0], [88.3, 3077.0], [88.4, 3078.0], [88.5, 3078.0], [88.6, 3078.0], [88.7, 3079.0], [88.8, 3079.0], [88.9, 3079.0], [89.0, 3079.0], [89.1, 3079.0], [89.2, 3079.0], [89.3, 3080.0], [89.4, 3080.0], [89.5, 3080.0], [89.6, 3080.0], [89.7, 3081.0], [89.8, 3081.0], [89.9, 3081.0], [90.0, 3081.0], [90.1, 3081.0], [90.2, 3082.0], [90.3, 3082.0], [90.4, 3082.0], [90.5, 3082.0], [90.6, 3082.0], [90.7, 3082.0], [90.8, 3082.0], [90.9, 3083.0], [91.0, 3083.0], [91.1, 3084.0], [91.2, 3084.0], [91.3, 3084.0], [91.4, 3084.0], [91.5, 3086.0], [91.6, 3087.0], [91.7, 3088.0], [91.8, 3088.0], [91.9, 3089.0], [92.0, 3090.0], [92.1, 3093.0], [92.2, 3093.0], [92.3, 3094.0], [92.4, 3094.0], [92.5, 3096.0], [92.6, 3096.0], [92.7, 3099.0], [92.8, 3100.0], [92.9, 3106.0], [93.0, 3107.0], [93.1, 3125.0], [93.2, 3125.0], [93.3, 3126.0], [93.4, 3127.0], [93.5, 3127.0], [93.6, 3128.0], [93.7, 3128.0], [93.8, 3128.0], [93.9, 3128.0], [94.0, 3129.0], [94.1, 3129.0], [94.2, 3131.0], [94.3, 3131.0], [94.4, 3131.0], [94.5, 3132.0], [94.6, 3132.0], [94.7, 3132.0], [94.8, 3132.0], [94.9, 3132.0], [95.0, 3132.0], [95.1, 3132.0], [95.2, 3132.0], [95.3, 3133.0], [95.4, 3133.0], [95.5, 3133.0], [95.6, 3133.0], [95.7, 3133.0], [95.8, 3133.0], [95.9, 3134.0], [96.0, 3134.0], [96.1, 3135.0], [96.2, 3135.0], [96.3, 3135.0], [96.4, 3137.0], [96.5, 3137.0], [96.6, 3138.0], [96.7, 3139.0], [96.8, 3140.0], [96.9, 3141.0], [97.0, 3143.0], [97.1, 3145.0], [97.2, 3147.0], [97.3, 3173.0], [97.4, 3177.0], [97.5, 3180.0], [97.6, 3181.0], [97.7, 3210.0], [97.8, 3215.0], [97.9, 3219.0], [98.0, 3220.0], [98.1, 3221.0], [98.2, 3221.0], [98.3, 3294.0], [98.4, 3297.0], [98.5, 3298.0], [98.6, 3298.0], [98.7, 3298.0], [98.8, 3299.0], [98.9, 3299.0], [99.0, 3299.0], [99.1, 3300.0], [99.2, 3300.0], [99.3, 3301.0], [99.4, 3301.0], [99.5, 3334.0], [99.6, 3334.0], [99.7, 3341.0], [99.8, 3341.0], [99.9, 3341.0], [100.0, 3345.0]], "isOverall": false, "label": "Test Page", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 200.0, "maxY": 129.0, "series": [{"data": [[600.0, 20.0], [700.0, 28.0], [800.0, 17.0], [900.0, 20.0], [1000.0, 39.0], [1100.0, 49.0], [1200.0, 43.0], [1300.0, 12.0], [1400.0, 20.0], [1500.0, 37.0], [1600.0, 39.0], [1700.0, 33.0], [1800.0, 39.0], [1900.0, 49.0], [2000.0, 53.0], [2100.0, 43.0], [2200.0, 33.0], [2300.0, 32.0], [2400.0, 28.0], [2500.0, 35.0], [2600.0, 45.0], [2700.0, 47.0], [2800.0, 58.0], [2900.0, 61.0], [3000.0, 54.0], [3100.0, 77.0], [200.0, 1.0], [3200.0, 80.0], [3300.0, 63.0], [3400.0, 57.0], [3500.0, 41.0], [3700.0, 37.0], [3600.0, 36.0], [3800.0, 35.0], [3900.0, 32.0], [4000.0, 25.0], [4100.0, 18.0], [4200.0, 7.0], [300.0, 1.0], [400.0, 20.0], [500.0, 36.0]], "isOverall": false, "label": "Home", "isController": false}, {"data": [[600.0, 36.0], [700.0, 11.0], [800.0, 30.0], [900.0, 48.0], [1000.0, 38.0], [1100.0, 45.0], [1200.0, 29.0], [1300.0, 62.0], [1400.0, 50.0], [1500.0, 71.0], [1600.0, 75.0], [1700.0, 11.0], [1800.0, 58.0], [1900.0, 35.0], [2000.0, 47.0], [2100.0, 55.0], [2200.0, 70.0], [2300.0, 96.0], [2400.0, 56.0], [2500.0, 68.0], [2600.0, 65.0], [2700.0, 73.0], [2800.0, 17.0], [2900.0, 71.0], [3000.0, 129.0], [3100.0, 74.0], [200.0, 1.0], [3200.0, 20.0], [3300.0, 15.0], [300.0, 6.0], [400.0, 15.0], [500.0, 23.0]], "isOverall": false, "label": "Test Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 4200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 45.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2295.0, "series": [{"data": [[0.0, 45.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 660.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2295.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 178.33809323813549, "minX": 1.60773E12, "maxY": 188.0210016155089, "series": [{"data": [[1.60773006E12, 188.0210016155089], [1.60773E12, 178.33809323813549]], "isOverall": false, "label": "Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60773006E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 272.0, "minX": 1.0, "maxY": 3772.642857142857, "series": [{"data": [[42.0, 272.0], [44.0, 323.0], [46.0, 417.0], [48.0, 472.0], [49.0, 468.0], [51.0, 490.0], [52.0, 502.0], [53.0, 500.0], [54.0, 509.0], [55.0, 513.0], [56.0, 510.0], [57.0, 507.0], [58.0, 504.0], [59.0, 507.0], [60.0, 502.0], [61.0, 516.0], [62.0, 516.0], [63.0, 510.0], [64.0, 502.0], [65.0, 507.0], [66.0, 498.0], [67.0, 484.0], [68.0, 472.0], [69.0, 471.0], [70.0, 465.0], [72.0, 509.0], [75.0, 567.0], [76.0, 564.0], [77.0, 547.5], [78.0, 537.0], [79.0, 518.0], [80.0, 506.0], [81.0, 507.0], [82.0, 487.5], [83.0, 475.0], [84.0, 485.0], [85.0, 524.6666666666666], [86.0, 510.0], [87.0, 509.5], [88.0, 562.5], [89.0, 567.6], [90.0, 594.6], [91.0, 650.7142857142858], [92.0, 731.8], [93.0, 709.2], [94.0, 715.5], [95.0, 743.1666666666667], [96.0, 806.5], [97.0, 825.25], [98.0, 814.0], [99.0, 779.75], [100.0, 773.0], [101.0, 805.6], [102.0, 780.8], [103.0, 869.3333333333334], [104.0, 1064.0], [105.0, 1040.5], [106.0, 1009.5], [107.0, 978.5], [108.0, 1014.25], [109.0, 1023.4], [110.0, 1012.6666666666666], [111.0, 1021.8333333333334], [112.0, 1053.875], [113.0, 1057.3333333333333], [114.0, 1030.0], [115.0, 1163.0], [116.0, 1123.0], [117.0, 1175.1666666666665], [118.0, 1171.625], [119.0, 1147.1666666666667], [120.0, 1132.8333333333335], [121.0, 1167.857142857143], [122.0, 1177.0], [123.0, 1207.7142857142858], [124.0, 1216.3333333333333], [125.0, 1242.888888888889], [126.0, 1243.375], [127.0, 1286.1666666666667], [128.0, 1278.1428571428573], [129.0, 1233.125], [130.0, 1249.6666666666667], [131.0, 1338.9999999999998], [132.0, 1372.75], [133.0, 1529.8], [134.0, 1595.8333333333333], [135.0, 1579.0], [136.0, 1558.75], [137.0, 1516.4285714285713], [138.0, 1532.0], [139.0, 1625.6], [140.0, 1579.0], [141.0, 1584.1666666666665], [142.0, 1590.8333333333335], [143.0, 1578.2], [144.0, 1569.75], [145.0, 3772.642857142857], [146.0, 1640.0], [147.0, 1670.75], [148.0, 1772.3333333333335], [149.0, 1800.2], [150.0, 1849.6666666666665], [151.0, 1825.0], [152.0, 1778.6], [153.0, 1884.1250000000002], [154.0, 1906.142857142857], [155.0, 1913.0], [156.0, 1910.4285714285713], [157.0, 1852.75], [158.0, 1983.8000000000002], [159.0, 1951.5], [160.0, 1920.3000000000002], [161.0, 2029.5714285714284], [162.0, 2000.142857142857], [163.0, 1953.0], [164.0, 1971.7777777777776], [165.0, 1924.3333333333335], [166.0, 2184.2], [167.0, 2154.4], [168.0, 2144.222222222222], [169.0, 2152.6], [170.0, 2121.4], [171.0, 2124.818181818182], [172.0, 2180.0], [173.0, 2166.6250000000005], [174.0, 2100.285714285714], [175.0, 2107.125], [176.0, 2091.8571428571427], [177.0, 2090.0], [178.0, 2111.666666666667], [179.0, 2112.9999999999995], [180.0, 2172.0], [181.0, 2261.6], [182.0, 2367.5714285714284], [183.0, 2373.0], [184.0, 2380.714285714286], [185.0, 2393.142857142857], [186.0, 2359.125], [187.0, 2500.4], [188.0, 2440.3333333333335], [189.0, 2438.8], [190.0, 2547.125], [191.0, 2636.2], [192.0, 2584.333333333333], [193.0, 2675.75], [194.0, 2764.6], [195.0, 2812.166666666667], [196.0, 2785.1666666666665], [197.0, 2751.6666666666665], [198.0, 2745.875], [199.0, 2713.75], [200.0, 2681.0], [201.0, 3603.6166666666663], [202.0, 2621.5], [203.0, 2631.7], [204.0, 2792.1111111111113], [205.0, 2872.125], [206.0, 2824.4999999999995], [207.0, 2785.75], [208.0, 2878.4444444444443], [209.0, 2912.1000000000004], [211.0, 2971.6666666666665], [212.0, 2982.1818181818185], [213.0, 2945.8999999999996], [214.0, 2927.1818181818185], [215.0, 2885.545454545455], [210.0, 2983.125], [216.0, 2961.444444444445], [217.0, 3056.642857142857], [218.0, 3249.0], [219.0, 3282.25], [220.0, 3250.0], [221.0, 3286.181818181818], [222.0, 3254.916666666667], [223.0, 3254.4545454545455], [224.0, 3260.8], [225.0, 3287.25], [226.0, 3260.538461538462], [227.0, 3280.0], [228.0, 3252.5833333333335], [229.0, 3742.8000000000015], [230.0, 3217.636363636364], [231.0, 3155.0833333333335], [232.0, 3139.818181818182], [233.0, 3220.75], [234.0, 3225.222222222222], [235.0, 3077.5555555555557], [236.0, 3182.7500000000005], [237.0, 3338.090909090909], [238.0, 3232.875], [239.0, 3254.2], [240.0, 3322.0833333333335], [241.0, 3262.1111111111113], [242.0, 3290.6666666666665], [243.0, 3400.363636363636], [244.0, 3293.9090909090905], [245.0, 3418.333333333333], [246.0, 3418.222222222222], [247.0, 3418.375], [248.0, 3457.166666666667], [250.0, 3484.0], [251.0, 3495.857142857143], [252.0, 3366.285714285714], [253.0, 3419.571428571429], [255.0, 3336.875], [249.0, 3581.6666666666665], [254.0, 3432.8333333333335], [257.0, 3268.7500000000005], [256.0, 3337.1111111111113], [258.0, 3234.4285714285716], [259.0, 3323.125], [260.0, 3263.5454545454545], [261.0, 3272.1666666666665], [262.0, 3223.0], [263.0, 3219.0], [264.0, 3148.25], [270.0, 3141.0], [271.0, 3125.0], [268.0, 3216.5], [269.0, 3172.3333333333335], [265.0, 3115.25], [266.0, 3081.5], [267.0, 2989.6666666666665]], "isOverall": false, "label": "Home", "isController": false}, {"data": [[182.8446666666664, 2466.35]], "isOverall": false, "label": "Home-Aggregated", "isController": false}, {"data": [[2.0, 1460.0], [3.0, 1462.0], [4.0, 1507.0], [5.0, 1505.0], [6.0, 1505.0], [7.0, 1504.0], [8.0, 1503.0], [9.0, 1503.0], [10.0, 1500.0], [11.0, 1500.0], [12.0, 1498.0], [13.0, 1512.0], [14.0, 1512.0], [15.0, 1508.0], [16.0, 1508.0], [17.0, 1507.0], [18.0, 1506.0], [19.0, 1505.0], [20.0, 1504.0], [21.0, 1503.0], [22.0, 1502.0], [23.0, 1502.0], [24.0, 1499.0], [25.0, 1501.0], [26.0, 1498.0], [27.0, 1498.0], [28.0, 1498.0], [29.0, 1510.0], [30.0, 1510.0], [31.0, 1508.0], [33.0, 1506.0], [32.0, 1508.0], [35.0, 1503.0], [34.0, 1503.0], [37.0, 1501.0], [36.0, 1501.0], [39.0, 1495.0], [38.0, 1498.0], [41.0, 1495.0], [40.0, 1495.0], [43.0, 1493.0], [42.0, 1492.0], [45.0, 1506.0], [44.0, 1507.0], [47.0, 1503.0], [46.0, 1504.0], [49.0, 1499.0], [48.0, 1500.0], [51.0, 1494.0], [50.0, 1498.0], [53.0, 1517.0], [52.0, 1493.0], [55.0, 2462.0], [54.0, 1472.0], [57.0, 2461.0], [56.0, 2460.0], [59.0, 2458.0], [58.0, 2457.0], [61.0, 2456.0], [60.0, 2457.0], [63.0, 2483.0], [62.0, 2470.0], [67.0, 2442.0], [66.0, 2444.0], [65.0, 2446.0], [64.0, 2452.0], [71.0, 2437.0], [70.0, 2439.0], [69.0, 2438.0], [68.0, 2440.0], [75.0, 2451.0], [74.0, 2450.0], [73.0, 2436.0], [72.0, 2437.0], [79.0, 2446.0], [78.0, 2448.0], [77.0, 2447.0], [76.0, 2450.0], [83.0, 2454.0], [82.0, 2456.0], [81.0, 2444.0], [80.0, 2445.0], [84.0, 1424.5], [86.0, 908.0], [85.0, 1025.3333333333335], [87.0, 2461.0], [90.0, 846.2], [89.0, 927.5], [91.0, 689.4444444444445], [88.0, 1069.0], [92.0, 775.8750000000001], [93.0, 924.4], [95.0, 823.0], [94.0, 836.8571428571428], [96.0, 908.0], [98.0, 919.6666666666666], [99.0, 1265.0], [97.0, 2456.0], [101.0, 877.125], [100.0, 1110.75], [102.0, 934.7142857142858], [103.0, 1042.0], [104.0, 1045.2], [107.0, 2457.0], [106.0, 2459.0], [105.0, 2459.0], [110.0, 1069.125], [109.0, 1330.0], [111.0, 1241.1666666666665], [108.0, 1888.0], [112.0, 1148.5], [115.0, 1330.8], [114.0, 1350.0], [113.0, 1168.375], [117.0, 1366.0], [116.0, 1309.6], [119.0, 1149.4444444444443], [118.0, 1206.5714285714287], [122.0, 1172.888888888889], [121.0, 1234.2857142857142], [120.0, 1259.8333333333335], [123.0, 1248.375], [124.0, 1304.5714285714284], [127.0, 1279.125], [126.0, 1211.8], [125.0, 1351.6666666666667], [131.0, 1315.4444444444446], [130.0, 1370.2857142857142], [129.0, 1310.375], [128.0, 1373.3333333333333], [132.0, 1426.1666666666665], [134.0, 1395.6666666666667], [133.0, 1457.5], [135.0, 1409.7], [138.0, 1509.4444444444443], [137.0, 1486.125], [136.0, 1540.3333333333333], [139.0, 1689.2], [141.0, 1573.5], [140.0, 1597.6666666666667], [143.0, 1569.8], [142.0, 1570.8], [144.0, 1569.6], [145.0, 1882.6666666666665], [151.0, 1691.0], [150.0, 1630.2857142857142], [149.0, 1687.8], [148.0, 1756.75], [147.0, 1949.0], [146.0, 2257.5], [152.0, 1628.0], [153.0, 1659.0], [155.0, 1666.875], [154.0, 1620.125], [158.0, 1693.0000000000002], [157.0, 1720.6249999999998], [156.0, 1733.142857142857], [159.0, 1734.9999999999998], [161.0, 1757.888888888889], [160.0, 1743.1], [162.0, 1782.125], [166.0, 1699.8181818181818], [165.0, 1815.5714285714287], [164.0, 1813.4285714285716], [163.0, 1813.5714285714287], [167.0, 1682.6666666666667], [172.0, 1866.4545454545455], [171.0, 1847.8333333333335], [170.0, 1834.8000000000002], [169.0, 1763.25], [168.0, 1711.818181818182], [173.0, 1916.0], [175.0, 1938.0], [174.0, 1894.0], [177.0, 1994.142857142857], [176.0, 1968.5714285714287], [178.0, 2111.5], [180.0, 1991.4285714285713], [179.0, 2043.4285714285716], [181.0, 2025.6666666666667], [183.0, 2097.142857142857], [182.0, 2218.2], [187.0, 2146.777777777778], [186.0, 2125.1111111111113], [185.0, 2109.0], [184.0, 2119.1428571428573], [188.0, 2173.3333333333335], [191.0, 2226.285714285714], [190.0, 2220.1666666666665], [189.0, 2269.8], [192.0, 2227.428571428571], [193.0, 2351.6], [199.0, 2404.285714285714], [198.0, 2441.0], [197.0, 2492.0], [196.0, 2471.2], [195.0, 2436.2], [194.0, 2373.0], [204.0, 2272.846153846154], [203.0, 2338.375], [205.0, 2334.7000000000003], [206.0, 2298.1666666666665], [207.0, 2325.0], [202.0, 2372.5714285714284], [201.0, 2396.75], [200.0, 2405.857142857143], [208.0, 2346.666666666667], [209.0, 2337.7000000000003], [215.0, 2267.4545454545455], [214.0, 2266.75], [213.0, 2270.7272727272725], [212.0, 2271.2727272727275], [211.0, 2288.6363636363635], [210.0, 2361.0], [216.0, 2283.181818181818], [219.0, 2500.5833333333335], [218.0, 2441.75], [217.0, 2360.5454545454545], [223.0, 2490.4166666666665], [222.0, 2539.3333333333335], [221.0, 2489.125], [220.0, 2435.8571428571427], [227.0, 2554.692307692308], [226.0, 2530.0000000000005], [225.0, 2582.571428571429], [224.0, 2499.25], [231.0, 2598.7999999999997], [230.0, 2594.909090909091], [229.0, 2608.6363636363635], [228.0, 2609.0], [233.0, 2603.090909090909], [232.0, 2593.230769230769], [236.0, 2749.375], [235.0, 2710.9], [234.0, 2748.5], [239.0, 2785.555555555556], [238.0, 2726.6], [237.0, 2745.75], [241.0, 2844.769230769231], [240.0, 2883.8333333333335], [246.0, 2946.090909090909], [245.0, 2861.666666666667], [244.0, 2907.0], [243.0, 2884.6], [242.0, 2872.777777777778], [247.0, 2982.1250000000005], [249.0, 2967.714285714286], [248.0, 2966.714285714286], [255.0, 2944.7499999999995], [254.0, 2960.555555555555], [253.0, 2946.75], [252.0, 2961.1666666666665], [251.0, 3030.0], [250.0, 2984.3333333333335], [268.0, 2899.25], [259.0, 3073.2000000000003], [258.0, 2980.0], [257.0, 2942.625], [256.0, 2947.125], [263.0, 2931.4], [262.0, 3087.2], [261.0, 3087.1], [260.0, 3089.0909090909086], [267.0, 2900.0], [266.0, 2900.25], [265.0, 2892.25], [264.0, 2900.5], [271.0, 3081.0], [270.0, 3082.0], [269.0, 3083.0], [1.0, 1445.0]], "isOverall": false, "label": "Test Page", "isController": false}, {"data": [[177.82733333333343, 2074.363333333336]], "isOverall": false, "label": "Test Page-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 271.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1255.3666666666666, "minX": 1.60773E12, "maxY": 457774.5, "series": [{"data": [[1.60773006E12, 113425.5], [1.60773E12, 457774.5]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60773006E12, 1255.3666666666666], [1.60773E12, 4794.633333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60773006E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1844.1714285714309, "minX": 1.60773E12, "maxY": 3667.531380753139, "series": [{"data": [[1.60773006E12, 3667.531380753139], [1.60773E12, 2238.6875495638415]], "isOverall": false, "label": "Home", "isController": false}, {"data": [[1.60773006E12, 2752.823684210525], [1.60773E12, 1844.1714285714309]], "isOverall": false, "label": "Test Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60773006E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1844.1232142857154, "minX": 1.60773E12, "maxY": 3667.5062761506283, "series": [{"data": [[1.60773006E12, 3667.5062761506283], [1.60773E12, 2238.6431403647885]], "isOverall": false, "label": "Home", "isController": false}, {"data": [[1.60773006E12, 2752.8157894736823], [1.60773E12, 1844.1232142857154]], "isOverall": false, "label": "Test Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60773006E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.60773E12, "maxY": 48.899581589958146, "series": [{"data": [[1.60773006E12, 48.899581589958146], [1.60773E12, 42.64869151467078]], "isOverall": false, "label": "Home", "isController": false}, {"data": [[1.60773006E12, 0.0], [1.60773E12, 0.0]], "isOverall": false, "label": "Test Page", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60773006E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 272.0, "minX": 1.60773E12, "maxY": 4287.0, "series": [{"data": [[1.60773006E12, 4287.0], [1.60773E12, 4119.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60773006E12, 1492.5799998521804], [1.60773E12, 462.1899971604347]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60773006E12, 1493.0], [1.60773E12, 467.16360045433044]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60773006E12, 1492.8899999260902], [1.60773E12, 465.6289997160435]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60773006E12, 1445.0], [1.60773E12, 272.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60773006E12, 3131.0], [1.60773E12, 2094.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60773006E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 417.0, "minX": 5.0, "maxY": 3621.0, "series": [{"data": [[47.0, 1104.5], [48.0, 1503.0], [49.0, 2258.0], [51.0, 1901.0], [53.0, 1647.0], [52.0, 2785.5], [54.0, 1936.0], [55.0, 1749.0], [56.0, 1339.0], [57.0, 2684.0], [58.0, 2638.5], [59.0, 2937.0], [61.0, 3621.0], [60.0, 3210.5], [5.0, 417.0], [29.0, 507.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 61.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 417.0, "minX": 5.0, "maxY": 3621.0, "series": [{"data": [[47.0, 1104.5], [48.0, 1503.0], [49.0, 2258.0], [51.0, 1901.0], [53.0, 1647.0], [52.0, 2785.5], [54.0, 1936.0], [55.0, 1749.0], [56.0, 1339.0], [57.0, 2684.0], [58.0, 2638.5], [59.0, 2937.0], [61.0, 3621.0], [60.0, 3210.5], [5.0, 417.0], [29.0, 507.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 61.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 7.316666666666666, "minX": 1.60773E12, "maxY": 42.68333333333333, "series": [{"data": [[1.60773006E12, 7.316666666666666], [1.60773E12, 42.68333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60773006E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 10.316666666666666, "minX": 1.60773E12, "maxY": 39.68333333333333, "series": [{"data": [[1.60773006E12, 10.316666666666666], [1.60773E12, 39.68333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60773006E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 3.9833333333333334, "minX": 1.60773E12, "maxY": 21.016666666666666, "series": [{"data": [[1.60773006E12, 3.9833333333333334], [1.60773E12, 21.016666666666666]], "isOverall": false, "label": "Home-success", "isController": false}, {"data": [[1.60773006E12, 6.333333333333333], [1.60773E12, 18.666666666666668]], "isOverall": false, "label": "Test Page-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60773006E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 10.316666666666666, "minX": 1.60773E12, "maxY": 39.68333333333333, "series": [{"data": [[1.60773006E12, 10.316666666666666], [1.60773E12, 39.68333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60773006E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

